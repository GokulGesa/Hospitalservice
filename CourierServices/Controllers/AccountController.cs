using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http;
using CourierServices.Models;
using System.Data;
using MySql.Data.MySqlClient;
using MySql.Web;
using System.Net.Mail;
using System.Net;
using System.Threading;
using System.IO;
using System.Net.Http;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Net.Http.Headers;
using System.Drawing.Imaging;
using Word = Microsoft.Office.Interop.Word;
using System.Reflection;

namespace CourierServices.Controllers
{
    public class AccountController : ApiController
    {
        //private const string LocalLoginProvider = "Local";

        public AccountController()
        {
        }

        #region authenticate
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/authenticate")]
        [HttpPost]
        public HttpResponseMessage authenticate(string username, string password, string grant_type)
        {
            HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.BadRequest);

            Login loginDetails = new Login();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from  login where UserName='" + username + "' AND  Password ='" + password + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            loginDetails.RoleId = (int)dr["RoleId"];
                            loginDetails.Role = dr["Role"].ToString();
                            //  loginDetails.patientRegistration.Guardian = dr["Guardian"].ToString();

                            var statuscode = HttpStatusCode.OK;
                            response = Request.CreateResponse(statuscode);
                            //response.Content.Headers.ContentLength = loginDeta;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return response;
            }
        }
        #endregion


        #region insertlogin
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertlogin")]
        [HttpPost]
        public void insertlogin(Login logindetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    conn.Open();
                    strSQL = "select * from login where UserName='" + logindetails.UserName + "' ";
                    MySqlDataAdapter sda = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(sda);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    sda.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        strSQL = "INSERT INTO  login(UserName,Password,ConfirmPassword,Role,RoleId,SignatureImageName,SignatureImagePath) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";

                        MySqlCommand inscmd = new MySqlCommand(strSQL, conn);
                        inscmd.Parameters.AddWithValue("@val1", logindetails.UserName);
                        inscmd.Parameters.AddWithValue("@val2", logindetails.Password);
                        inscmd.Parameters.AddWithValue("@val3", logindetails.ConfirmPassword);
                        inscmd.Parameters.AddWithValue("@val4", logindetails.Role);
                        inscmd.Parameters.AddWithValue("@val5", logindetails.RoleId);
                        inscmd.Parameters.AddWithValue("@val6", logindetails.SignatureImageName);
                        inscmd.Parameters.AddWithValue("@val7", logindetails.SignatureImagePath);
                        inscmd.CommandType = CommandType.Text;
                        inscmd.ExecuteNonQuery();
                    }
                    else
                    {
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    if (dr["Role"].ToString() == "Admin")
                                    {
                                        strSQL = "Update login set SignatureImageName=@val1,SignatureImagePath=@val2 " +
                                            " ,Password=@val3,ConfirmPassword=@val4" +
                                            " where Id=" + dr["Id"].ToString() + " ";
                                        MySqlCommand upCmd = new MySqlCommand(strSQL, conn);
                                        upCmd.Parameters.AddWithValue("@val1", logindetails.SignatureImageName);
                                        upCmd.Parameters.AddWithValue("@val2", logindetails.SignatureImagePath);
                                        upCmd.Parameters.AddWithValue("@val3", logindetails.Password);
                                        upCmd.Parameters.AddWithValue("@val4", logindetails.ConfirmPassword);
                                        upCmd.CommandType = CommandType.Text;
                                        upCmd.ExecuteNonQuery();
                                    }
                                    else if (dr["Role"].ToString() != "Admin")
                                    {
                                        strSQL = "Update login set Role=@val1,SignatureImageName=@val2,SignatureImagePath=@val3 where Id=" + dr["Id"].ToString() + " ";
                                        MySqlCommand upCmd = new MySqlCommand(strSQL, conn);
                                        upCmd.Parameters.AddWithValue("@val1", logindetails.Role);
                                        upCmd.Parameters.AddWithValue("@val2", logindetails.SignatureImageName);
                                        upCmd.Parameters.AddWithValue("@val3", logindetails.SignatureImagePath);
                                        upCmd.CommandType = CommandType.Text;
                                        upCmd.ExecuteNonQuery();
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getsignUpDetails

        /// <summary>
        ///
        /// </summary>
        ///
        ///
        /// <returns name="patientAllRegistrationInfo"></returns>
        ///

        [Route("api/Account/getsignUpDetails")]
        [HttpPost]
        public Login getsignUpDetails(Login getdetails)
        {
            Login loginDetails = new Login();
            DataTable dt = new DataTable();
            
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from  login where UserName='" + getdetails.UserName + "' AND  Password ='" + getdetails.Password + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            loginDetails.RoleId = (int)dr["RoleId"];
                            loginDetails.Role = dr["Role"].ToString();
                            //  loginDetails.patientRegistration.Guardian = dr["Guardian"].ToString();


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return loginDetails;
            }
        }

        #endregion

        #region getMaxRoleID
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getMaxRoleID")]
        [HttpPost]
        public List<Login> getMaxRoleID()
        {
            List<Login> lstlogin = new List<Login>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT max(RoleId) as RoleId,Role from  login";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Login logindetails = new Login();
                            logindetails.RoleId = Convert.ToInt32(dr["RoleId"].ToString());
                            logindetails.Role = dr["Role"].ToString();
                            lstlogin.Add(logindetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstlogin;

            }
        }
        #endregion


        #region getAllsignUpDetails
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllsignUpDetails")]
        [HttpPost]
        public List<Login> getAllsignUpDetails()
        {

            List<Login> lstlogin = new List<Login>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * from  login where Id !=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Login logindetails = new Login();

                            logindetails.Id = (int)dr["Id"];
                            logindetails.UserName = dr["UserName"].ToString();
                            logindetails.Password = dr["Password"].ToString();
                            logindetails.ConfirmPassword = dr["ConfirmPassword"].ToString();
                            logindetails.Role = dr["Role"].ToString();
                            logindetails.SignatureImageName = dr["SignatureImageName"].ToString();
                            logindetails.SignatureImagePath = dr["SignatureImagePath"].ToString();
                            lstlogin.Add(logindetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstlogin;

            }
        }
        #endregion

        #region getAllRegistrationDetails
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllRegistrationDetails")]
        [HttpGet]
        public List<PatientRegistration> getAllRegistrationDetails(string searchNameorRegId, int searchFlag)
        {
            List<PatientRegistration> lstregistrationDetails = new List<PatientRegistration>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (searchFlag == 1)
                    {
                        strSQL = "SELECT * FROM  patientregistration Where FirstName LIKE'%" + searchNameorRegId + "%' OR LastName LIKE '%" + searchNameorRegId + "%' OR RegID LIKE '%" + searchNameorRegId + "%'";
                    }
                    else if (searchFlag == 2)
                    {
                        strSQL = "SELECT * FROM  patientregistration Where ExternalID LIKE'%" + searchNameorRegId + "%' ";
                    }
                    else if (searchFlag == 3)
                    {
                        strSQL = "SELECT * FROM  patientregistration Where RegID ='" + searchNameorRegId + "' ";
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientRegistration patientRegistration = new PatientRegistration();

                            patientRegistration.RegID = (dr["RegID"]).ToString();
                            patientRegistration.Title = dr["Title"].ToString();
                            patientRegistration.FirstName = dr["FirstName"].ToString();
                            patientRegistration.MiddleName = dr["MiddleName"].ToString();
                            patientRegistration.LastName = dr["LastName"].ToString();
                            patientRegistration.Guardian = dr["Guardian"].ToString();
                            patientRegistration.Relation = dr["Relation"].ToString();
                            patientRegistration.ContactEmail = dr["ContactEmail"].ToString();
                            patientRegistration.PatientType = dr["PatientType"].ToString();
                            patientRegistration.Sex = dr["Sex"].ToString();
                            patientRegistration.MaritalStatus = dr["MaritalStatus"].ToString();
                            patientRegistration.DOB = dr["DOB"].ToString();
                            patientRegistration.Age = dr["Age"].ToString();
                            patientRegistration.DateOfReg = dr["DateOfReg"].ToString();
                            patientRegistration.PhoneNumber = dr["PhoneNumber"].ToString();
                            if (dr["ExternalID"] != DBNull.Value)
                            {
                                patientRegistration.ExternalID = dr["ExternalID"].ToString();
                            }
                            else { patientRegistration.ExternalID = ""; }
                            lstregistrationDetails.Add(patientRegistration);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstregistrationDetails;
            }
        }
        #endregion

        #region getAllRegistrationDetailsEmailPhone
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllRegistrationDetailsEmailPhone")]
        [HttpGet]
        public List<PatientRegistration> getAllRegistrationDetailsEmailPhone(string searchNameorRegId)
        {
            List<PatientRegistration> lstregistrationDetails = new List<PatientRegistration>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  patientregistration Where PhoneNumber LIKE'%" + searchNameorRegId + "%' OR ContactEmail LIKE '%" + searchNameorRegId + "%' OR RegID LIKE '%" + searchNameorRegId + "%'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientRegistration patientRegistration = new PatientRegistration();

                            patientRegistration.RegID = dr["RegID"].ToString();
                            patientRegistration.Title = dr["Title"].ToString();
                            patientRegistration.FirstName = dr["FirstName"].ToString();
                            patientRegistration.MiddleName = dr["MiddleName"].ToString();
                            patientRegistration.LastName = dr["LastName"].ToString();
                            patientRegistration.Guardian = dr["Guardian"].ToString();
                            patientRegistration.Relation = dr["Relation"].ToString();
                            patientRegistration.ContactEmail = dr["ContactEmail"].ToString();
                            patientRegistration.PatientType = dr["PatientType"].ToString();
                            patientRegistration.Sex = dr["Sex"].ToString();
                            patientRegistration.MaritalStatus = dr["MaritalStatus"].ToString();
                            patientRegistration.DOB = dr["DOB"].ToString();
                            patientRegistration.Age = dr["age"].ToString();
                            patientRegistration.DateOfReg = dr["DateOfReg"].ToString();
                            patientRegistration.PhoneNumber = dr["PhoneNumber"].ToString();
                            lstregistrationDetails.Add(patientRegistration);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstregistrationDetails;
            }
        }
        #endregion

        #region getAllRegistrationDetailsByToday
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllRegistrationDetailsByToday")]
        [HttpGet]
        public List<PatientRegistration> getAllRegistrationDetailsByToday()
        {
            List<PatientRegistration> registrationDetails = new List<PatientRegistration>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //DateTime today = new DateTime();
                    string today = DateTime.Now.ToString("MM/dd/yyyy");
                    string strSQL = "SELECT * FROM  patientregistration Where DateOfReg = '" + today + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientRegistration registration = new PatientRegistration();


                            registration.FirstName = dr["FirstName"].ToString();
                            registration.LastName = dr["LastName"].ToString();
                            registration.DateOfReg = dr["DateOfReg"].ToString();
                            registration.Age = dr["age"].ToString();
                            if (registration.Age == "0")
                            {
                                registration.AgeCategory = dr["AgeCategory"].ToString();
                                //registration.Age = (int)dr["UnknownAge"];
                            }
                            registration.AgeDay = Convert.ToInt32(dr["AgeDay"].ToString());
                            registration.AgeMonth = Convert.ToInt32(dr["AgeMonth"].ToString());
                            registration.AgeYear = Convert.ToInt32(dr["AgeYear"].ToString());
                            registration.PhoneNumber = dr["PhoneNumber"].ToString();
                            registration.ContactEmail = dr["ContactEmail"].ToString();
                            registration.Sex = dr["Sex"].ToString();
                            registration.RegID = (dr["RegID"]).ToString();
                            registration.ExternalID = dr["ExternalID"].ToString();

                            registrationDetails.Add(registration);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return registrationDetails;
            }
        }
        #endregion

        #region getAllDetailsForApprover
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllDetailsForApprover")]
        [HttpGet]
        public List<Approver> getAllDetailsForApprover()
        {
            List<Approver> lstApproverDetails = new List<Approver>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  approver Where Status = 0";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Approver approver = new Approver();

                            approver.Id = (int)dr["Id"];
                            approver.PatientName = dr["PatientName"].ToString();
                            approver.CreateDate = dr["CreateDate"].ToString();
                            approver.InvoiceNumber = dr["InvoiceNumber"].ToString();
                            approver.MRD = dr["MRD"].ToString();
                            approver.LapTest = dr["LapTest"].ToString();
                            lstApproverDetails.Add(approver);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstApproverDetails;
            }
        }
        #endregion

        //New

        #region Patient Registration

        #region insertExternalId
        /// <summary>
        /// Table - PatientRegistration
        /// <param name="RegID"></param>
        [Route("api/Account/insertExternalId")]
        [HttpPost]
        public string insertExternalId(string regId, string externalID)
        {
            string patientId = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    if ((externalID) == "")
                    {
                        externalID = "";
                    }
                    string strSQL = "Update  PatientRegistration set ExternalID='" + externalID + "' where RegID='" + regId + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return patientId;
            }
        }
        #endregion

        #region deleteInsertedUser
        /// <summary>
        /// Table - PatientRegistration
        /// </summary>
        /// This service helps to add new patient Visit.
        /// <param name="RegID"></param>
        [Route("api/Account/deleteInsertedUser")]
        [HttpPost]
        public void deleteInsertedUser(int RegID)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "delete from PatientRegistration where ID=" + RegID + "";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region insertPatientRegistration
        /// <summary>
        /// Table - PatientRegistration
        /// </summary>
        /// This service helps to add new patient Visit.
        /// <param name="RegID"></param>
        [Route("api/Account/insertPatientRegistration")]
        [HttpPost]
        public string insertPatientRegistration(PatientRegistration registration)
        {
            string patientId = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  PatientRegistration(Title,FirstName,MiddleName,LastName,Guardian,Relation,PatientType,Sex, " +
                                    " MaritalStatus,DOB,Age,DateOfReg,PhoneNumber,ProfilePicture,AgeDay,AgeMonth,AgeYear,UnknownAge,AgeCategory,ContactEmail,ExternalID) " +
                                    " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16,@val17, " +
                                    " @val18,@val19,@val20,@val21); " +
                                    " SELECT LAST_INSERT_ID()";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", registration.Title);
                    cmd.Parameters.AddWithValue("@val2", registration.FirstName);
                    cmd.Parameters.AddWithValue("@val3", registration.MiddleName);
                    cmd.Parameters.AddWithValue("@val4", registration.LastName);
                    cmd.Parameters.AddWithValue("@val5", registration.Guardian);
                    cmd.Parameters.AddWithValue("@val6", registration.Relation);
                    cmd.Parameters.AddWithValue("@val7", registration.PatientType);
                    cmd.Parameters.AddWithValue("@val8", registration.Sex);
                    cmd.Parameters.AddWithValue("@val9", registration.MaritalStatus);
                    if (registration.DOB == null)
                    {
                        DateTime dobDynamic = DateTime.Now.Date;
                        if (registration.AgeCategory == "Months")
                        {
                            int result = registration.UnknownAge;
                            dobDynamic = DateTime.Today.AddMonths(-result);
                            registration.DOB = Convert.ToString(dobDynamic.ToString("MM/dd/yyyy"));
                            cmd.Parameters.AddWithValue("@val10", registration.DOB);

                        }
                        else if (registration.AgeCategory == "Days")
                        {
                            int result = registration.UnknownAge;
                            dobDynamic = DateTime.Today.AddDays(-result);
                            registration.DOB = Convert.ToString(dobDynamic.ToString("MM/dd/yyyy"));
                            cmd.Parameters.AddWithValue("@val10", registration.DOB);
                        }
                        else
                        {
                            if (registration.Age != "0")
                            {
                                dobDynamic = DateTime.Today.AddYears(Convert.ToInt32(registration.Age));
                                registration.DOB = Convert.ToString(dobDynamic.ToString("MM/dd/yyyy"));
                                cmd.Parameters.AddWithValue("@val10", registration.DOB);
                            }
                        }
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@val10", registration.DOB);
                    }
                    cmd.Parameters.AddWithValue("@val11", registration.Age);
                    cmd.Parameters.AddWithValue("@val12", registration.DateOfReg);
                    cmd.Parameters.AddWithValue("@val13", registration.PhoneNumber);
                    cmd.Parameters.AddWithValue("@val14", registration.ProfilePicture);

                    cmd.Parameters.AddWithValue("@val15", registration.AgeDay);
                    cmd.Parameters.AddWithValue("@val16", registration.AgeMonth);
                    cmd.Parameters.AddWithValue("@val17", registration.AgeYear);

                    cmd.Parameters.AddWithValue("@val18", registration.UnknownAge);
                    cmd.Parameters.AddWithValue("@val19", registration.AgeCategory);
                    cmd.Parameters.AddWithValue("@val20", registration.ContactEmail);
                    cmd.Parameters.AddWithValue("@val21", registration.ExternalID);

                    cmd.CommandType = CommandType.Text;
                    //cmd.ExecuteNonQuery();

                    string Id = cmd.ExecuteScalar().ToString();
                    string updSQL = "update PatientRegistration set RegID='PC" + Id + "' where ID = '" + Id + "'";
                    MySqlCommand upcmd = new MySqlCommand(updSQL, conn);
                    upcmd.CommandType = CommandType.Text;
                    upcmd.ExecuteNonQuery();

                    string idSQL = "SELECT * from  patientregistration where ID = '" + Id + "'";
                    MySqlDataAdapter iddata = new MySqlDataAdapter(idSQL, conn);
                    MySqlCommandBuilder idcmd = new MySqlCommandBuilder(iddata);
                    DataSet idDS = new DataSet();
                    DataTable idDT = new DataTable();
                    iddata.Fill(idDS);
                    idDT = idDS.Tables[0];
                    foreach (DataRow dr in idDT.Rows)
                    {
                        if (dr != null)
                        {
                            patientId = dr["RegID"].ToString();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return patientId;
            }
        }
        #endregion

        #region insertPatientContactInfo
        /// <summary>
        /// Table - PatientContactInfo
        /// </summary>
        /// This service helps to add patient contact information for already created patient in PatientRegistration.Here RegID referred as foriengn key of PatientRegistration table.
        /// <param name="RegID"></param>
        [Route("api/Account/insertPatientContactInfo")]
        [HttpPost]
        public void insertPatientContactInfo(PatientContactInfo contactInfo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  PatientContactInfo(DoorNo,FlatName,StreetName1,StreetName2,City,State,MobileNO,NotifySMS,PhoneNo,Locality,Pincode,NotifyEmail,ContactEmail) VALUES(@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    //  cmd.Parameters.AddWithValue("@val1", contactInfo.RegID);
                    cmd.Parameters.AddWithValue("@val2", contactInfo.DoorNo);
                    cmd.Parameters.AddWithValue("@val3", contactInfo.FlatName);
                    cmd.Parameters.AddWithValue("@val4", contactInfo.StreetName1);
                    cmd.Parameters.AddWithValue("@val5", contactInfo.StreetName2);
                    cmd.Parameters.AddWithValue("@val6", contactInfo.City);
                    cmd.Parameters.AddWithValue("@val7", contactInfo.State);
                    cmd.Parameters.AddWithValue("@val8", contactInfo.MobileNO);
                    cmd.Parameters.AddWithValue("@val9", contactInfo.NotifySMS);
                    cmd.Parameters.AddWithValue("@val10", contactInfo.PhoneNo);
                    cmd.Parameters.AddWithValue("@val11", contactInfo.Locality);
                    cmd.Parameters.AddWithValue("@val12", contactInfo.Pincode);
                    cmd.Parameters.AddWithValue("@val13", contactInfo.NotifyEmail);
                    cmd.Parameters.AddWithValue("@val14", contactInfo.ContactEmail);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertPatientSocialInfo
        /// <summary>
        /// Table - PatientSocialInfo
        /// </summary>
        /// This service helps to add patient contact information for already created patient in PatientRegistration.Here RegID referred as foriengn key of PatientRegistration table.
        /// <param name="RegID"></param>
        [Route("api/Account/insertPatientSocialInfo")]
        [HttpPost]
        public void insertPatientSocialInfo(PatientSocialInfo socialInfo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  patientsocialinfo(SocialRelationship,Name,EmploymentStatus,EmployerName,EmployerAddress,City,State,IncomeGroup) VALUES(@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9)";
                    conn.Open();

                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    //  cmd.Parameters.AddWithValue("@val1", socialInfo.RegID);
                    cmd.Parameters.AddWithValue("@val2", socialInfo.SocialRelationship);
                    cmd.Parameters.AddWithValue("@val3", socialInfo.Name);
                    cmd.Parameters.AddWithValue("@val4", socialInfo.EmploymentStatus);
                    cmd.Parameters.AddWithValue("@val5", socialInfo.EmployerName);
                    cmd.Parameters.AddWithValue("@val6", socialInfo.EmployerAddress);
                    cmd.Parameters.AddWithValue("@val7", socialInfo.City);
                    cmd.Parameters.AddWithValue("@val8", socialInfo.State);
                    cmd.Parameters.AddWithValue("@val9", socialInfo.IncomeGroup);


                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertPatientEmergencyContact
        /// <summary>
        /// Table - PatientEmergencyContact
        /// </summary>
        /// This service helps to add patient emergency Contact for already created patient in PatientRegistration. Here RegID referred as foriengn key of PatientRegistration table.
        /// <param name="RegID"></param>
        [Route("api/Account/insertPatientEmergencyContact")]
        [HttpPost]
        public void insertPatientEmergencyContact(PatientEmergencyContact emergencyContact)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO  PatientEmergencyContact(ContactName,EmergencyRelationShip,ContactNo) VALUES(@val2,@val3,@val4)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    //cmd.Parameters.AddWithValue("@val1", emergencyContact.RegID);
                    cmd.Parameters.AddWithValue("@val2", emergencyContact.ContactName);
                    cmd.Parameters.AddWithValue("@val4", emergencyContact.EmergencyRelationShip);
                    cmd.Parameters.AddWithValue("@val3", emergencyContact.ContactNo);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getPatientAllRegistrationInfo

        /// <summary>
        /// getPatientAllRegistrationInfo
        /// </summary>
        /// Pass the reg ID as a parameter and get all patient from patientregistration, PatientContactInfo, PatientSocialInfo and PatientEmergencyContact tables and return it.
        ///  /// <param name="regID"></param>
        /// <returns name="patientAllRegistrationInfo"></returns>
        ///

        [Route("api/Account/getPatientAllRegistrationInfo")]
        [HttpGet]
        public PatientAllRegistrationInfo getPatientAllRegistrationInfo(int regID)
        {
            PatientAllRegistrationInfo patientAllRegistrationInfo = new PatientAllRegistrationInfo();

            patientAllRegistrationInfo.patientContactInfo = new PatientContactInfo();
            patientAllRegistrationInfo.patientRegistration = new PatientRegistration();
            patientAllRegistrationInfo.patientSocialInfo = new PatientSocialInfo();
            patientAllRegistrationInfo.patientEmgContact = new PatientEmergencyContact();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT pReg.Regid,pReg.Title,pReg.FirstName,pReg.MiddleName,pReg.LastName,pReg.Guardian,pReg.Relation,pReg.PatientType,pReg.Sex,pReg.MaritalStatus,pReg.DOB,pReg.Age,pReg.DateOfReg,pReg.ProfilePicture,pContact.DoorNo,pContact.FlatName,pContact.StreetName1,pContact.StreetName2,pContact.City,pContact.State,pContact.MobileNO,pContact.NotifySMS,pContact.PhoneNo,pContact.Locality,pContact.Pincode,pContact.NotifyEmail,pContact.ContactEmail,pSocial.SocialRelationship,pSocial.Name,pSocial.EmploymentStatus,pSocial.EmployerName,pSocial.EmployerAddress,pSocial.City,pSocial.State,pSocial.IncomeGroup,pEmergency.ContactName,pEmergency.ContactNo,pEmergency.EmergencyRelationShip FROM  patientregistration pReg INNER JOIN  PatientContactInfo pContact ON pReg.RegID = pContact.RegID INNER JOIN  PatientSocialInfo pSocial ON pSocial.RegID = pContact.RegID INNER JOIN  PatientEmergencyContact pEmergency ON pEmergency.RegID = '" + regID + "'";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            //patientregistration table
                            patientAllRegistrationInfo.patientRegistration.RegID = (dr["RegID"]).ToString();
                            patientAllRegistrationInfo.patientRegistration.Title = dr["Title"].ToString();
                            patientAllRegistrationInfo.patientRegistration.FirstName = dr["FirstName"].ToString();
                            patientAllRegistrationInfo.patientRegistration.MiddleName = dr["MiddleName"].ToString();
                            patientAllRegistrationInfo.patientRegistration.LastName = dr["LastName"].ToString();
                            patientAllRegistrationInfo.patientRegistration.Guardian = dr["Guardian"].ToString();
                            patientAllRegistrationInfo.patientRegistration.Relation = dr["Relation"].ToString();
                            patientAllRegistrationInfo.patientRegistration.PatientType = dr["PatientType"].ToString();
                            patientAllRegistrationInfo.patientRegistration.Sex = dr["Sex"].ToString();
                            patientAllRegistrationInfo.patientRegistration.MaritalStatus = dr["MaritalStatus"].ToString();
                            patientAllRegistrationInfo.patientRegistration.DOB = dr["DOB"].ToString();
                            patientAllRegistrationInfo.patientRegistration.Age = dr["age"].ToString();
                            patientAllRegistrationInfo.patientRegistration.DateOfReg = dr["DateOfReg"].ToString();

                            //PatientEmergencyContact
                            patientAllRegistrationInfo.patientEmgContact.ContactName = dr["ContactName"].ToString();
                            patientAllRegistrationInfo.patientEmgContact.EmergencyRelationShip = dr["EmergencyRelationShip"].ToString();
                            patientAllRegistrationInfo.patientEmgContact.ContactNo = Convert.ToInt64(dr["ContactNo"]);

                            //PatientSocialInfo
                            patientAllRegistrationInfo.patientSocialInfo.SocialRelationship = dr["SocialRelationship"].ToString();
                            patientAllRegistrationInfo.patientSocialInfo.Name = dr["Name"].ToString();
                            patientAllRegistrationInfo.patientSocialInfo.EmploymentStatus = dr["EmploymentStatus"].ToString();
                            patientAllRegistrationInfo.patientSocialInfo.EmployerName = dr["EmployerName"].ToString();
                            patientAllRegistrationInfo.patientSocialInfo.EmployerAddress = dr["EmployerAddress"].ToString();
                            patientAllRegistrationInfo.patientSocialInfo.City = dr["City"].ToString();
                            patientAllRegistrationInfo.patientSocialInfo.State = dr["State"].ToString();
                            patientAllRegistrationInfo.patientSocialInfo.IncomeGroup = dr["IncomeGroup"].ToString();

                            //PatientContactInfo
                            patientAllRegistrationInfo.patientContactInfo.DoorNo = dr["DoorNo"].ToString();
                            patientAllRegistrationInfo.patientContactInfo.FlatName = dr["FlatName"].ToString();
                            patientAllRegistrationInfo.patientContactInfo.StreetName1 = dr["StreetName1"].ToString();
                            patientAllRegistrationInfo.patientContactInfo.StreetName2 = dr["StreetName2"].ToString();
                            patientAllRegistrationInfo.patientContactInfo.City = dr["City"].ToString();
                            patientAllRegistrationInfo.patientContactInfo.State = dr["State"].ToString();
                            patientAllRegistrationInfo.patientContactInfo.MobileNO = Convert.ToInt64(dr["ContactNo"]);
                            patientAllRegistrationInfo.patientContactInfo.NotifySMS = Convert.ToBoolean(dr["NotifySMS"]);
                            patientAllRegistrationInfo.patientContactInfo.PhoneNo = Convert.ToInt64(dr["PhoneNo"]); ;
                            patientAllRegistrationInfo.patientContactInfo.Locality = dr["Locality"].ToString();
                            patientAllRegistrationInfo.patientContactInfo.Pincode = Convert.ToInt64(dr["Pincode"]); ;
                            patientAllRegistrationInfo.patientContactInfo.NotifyEmail = Convert.ToBoolean(dr["NotifyEmail"]);
                            patientAllRegistrationInfo.patientContactInfo.ContactEmail = dr["ContactEmail"].ToString();

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return patientAllRegistrationInfo;
            }
        }

        #endregion


        #region getPatientRegistrationInfoByRegID

        /// <summary>
        /// getPatientAllRegistrationInfo
        /// </summary>
        /// Pass the reg ID as a parameter and get all patient from patientregistration, PatientContactInfo, PatientSocialInfo and PatientEmergencyContact tables and return it.
        ///  /// <param name="regID"></param>
        /// <returns name="patientAllRegistrationInfo"></returns>
        ///

        [Route("api/Account/getPatientRegistrationInfoByRegID")]
        [HttpGet]
        public List<PatientRegistration> getPatientRegistrationInfoByRegID(string regID)
        {
            List<PatientRegistration> patientAllRegistrationInfo = new List<PatientRegistration>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from  patientregistration where RegID = '" + regID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientRegistration paReg = new PatientRegistration();
                            paReg.RegID = (dr["RegID"]).ToString();
                            paReg.Title = dr["Title"].ToString();
                            paReg.FirstName = dr["FirstName"].ToString();
                            paReg.MiddleName = dr["MiddleName"].ToString();
                            paReg.LastName = dr["LastName"].ToString();
                            paReg.Guardian = dr["Guardian"].ToString();
                            paReg.Relation = dr["Relation"].ToString();
                            paReg.PatientType = dr["PatientType"].ToString();
                            paReg.Sex = dr["Sex"].ToString();
                            paReg.MaritalStatus = dr["MaritalStatus"].ToString();
                            paReg.DOB = dr["DOB"].ToString();
                            paReg.Age = dr["age"].ToString();
                            paReg.DateOfReg = dr["DateOfReg"].ToString();
                            patientAllRegistrationInfo.Add(paReg);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return patientAllRegistrationInfo;
            }
        }

        #endregion

        #endregion

        #region getParentRegistraionIdForGroup
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getParentRegistraionIdForGroup")]
        [HttpGet]
        public GetRegistration getParentRegistraionIdForGroup(string firstName, string lastName, string DateOfReg)
        {
            GetRegistration registrationId = new GetRegistration();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT RegID,Sex  from  grouppatientregistration Where FirstName = '" + firstName + "' && LastName = '" + lastName + "'&& DateOfReg='" + DateOfReg + "'";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            registrationId.RegId = (int)(dr["RegId"]);
                            registrationId.Sex = dr["Sex"].ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return registrationId;
            }
        }
        #endregion
        #region getParentRegistraionId
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getParentRegistraionId")]
        [HttpGet]
        public GetRegistration getParentRegistraionId(string phoneNumber)
        {
            GetRegistration registrationId = new GetRegistration();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT RegID,Sex  from  patientregistration Where PhoneNumber = '" + phoneNumber + "'";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            registrationId.RegId = (int)(dr["RegId"]);
                            registrationId.Sex = dr["Sex"].ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return registrationId;
            }
        }
        #endregion

        #region LabOrder
        #region getLabOrderMasterList
        /// <summary>
        /// getLabOrderMasterList
        /// </summary>
        /// To get all records from LabOrderMasterList table.
        /// <returns></returns>

        [Route("api/Account/getLabOrderMasterList")]
        [HttpGet]
        public List<LabOrderMasterList> getLabOrderMasterList()
        {
            List<LabOrderMasterList> lstLabOrderMaster = new List<LabOrderMasterList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labordermasterlist";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            LabOrderMasterList LabOrderMaster = new LabOrderMasterList();
                            LabOrderMaster.ProfileID = Convert.ToInt16(dr["ProfileID"]);
                            LabOrderMaster.ProfileName = dr["ProfileName"].ToString();
                            LabOrderMaster.Amount = Convert.ToDouble(dr["Amount"]);

                            lstLabOrderMaster.Add(LabOrderMaster);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabOrderMaster;
            }
        }
        #endregion



        #region getLabOrderTestList
        /// <summary>
        /// getLabOrderTestList
        /// </summary>
        /// Pass the profileID as a parameter and get all records from labordertestlist.
        /// <returns></returns>

        [Route("api/Account/getLabOrderTestList")]
        [HttpGet]
        public List<LabOrderTestList> getLabOrderTestList(int profileID)
        {
            List<LabOrderTestList> lstLabOrderTest = new List<LabOrderTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labordertestlist where ProfileID ='" + profileID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            LabOrderTestList labTestOrder = new LabOrderTestList();
                            labTestOrder.TestID = Convert.ToInt16(dr["TestID"]);
                            labTestOrder.ProfileID = Convert.ToInt16(dr["ProfileID"]);
                            labTestOrder.TestName = dr["TestName"].ToString();
                            labTestOrder.Amount = Convert.ToInt64(dr["Amount"]);

                            lstLabOrderTest.Add(labTestOrder);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabOrderTest;
            }
        }
        #endregion

        #endregion
        //

        //Lab Order Insertion
        #region AllInsertLabOrder

        #region insertDepartmentDetails
        /// <summary>
        /// Table - Department
        /// </summary>
        /// Inserted the department details
        /// <param name="department"></param>
        [Route("api/Account/insertDepartmentDetails")]
        [HttpPost]
        public void insertDepartmentDetails(Department department)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Today;
                    department.CreateDate = today.ToShortDateString();
                    department.Priority = 0;
                    DateTime now = DateTime.Now;
                    string strSQL = "INSERT INTO  Department(DepartmentName,CreateDate,Priority) VALUES(@val1,@val2,@val3)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", department.DepartmentName);
                    cmd.Parameters.AddWithValue("@val2", department.CreateDate);
                    cmd.Parameters.AddWithValue("@val3", department.Priority);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertMasterProfileList
        /// <summary>
        /// Table - MasterProfileList
        /// </summary>
        /// Inserted the MasterProfileList table values. The Department Id reffered from Department table.
        /// <param name="masterProfileList"></param>
        [Route("api/Account/insertMasterProfileList")]
        [HttpPost]
        public void insertMasterProfileList(MasterProfileList masterProfileList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Today;
                    masterProfileList.CreateDate = today.ToShortDateString();
                    string strSQL = "INSERT INTO MasterProfileList(DepartmentID,ProfileName,Amount,CreateDate) VALUES(@val1,@val2,@val3,@val4)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", masterProfileList.DepartmentID);
                    cmd.Parameters.AddWithValue("@val2", masterProfileList.ProfileName);
                    cmd.Parameters.AddWithValue("@val3", masterProfileList.Amount);
                    cmd.Parameters.AddWithValue("@val4", masterProfileList.CreateDate);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertChildTestList
        /// <summary>
        /// Table - ChildTestList
        /// Inserted the ChildTestList table values. The Profile ID reffered from MasterProfileList table.
        /// </summary>
        /// <param name="childTestList"></param>
        [Route("api/Account/insertChildTestList")]
        [HttpPost]
        public void insertChildTestList(ChildTestList ChildTestList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    //  ChildTestList.ProfileID = 1;
                    string testCode = "";
                    string fetch = "Select Max(TestCode) from ChildTestList";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(fetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            testCode = dr[0].ToString();

                        }
                        if (testCode.Trim() != "")
                        {
                            var tempArray = testCode.Split('T');
                            string tempId = tempArray[2];
                            int id = Convert.ToInt32(tempId);
                            id = id + 1;
                            testCode = "TST" + String.Format("{0:000}", id);
                        }
                        else
                        {
                            testCode = "TST" + String.Format("{0:000}", 1);
                        }
                    }



                    DateTime today = DateTime.Today;
                    ChildTestList.CreateDate = today.ToShortDateString();
                    string strSQL = "INSERT INTO ChildTestList(ProfileID,TestName,UnitMeasurementNumeric,UnitMesurementFreeText,TableRequiredPrint,DefaultValues, " +
                                  " GenderMale,GenderFemale,AdditionalFixedComments,LowerCriticalValue,UpperCriticalValue,OtherCriticalReport,AgewiseCriticalValue, " +
                                  " AgewiseReferenceRange,units,TurnAroundTime,RequiredBiospyTestNumber,RequiredSamples,PatientPreparation,ExpectedResultDate,Amount, " +
                                  " Finaloutput,TestbasedDiscount,Outsourced,CreateDate,SampleContainer,Methodology,NumericOrText,Pregnancyrefrange,TestCode, " +
                                  " DepartmentName,Priority,multiplecomponents,AlternativeSampleContainer,DisplayTestName,AmountValidDate,TestSchedule,cutOffTime, " +
                                  " TestInformation,CalculationPresent,ActiveStatus,InstrumentReagent,commonParagraph,UrineCulture,AgewiseSexReferenceValue, " +
                                  " ProfilePriority,TestPriority,CultureCategory,BiospyAbbrevation) " +
                                  " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val2,@val13,@val14,@val15,@val16,@val17,@val18,@val19, " +
                                  " @val20,@val21,@val22,@val23,@val24,@val25,@val26,@val27,@val28,@val29,@val30,@val31,@val32,@val33,@val34,@val35,@val36,@val37,@val38, " +
                                  " @val39,@val40,@val41,@val42,@val43,@val44,@val45,@val46,@val47,@val48,@val49)";
                    //      conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", ChildTestList.ProfileID);
                    cmd.Parameters.AddWithValue("@val2", ChildTestList.TestName);
                    cmd.Parameters.AddWithValue("@val3", ChildTestList.UnitMeasurementNumeric);
                    cmd.Parameters.AddWithValue("@val4", ChildTestList.UnitMesurementFreeText);
                    cmd.Parameters.AddWithValue("@val5", ChildTestList.TableRequiredPrint);
                    cmd.Parameters.AddWithValue("@val6", ChildTestList.DefaultValues);
                    cmd.Parameters.AddWithValue("@val7", ChildTestList.GenderMale);
                    cmd.Parameters.AddWithValue("@val8", ChildTestList.GenderFemale);
                    cmd.Parameters.AddWithValue("@val9", ChildTestList.AdditionalFixedComments);
                    cmd.Parameters.AddWithValue("@val10", ChildTestList.LowerCriticalValue);
                    cmd.Parameters.AddWithValue("@val11", ChildTestList.UpperCriticalValue);
                    cmd.Parameters.AddWithValue("@val12", ChildTestList.OtherCriticalReport);
                    cmd.Parameters.AddWithValue("@val13", ChildTestList.AgewiseCriticalValue);
                    cmd.Parameters.AddWithValue("@val14", ChildTestList.AgewiseReferenceRange);
                    cmd.Parameters.AddWithValue("@val15", ChildTestList.units);
                    cmd.Parameters.AddWithValue("@val16", ChildTestList.TurnAroundTime);
                    cmd.Parameters.AddWithValue("@val17", ChildTestList.RequiredBiospyTestNumber);
                    cmd.Parameters.AddWithValue("@val18", ChildTestList.RequiredSamples);
                    cmd.Parameters.AddWithValue("@val19", ChildTestList.PatientPreparation);
                    cmd.Parameters.AddWithValue("@val20", ChildTestList.ExpectedResultDate);
                    cmd.Parameters.AddWithValue("@val21", ChildTestList.Amount);
                    cmd.Parameters.AddWithValue("@val22", ChildTestList.Finaloutput);
                    cmd.Parameters.AddWithValue("@val23", ChildTestList.TestbasedDiscount);
                    cmd.Parameters.AddWithValue("@val24", ChildTestList.Outsourced);
                    cmd.Parameters.AddWithValue("@val25", ChildTestList.CreateDate);
                    cmd.Parameters.AddWithValue("@val26", ChildTestList.SampleContainer);
                    cmd.Parameters.AddWithValue("@val27", ChildTestList.Methodology);
                    cmd.Parameters.AddWithValue("@val28", ChildTestList.NumericOrText);
                    cmd.Parameters.AddWithValue("@val29", ChildTestList.Pregnancyrefrange);
                    cmd.Parameters.AddWithValue("@val30", testCode);
                    cmd.Parameters.AddWithValue("@val31", ChildTestList.DepartmentName);
                    cmd.Parameters.AddWithValue("@val32", ChildTestList.Priority);
                    cmd.Parameters.AddWithValue("@val33", ChildTestList.Multiplecomponents);
                    cmd.Parameters.AddWithValue("@val34", ChildTestList.AlternativeSample);
                    cmd.Parameters.AddWithValue("@val35", ChildTestList.DisplayName);
                    cmd.Parameters.AddWithValue("@val36", ChildTestList.ValidDate);
                    cmd.Parameters.AddWithValue("@val37", ChildTestList.TestSchedule);
                    cmd.Parameters.AddWithValue("@val38", ChildTestList.cutOffTime);
                    cmd.Parameters.AddWithValue("@val39", ChildTestList.TestInformation);
                    cmd.Parameters.AddWithValue("@val40", ChildTestList.CalculationPresent);
                    cmd.Parameters.AddWithValue("@val41", ChildTestList.ActiveStatus);
                    cmd.Parameters.AddWithValue("@val42", ChildTestList.InstrumentReagent);
                    cmd.Parameters.AddWithValue("@val43", ChildTestList.commonParagraph);
                    cmd.Parameters.AddWithValue("@val44", ChildTestList.UrineCulture);
                    cmd.Parameters.AddWithValue("@val45", ChildTestList.AgewiseSexReferenceValue);
                    cmd.Parameters.AddWithValue("@val46", ChildTestList.ProfilePriority);
                    cmd.Parameters.AddWithValue("@val47", ChildTestList.TestPriority);
                    cmd.Parameters.AddWithValue("@val48", ChildTestList.CultureCategory);
                    cmd.Parameters.AddWithValue("@val49", ChildTestList.BiospyAbbrevation);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();


                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #endregion





        #region getAllLabOrder

        #region updateDepartmentPriority

        /// <summary>
        /// Table -  SampleCollecter
        /// Inserted the  SampleCollecter table values.
        /// Modified by nandhini on 02/08/2018 to update the priority in department details.
        /// </summary>
        /// <param name="SampleCollect"></param>
        [Route("api/Account/updateDepartmentPriority")]
        [HttpPost]
        public void updateDepartmentPriority(Department departmentDetails)
        {
            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conns.Open();
                    DataTable dts = new DataTable();
                    string priorityvalue = departmentDetails.Priority.ToString();
                    if (priorityvalue == "0")
                    {
                        string strSQL1 = "UPDATE  Department SET Priority='" + priorityvalue + "' where DepartmentID='" + departmentDetails.DepartmentID + "'";
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        double d = departmentDetails.Priority;
                        if ((d - (int)d) != 0 && d < 1)
                        {
                            string[] parts = priorityvalue.Split('.');
                            string i1 = parts[0].ToString();
                            string i2 = parts[1].ToString();
                            if (i2.Length == 1)
                            {
                                double value = departmentDetails.Priority;
                                double number = value / 1000;
                                string strSQL1 = "UPDATE  Department SET Priority='" + number + "' where DepartmentID='" + departmentDetails.DepartmentID + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                                cmd1.ExecuteNonQuery();
                            }
                            else if (i2.Length == 2)
                            {
                                double value = departmentDetails.Priority;
                                double number = value / 100;
                                string strSQL1 = "UPDATE  Department SET Priority='" + number + "' where DepartmentID='" + departmentDetails.DepartmentID + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                                cmd1.ExecuteNonQuery();
                            }
                            else if (i2.Length == 3)
                            {
                                double value = departmentDetails.Priority;
                                double number = value / 10;
                                string strSQL1 = "UPDATE  Department SET Priority='" + number + "' where DepartmentID='" + departmentDetails.DepartmentID + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                                cmd1.ExecuteNonQuery();
                            }
                            else
                            {
                                double number = departmentDetails.Priority;
                                string strSQL1 = "UPDATE  Department SET Priority='" + number + "' where DepartmentID='" + departmentDetails.DepartmentID + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        else
                        {
                            double number = departmentDetails.Priority;
                            string strSQL1 = "UPDATE  Department SET Priority='" + number + "' where DepartmentID='" + departmentDetails.DepartmentID + "'";
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                            cmd1.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region getAllDepartmentDetails
        /// <summary>
        /// Table - Department
        /// </summary>
        /// Listed all values from Department table
        /// <returns></returns>
        [Route("api/Account/getAllDepartmentDetails")]
        [HttpGet]
        public List<Department> getAllDepartmentDetails()
        {
            List<Department> departmentDetails = new List<Department>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT distinct * FROM  Department order by Priority";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Department department = new Department();

                            department.DepartmentID = (int)dr["DepartmentID"];
                            department.DepartmentName = dr["DepartmentName"].ToString();
                            department.CreateDate = dr["CreateDate"].ToString();
                            if (dr["Priority"] != DBNull.Value)
                            {
                                department.Priority = (double)dr["Priority"];
                            }
                            departmentDetails.Add(department);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return departmentDetails;
            }
        }
        #endregion



        #region getAllMasterProfileList
        /// <summary>
        ///  Table - MasterProfileList
        /// </summary>
        /// Listed all values from MasterProfileList table
        /// <returns></returns>
        [Route("api/Account/getAllMasterProfileList")]
        [HttpGet]
        public List<MasterProfileList> getAllMasterProfileList()
        {
            List<MasterProfileList> lstMasterProfileDetails = new List<MasterProfileList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  createprofile";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MasterProfileList lstMasterProfile = new MasterProfileList();

                            lstMasterProfile.ProfileID = (int)dr["ProfileID"];
                            //lstMasterProfile.DepartmentID = (int)dr["DepartmentID"]; ;
                            lstMasterProfile.ProfileName = dr["ProfileName"].ToString();
                            lstMasterProfile.ProfileCode = dr["ProfileCode"].ToString();
                            lstMasterProfile.Amount = (double)dr["Amount"];
                            lstMasterProfile.CreateDate = dr["CreateDate"].ToString();
                            lstMasterProfileDetails.Add(lstMasterProfile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstMasterProfileDetails;
            }
        }
        #endregion

        #endregion

        #region getAmountForProfileOrTest
        /// <summary>      
        /// <returns></returns>
        [Route("api/Account/getAmountForProfileOrTest")]
        [HttpGet]
        public string getAmountForProfileOrTest(int checkFlag, string selectedTestName, string SelectedCode, string locationCode, string hospID, string amtFor)
        {
            List<MasterProfileList> lstMasterProfileDetails = new List<MasterProfileList>();
            DataTable dt = new DataTable();
            var proTestAmount = "0.0";

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();

                    if (amtFor == "Hosp")
                    {
                        #region forHospital
                        if (checkFlag == 1)
                        {
                            string strSQL = "SELECT * FROM  outofhospitalprofilelist where ProfileCode='" + SelectedCode + "' and LocationCode='" + locationCode + "' and HospitalID='" + hospID + "'";
                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr != null)
                                    {
                                        proTestAmount = dr["Amount"].ToString();
                                    }
                                }
                            }
                            else
                            {
                                string disstrSQL = "SELECT * FROM  createprofile where ProfileCode='" + SelectedCode + "' ";
                                MySqlDataAdapter dismydata = new MySqlDataAdapter(disstrSQL, conn);
                                MySqlCommandBuilder discmd = new MySqlCommandBuilder(dismydata);
                                DataSet disds = new DataSet();
                                DataTable disdt = new DataTable();
                                dismydata.Fill(disds);
                                disdt = disds.Tables[0];
                                foreach (DataRow dr in disdt.Rows)
                                {
                                    if (dr != null)
                                    {
                                        proTestAmount = dr["Amount"].ToString();
                                    }
                                }
                            }
                        }
                        else if (checkFlag == 2)
                        {
                            string strSQL = "SELECT * FROM  outofhospitaltestlist where TestCode='" + SelectedCode + "' and TestName='" + selectedTestName + "' and LocationCode='" + locationCode + "' and HospitalID='" + hospID + "'";
                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr != null)
                                    {
                                        proTestAmount = dr["Amount"].ToString();
                                    }
                                }
                            }
                            else
                            {
                                string disstrSQL = "SELECT * FROM  displaytest where TestCode='" + SelectedCode + "' and DisplayName='" + selectedTestName + "'";
                                MySqlDataAdapter dismydata = new MySqlDataAdapter(disstrSQL, conn);
                                MySqlCommandBuilder discmd = new MySqlCommandBuilder(dismydata);
                                DataSet disds = new DataSet();
                                DataTable disdt = new DataTable();
                                dismydata.Fill(disds);
                                disdt = disds.Tables[0];
                                if (disdt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in disdt.Rows)
                                    {
                                        if (dr != null)
                                        {
                                            proTestAmount = dr["Amount"].ToString();
                                        }
                                    }
                                }
                                else
                                {
                                    string chldSQL = "SELECT * FROM  ChildTestList where TestCode='" + SelectedCode + "' and ActiveStatus =1";
                                    MySqlDataAdapter chlddata = new MySqlDataAdapter(chldSQL, conn);
                                    MySqlCommandBuilder chldcmd = new MySqlCommandBuilder(chlddata);
                                    DataSet chldds = new DataSet();
                                    DataTable chlddt = new DataTable();
                                    chlddata.Fill(chldds);
                                    chlddt = chldds.Tables[0];
                                    if (chlddt.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in chlddt.Rows)
                                        {
                                            if (dr != null)
                                            {
                                                proTestAmount = dr["Amount"].ToString();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion forHospital
                    }
                    else if (amtFor == "Insurance")
                    {
                        #region forInsurance
                        if (checkFlag == 1)
                        {
                            string strSQL = "SELECT * FROM  insuranceprofilelist where ProfileCode='" + SelectedCode + "' and InsuranceName='" + hospID + "' ";
                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr != null)
                                    {
                                        proTestAmount = dr["Amount"].ToString();
                                    }
                                }
                            }
                            else
                            {
                                string disstrSQL = "SELECT * FROM  createprofile where ProfileCode='" + SelectedCode + "' ";
                                MySqlDataAdapter dismydata = new MySqlDataAdapter(disstrSQL, conn);
                                MySqlCommandBuilder discmd = new MySqlCommandBuilder(dismydata);
                                DataSet disds = new DataSet();
                                DataTable disdt = new DataTable();
                                dismydata.Fill(disds);
                                disdt = disds.Tables[0];
                                foreach (DataRow dr in disdt.Rows)
                                {
                                    if (dr != null)
                                    {
                                        proTestAmount = dr["Amount"].ToString();
                                    }
                                }
                            }
                        }
                        else if (checkFlag == 2)
                        {
                            string strSQL = "SELECT * FROM  insurancetestlist where TestCode='" + SelectedCode + "' and TestName='" + selectedTestName + "' " +
                                            " and InsuranceName='" + hospID + "' ";
                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr != null)
                                    {
                                        proTestAmount = dr["Amount"].ToString();
                                    }
                                }
                            }
                            else
                            {
                                string disstrSQL = "SELECT * FROM  displaytest where TestCode='" + SelectedCode + "' and DisplayName='" + selectedTestName + "'";
                                MySqlDataAdapter dismydata = new MySqlDataAdapter(disstrSQL, conn);
                                MySqlCommandBuilder discmd = new MySqlCommandBuilder(dismydata);
                                DataSet disds = new DataSet();
                                DataTable disdt = new DataTable();
                                dismydata.Fill(disds);
                                disdt = disds.Tables[0];
                                if (disdt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in disdt.Rows)
                                    {
                                        if (dr != null)
                                        {
                                            proTestAmount = dr["Amount"].ToString();
                                        }
                                    }
                                }
                                else
                                {
                                    string chldSQL = "SELECT * FROM  ChildTestList where TestCode='" + SelectedCode + "' and ActiveStatus =1";
                                    MySqlDataAdapter chlddata = new MySqlDataAdapter(chldSQL, conn);
                                    MySqlCommandBuilder chldcmd = new MySqlCommandBuilder(chlddata);
                                    DataSet chldds = new DataSet();
                                    DataTable chlddt = new DataTable();
                                    chlddata.Fill(chldds);
                                    chlddt = chldds.Tables[0];
                                    if (chlddt.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in chlddt.Rows)
                                        {
                                            if (dr != null)
                                            {
                                                proTestAmount = dr["Amount"].ToString();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion forInsurance
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return proTestAmount;
            }
        }
        #endregion


        #region getLabOrderMasterListbyDepID
        /// <summary>
        /// getLabOrderMasterList
        /// </summary>
        /// To get all records from LabOrderMasterList table.
        /// <returns></returns>

        [Route("api/Account/getLabOrderMasterListbyDepID")]
        [HttpGet]
        public List<LabOrderMasterList> getLabOrderMasterListbyDepID(int depID)
        {
            List<LabOrderMasterList> lstLabOrderMaster = new List<LabOrderMasterList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  masterprofilelist where DepartmentID='" + depID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            LabOrderMasterList LabOrderMaster = new LabOrderMasterList();
                            LabOrderMaster.ProfileID = Convert.ToInt16(dr["ProfileID"]);
                            LabOrderMaster.ProfileName = dr["ProfileName"].ToString();
                            LabOrderMaster.Amount = Convert.ToDouble(dr["Amount"]);
                            lstLabOrderMaster.Add(LabOrderMaster);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabOrderMaster;
            }
        }
        #endregion

        #region laborder

        #region insertLabOrderDetails
        /// <summary>
        /// Table - LabOrder
        /// Inserted the LabOrder table values. The Reg ID reffered from PatientRegistration table.
        /// </summary>
        /// <param name="labOrder"></param>
        [Route("api/Account/insertLabOrderDetails")]
        [HttpPost]
        public void insertLabOrderDetails(LabOrder labOrder)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Now;
                    labOrder.CreateDate = today;

                    string strSQL = "INSERT INTO LabOrder(RegID,PatientName,MrdNo,ReferredBy,ReferenceDiscountAmount,Height,Weight," +
                                    " PaymentTypeCode,PaymentTypeName,InsuranceName,CollectAt,HomeCollectChargeAmount,IsPregnancy,LMP,Trimester," +
                                    " DepartmentID,DepartmentName,Amount,CreateDate,ProviderName,ProviderID,ProviderHostName,LocationName,LocationCode," +
                                    " AccountHolderName,AccountHolderNumber) " +
                                    " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16," +
                                    " @val17,@val18,@val19,@val20,@val21,@val22,@val23,@val24,@val25,@val26)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", labOrder.RegID);
                    cmd.Parameters.AddWithValue("@val2", labOrder.PatientName);
                    cmd.Parameters.AddWithValue("@val3", labOrder.MrdNo);
                    cmd.Parameters.AddWithValue("@val4", labOrder.ReferredBy);
                    cmd.Parameters.AddWithValue("@val5", labOrder.ReferenceDiscountAmount);
                    cmd.Parameters.AddWithValue("@val6", labOrder.Height);
                    cmd.Parameters.AddWithValue("@val7", labOrder.Weight);
                    cmd.Parameters.AddWithValue("@val8", labOrder.PaymentTypeCode);
                    cmd.Parameters.AddWithValue("@val9", labOrder.PaymentTypeName);
                    cmd.Parameters.AddWithValue("@val10", labOrder.InsuranceName);
                    cmd.Parameters.AddWithValue("@val11", labOrder.CollectAt);
                    cmd.Parameters.AddWithValue("@val12", labOrder.HomeCollectChargeAmount);
                    cmd.Parameters.AddWithValue("@val13", labOrder.IsPregnancy);
                    cmd.Parameters.AddWithValue("@val14", labOrder.LMP);
                    cmd.Parameters.AddWithValue("@val15", labOrder.Trimester);
                    cmd.Parameters.AddWithValue("@val16", labOrder.DepartmentID);
                    cmd.Parameters.AddWithValue("@val17", labOrder.DepartmentName);
                    cmd.Parameters.AddWithValue("@val18", labOrder.Amount);
                    cmd.Parameters.AddWithValue("@val19", labOrder.CreateDate);
                    cmd.Parameters.AddWithValue("@val20", labOrder.ProviderName);
                    cmd.Parameters.AddWithValue("@val21", labOrder.ProviderID);
                    cmd.Parameters.AddWithValue("@val22", labOrder.ProviderHostName);
                    cmd.Parameters.AddWithValue("@val23", labOrder.LocationName);
                    cmd.Parameters.AddWithValue("@val24", labOrder.LocationCode);

                    cmd.Parameters.AddWithValue("@val25", labOrder.AccountHolderName);
                    cmd.Parameters.AddWithValue("@val26", labOrder.AccountHolderNumber);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getTestNameSearchDetails
        /// <summary>
        /// getTestNameSearchDetails
        /// </summary>
        /// To get all records from ChildTestList table.
        /// <param name="testName"></param>
        /// <returns></returns>

        [Route("api/Account/getTestNameSearchDetails")]
        [HttpGet]
        public List<ChildTestList> getTestNameSearchDetails(string testName)
        {
            List<ChildTestList> lstTestNameSearchDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  ChildTestList Where TestName LIKE'%" + testName + "%' AND ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestName = new ChildTestList();

                            childTestName.TestID = Convert.ToInt32(dr["TestID"]);
                            childTestName.ProfileID = Convert.ToInt32(dr["ProfileID"]);
                            childTestName.TestName = dr["TestName"].ToString();
                            childTestName.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestName.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestName.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestName.DefaultValues = dr["DefaultValues"].ToString();
                            childTestName.GenderMale = dr["GenderMale"].ToString();
                            childTestName.GenderFemale = dr["GenderFemale"].ToString();
                            childTestName.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestName.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestName.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestName.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestName.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestName.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            childTestName.units = dr["units"].ToString();
                            childTestName.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestName.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestName.RequiredSamples = dr["TestName"].ToString();
                            childTestName.PatientPreparation = dr["TestName"].ToString();
                            childTestName.ExpectedResultDate = dr["TestName"].ToString();
                            childTestName.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestName.Finaloutput = dr["Finaloutput"].ToString();
                            childTestName.TestbasedDiscount = dr["RequiredBiospyTestNumber"].ToString();
                            childTestName.Outsourced = dr["Outsourced"].ToString();
                            childTestName.CreateDate = dr["CreateDate"].ToString();

                            lstTestNameSearchDetails.Add(childTestName);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstTestNameSearchDetails;
            }
        }
        #endregion


        //#region updateStatusInvoice
        ///// <summary>
        ///// Table - Invoice
        ///// </summary>
        ///// <param name="childTestList"></param>
        //[Route("api/Account/Invoice")]
        //[HttpPost]
        //public void updateStatusInvoice(Invoice invoice)
        //{
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {
        //            DateTime today = DateTime.Today;
        //            invoice.InvoiceDate = today.ToShortDateString();
        //            string strSQL = "UPDATE  Invoice SET Status='1',InvoiceDate='" + invoice.InvoiceDate + "' where InvoiceNo='" + invoice.InvoiceNo + "'";
        //            conn.Open();
        //            MySqlCommand cmd = new MySqlCommand(strSQL, conn);
        //            cmd.CommandType = CommandType.Text;
        //            cmd.ExecuteNonQuery();
        //        }
        //        catch (Exception Ex)
        //        {
        //            string logdetails = Ex.InnerException.ToString();
        //        }
        //    }
        //}

        //#endregion

        #region insertInvoiceView
        /// <summary>
        /// Table - Invoice
        /// Inserted the invoiceview table values. The reg ID reffered from patientregistration table.
        /// </summary>
        /// <param name="childTestList"></param>
        [Route("api/Account/insertInvoiceView")]
        [HttpPost]
        public void insertInvoiceView(InvoiceView invoiceview)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    if (Convert.ToInt32(invoiceview.Amount) == Convert.ToInt32(invoiceview.PaidAmount))
                    {
                        invoiceview.Status = "Paid";
                    }
                    else if (Convert.ToInt32(invoiceview.Amount) < Convert.ToInt32(invoiceview.PaidAmount))
                    {
                        invoiceview.Status = "ToBeReturn";
                    }
                    else if (Convert.ToInt32(invoiceview.PaidAmount) == 0)
                    { invoiceview.Status = "Pending"; }
                    else if (Convert.ToInt32(invoiceview.PaidAmount) > 0)
                    { invoiceview.Status = "Parti.Paid"; }

                    DateTime today = DateTime.Today;
                    invoiceview.InvoiceDate = today.ToString("yyyy-MM-dd");
                    string strSQL = "INSERT INTO Invoice(RegID,PatientName,MrdNo,Status,Amount,Discount,NetAmount,PaidAmount,Action," +
                                    " InvoiceDate,InvoiceNo,Token,Description,PaymentType,ProviderHostName,HospitalName) " +
                                    " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", invoiceview.RegID);
                    cmd.Parameters.AddWithValue("@val2", invoiceview.PatientName);
                    cmd.Parameters.AddWithValue("@val3", invoiceview.MrdNo);
                    cmd.Parameters.AddWithValue("@val4", invoiceview.Status);
                    cmd.Parameters.AddWithValue("@val5", invoiceview.Amount);
                    cmd.Parameters.AddWithValue("@val6", invoiceview.Discount);
                    cmd.Parameters.AddWithValue("@val7", invoiceview.NetAmount);
                    cmd.Parameters.AddWithValue("@val8", invoiceview.PaidAmount);
                    cmd.Parameters.AddWithValue("@val9", invoiceview.Action);
                    cmd.Parameters.AddWithValue("@val10", invoiceview.InvoiceDate);
                    cmd.Parameters.AddWithValue("@val11", invoiceview.InvoiceNo);
                    cmd.Parameters.AddWithValue("@val12", invoiceview.Token);
                    cmd.Parameters.AddWithValue("@val13", invoiceview.Description);
                    cmd.Parameters.AddWithValue("@val14", invoiceview.PaymentType);
                    cmd.Parameters.AddWithValue("@val15", invoiceview.ProviderHostName);
                    cmd.Parameters.AddWithValue("@val16", invoiceview.HospitalName);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();


                    string paySQL = "INSERT INTO paymentoverview " +
                                    " (PatientID,InvoiceNo,MrdNo,TotalAmount,Discount,PaidAmount,BalanceAmount,PaymentStatus,PaymentType,PaymentDate)" +
                                    " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";
                    MySqlCommand payCmd = new MySqlCommand(paySQL, conn);
                    payCmd.Parameters.AddWithValue("@val1", invoiceview.RegID);
                    payCmd.Parameters.AddWithValue("@val2", invoiceview.InvoiceNo);
                    payCmd.Parameters.AddWithValue("@val3", invoiceview.MrdNo);
                    payCmd.Parameters.AddWithValue("@val4", invoiceview.Amount);
                    payCmd.Parameters.AddWithValue("@val5", invoiceview.Discount);
                    payCmd.Parameters.AddWithValue("@val6", invoiceview.PaidAmount);
                    payCmd.Parameters.AddWithValue("@val7", invoiceview.NetAmount);
                    payCmd.Parameters.AddWithValue("@val8", invoiceview.Status);
                    payCmd.Parameters.AddWithValue("@val9", invoiceview.PaymentType);
                    payCmd.Parameters.AddWithValue("@val10", invoiceview.InvoiceDate);
                    payCmd.CommandType = CommandType.Text;
                    payCmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getInvoiceDetailsByRegId
        /// <summary>
        /// Table - Invoice
        /// </summary>
        /// Listed all values from Invoice table
        /// <returns></returns>
        [Route("api/Account/getAllInvoiceDetailsById")]
        [HttpGet]
        public InvoiceView getAllInvoiceDetailsById(int id)
        {
            InvoiceView invoiceview = new InvoiceView();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Invoice where Status = 'In progress' && RegID ='" + id + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            invoiceview.Id = (int)dr["Id"];
                            invoiceview.RegID = dr["RegID"].ToString();
                            invoiceview.MrdNo = dr["MrdNo"].ToString();
                            invoiceview.PatientName = dr["PatientName"].ToString();
                            invoiceview.Status = dr["Status"].ToString();
                            invoiceview.Amount = dr["Amount"].ToString();
                            invoiceview.Discount = dr["Discount"].ToString();
                            invoiceview.NetAmount = dr["NetAmount"].ToString();
                            invoiceview.PaidAmount = dr["PaidAmount"].ToString();
                            invoiceview.Action = dr["Action"].ToString();
                            invoiceview.InvoiceDate = dr["InvoiceDate"].ToString();
                            invoiceview.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoiceview.Token = dr["Token"].ToString();

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invoiceview;
            }
        }
        #endregion


        #region getInvoiceSubmitDetailsByRegId
        /// <summary>
        /// Table - Invoice
        /// </summary>
        /// Listed all values from Invoice table
        /// <returns></returns>
        [Route("api/Account/getInvoiceSubmitDetailsByRegId")]
        [HttpGet]
        public InvoiceView getInvoiceSubmitDetailsByRegId(int id)
        {
            InvoiceView invoiceview = new InvoiceView();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Invoice where Status = 'In progress' && RegID ='" + id + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            invoiceview.Id = (int)dr["Id"];
                            invoiceview.RegID = dr["RegID"].ToString();
                            invoiceview.MrdNo = dr["MrdNo"].ToString();
                            invoiceview.PatientName = dr["PatientName"].ToString();
                            invoiceview.Status = dr["Status"].ToString();
                            invoiceview.Amount = dr["Amount"].ToString();
                            invoiceview.Discount = dr["Discount"].ToString();
                            invoiceview.NetAmount = dr["NetAmount"].ToString();
                            invoiceview.PaidAmount = dr["PaidAmount"].ToString();
                            invoiceview.Action = dr["Action"].ToString();
                            invoiceview.InvoiceDate = dr["InvoiceDate"].ToString();
                            invoiceview.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoiceview.Token = dr["Token"].ToString();

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invoiceview;
            }
        }
        #endregion


        #region getPaymentSubmitDetailsByInvoiceNo
        /// <summary>
        /// Table - Invoice
        /// </summary>
        /// Listed all values from Invoice table
        /// <returns></returns>
        [Route("api/Account/getPaymentSubmitDetailsByInvoiceNo")]
        [HttpGet]
        public Payment getPaymentSubmitDetailsByInvoiceNo(string invoiceNo)
        {
            Payment payment = new Payment();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Payment where Status = 'Completed' && InvoiceNo ='" + invoiceNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            payment.PaymentId = (int)dr["PaymentId"];
                            payment.RegID = (int)dr["RegID"];
                            payment.MrdNo = dr["MrdNo"].ToString();
                            payment.PaymentType = dr["PaymentType"].ToString();
                            payment.PaymentDate = dr["PaymentDate"].ToString();
                            payment.InvoiceNo = dr["InvoiceNo"].ToString();
                            payment.Status = dr["Status"].ToString();
                            payment.NetAmount = Convert.ToDouble(dr["NetAmount"]);
                            payment.PendingAmount = Convert.ToDouble(dr["PendingAmount"]);
                            payment.Status = dr["Status"].ToString();
                            payment.PaidAmount = Convert.ToDouble(dr["PaidAmount"]);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return payment;
            }
        }
        #endregion

        //#region getAllInvoiceDetails
        ///// <summary>
        ///// Table - Invoice
        ///// </summary>
        ///// Listed all values from Invoice table
        ///// <returns></returns>
        //[Route("api/Account/getAllInvoiceDetails")]
        //[HttpGet]
        //public List<InvoiceView> getAllInvoiceDetails()
        //{
        //    List<InvoiceView> InvoiceViewDetails = new List<InvoiceView>();
        //    DataTable dt = new DataTable();
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {
        //            string strSQL = "SELECT * FROM  Invoice where Status = '0'";
        //            conn.Open();
        //            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
        //            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
        //            DataSet ds = new DataSet();
        //            mydata.Fill(ds);
        //            dt = ds.Tables[0];
        //            foreach (DataRow dr in dt.Rows)
        //            {
        //                if (dr != null)
        //                {
        //                    InvoiceView invoiceview = new InvoiceView();
        //                    invoiceview.Id = (int)dr["Id"];
        //                    invoiceview.RegID = (int)dr["RegID"];
        //                    invoiceview.MrdNo = dr["MrdNo"].ToString();
        //                    invoiceview.PatientName = dr["PatientName"].ToString();
        //                    invoiceview.Status = dr["Status"].ToString();
        //                    invoiceview.Amount = dr["Amount"].ToString();
        //                    invoiceview.Discount = dr["Discount"].ToString();
        //                    invoiceview.NetAmount = dr["NetAmount"].ToString();
        //                    invoiceview.PaidAmount = dr["PaidAmount"].ToString();
        //                    invoiceview.Action = dr["Action"].ToString();
        //                    invoiceview.InvoiceDate = dr["InvoiceDate"].ToString();
        //                    invoiceview.InvoiceNo = dr["InvoiceNo"].ToString();
        //                    invoiceview.Token = dr["Token"].ToString();
        //                    InvoiceViewDetails.Add(invoiceview);
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //        return InvoiceViewDetails;
        //    }
        //}
        //#endregion

        #region getAllLabOrderDetails

        /// <summary>
        /// getAllLabOrderDetails
        /// </summary>
        /// To get all records from LabOrder table.
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllLabOrderDetails")]
        [HttpGet]

        public List<LabOrder> getAllLabOrderDetails()
        {
            List<LabOrder> lstOrderDetails = new List<LabOrder>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from labOrder";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrder labOrderDetails = new LabOrder();
                            labOrderDetails.LabId = Convert.ToInt32(dr["LabId"]);
                            labOrderDetails.RegID = (dr["RegID"]).ToString();
                            labOrderDetails.PatientName = dr["PatientName"].ToString();
                            labOrderDetails.MrdNo = dr["MrdNo"].ToString();
                            labOrderDetails.ReferredBy = dr["ReferredBy"].ToString();
                            labOrderDetails.ReferenceDiscountAmount = Convert.ToDouble(dr["ReferenceDiscountAmount"]);
                            labOrderDetails.Height = (float)(dr["Height"]);
                            labOrderDetails.Weight = (float)(dr["Weight"]);
                            //labOrderDetails.PaymentType = dr["PaymentType"].ToString();
                            labOrderDetails.CollectAt = dr["CollectAt"].ToString();
                            labOrderDetails.HomeCollectChargeAmount = Convert.ToDouble(dr["HomeCollectChargeAmount"]);
                            labOrderDetails.IsPregnancy = Convert.ToInt16(dr["IsPregnancy"]);
                            labOrderDetails.LMP = dr["LMP"].ToString();
                            labOrderDetails.Trimester = dr["Trimester"].ToString();
                            labOrderDetails.DepartmentID = Convert.ToInt32(dr["DepartmentID"]);
                            labOrderDetails.DepartmentName = dr["DepartmentName"].ToString();
                            labOrderDetails.Amount = Convert.ToDouble(dr["Amount"]);
                            labOrderDetails.CreateDate = Convert.ToDateTime(dr["CreateDate"]);

                            lstOrderDetails.Add(labOrderDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstOrderDetails;
            }
        }

        #endregion

        #region Doctor

        #region getDoctorListByRegID
        /// <summary>
        ///  Table - Doctor
        /// </summary>
        /// Listed all values from MasterProfileList table
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/getDoctorListByRegID")]
        [HttpGet]
        public List<Doctor> getDoctorListByRegID()
        {
            List<Doctor> lstDoctorDetails = new List<Doctor>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Doctor where RegID='" + regId + "' ";
                    string strSQL = "SELECT * FROM  Doctor";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Doctor doctorDetails = new Doctor();
                            doctorDetails.DoctorId = (int)dr["DoctorId"];
                            doctorDetails.RegID = (int)dr["RegID"];
                            doctorDetails.DoctorName = dr["DoctorName"].ToString();
                            doctorDetails.EmailId = dr["EmailId"].ToString();
                            doctorDetails.PhoneNo = Convert.ToInt32(dr["PhoneNo"].ToString());

                            lstDoctorDetails.Add(doctorDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }
        #endregion

        #region insertDoctorDetails
        /// <summary>
        /// Table - Doctor
        /// Insert the Doctor table values.
        /// </summary>
        /// <param name="docdor"></param>
        [Route("api/Account/insertDoctorDetails")]
        [HttpPost]
        public void insertDoctorDetails(Doctor doctor)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO Doctor(RegID,DoctorName,EmailId,PhoneNo,MailRequired) VALUES(@val1,@val2,@val3,@val4,@val5)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", doctor.RegID);
                    cmd.Parameters.AddWithValue("@val2", doctor.DoctorName);
                    cmd.Parameters.AddWithValue("@val3", doctor.EmailId);
                    cmd.Parameters.AddWithValue("@val4", doctor.PhoneNo);
                    cmd.Parameters.AddWithValue("@val5", doctor.MailRequired);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region checkDoctorCode
        /// <summary>
        ///  Table - Doctor
        /// </summary>
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/checkDoctorCode")]
        [HttpGet]
        public List<Doctor> checkDoctorCode(string doctor)
        {
            List<Doctor> lstDoctorDetails = new List<Doctor>();
            //var checkDoctor = "";
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Doctor where RegID='" + regId + "' ";

                    string strSQL = "SELECT * FROM  doctor where DoctorName='" + doctor + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Doctor doctorDetails = new Doctor();
                            doctorDetails.DoctorName = dr["DoctorName"].ToString();
                            doctorDetails.EmailId = dr["EmailId"].ToString();
                            doctorDetails.PhoneNo = Convert.ToInt32(dr["PhoneNo"].ToString());
                            lstDoctorDetails.Add(doctorDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }
        #endregion

        #region checkHospitalExists
        /// <summary>

        /// </summary>
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/checkHospitalExists")]
        [HttpGet]
        public string checkHospitalExists(string hospDoc, string location, int flag)
        {
            var checkHospital = "";
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Doctor where RegID='" + regId + "' ";
                    if (flag == 1)
                    {
                        string strSQL = "SELECT * FROM  clientcodedetails where DoctorName='" + hospDoc + "'";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            checkHospital = "Exist";
                        }
                        else { checkHospital = "No"; }
                    }
                    else if (flag == 2)
                    {
                        string strSQL = "SELECT * FROM  clientcodedetails where HospitalName='" + hospDoc + "'";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            checkHospital = "Exist";
                        }
                        else { checkHospital = "No"; }
                    }
                    else if (flag == 3)
                    {
                        string strSQL = "SELECT * FROM  clientcodedetails where HospitalLinkDoctName='" + hospDoc + "' and Location='" + location + "'";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            checkHospital = "Exist";
                        }
                        else { checkHospital = "No"; }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return checkHospital;
            }
        }
        #endregion

        #region getDoctorCode
        /// <summary>
        ///  Table - Doctor
        /// </summary>
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/getDoctorCode")]
        [HttpGet]
        public List<HospitalLinkDoctors> getDoctorCode(int codeFlag, string name, string location)
        {
            List<HospitalLinkDoctors> lstDoctorDetails = new List<HospitalLinkDoctors>();
            var getDoctorCode = "";
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string selSQL = "";
                    if (codeFlag == 1)
                    {
                        selSQL = "SELECT * FROM  clientcodedetails where DoctorName='" + name + "' ";
                    }
                    else if (codeFlag == 2)
                    {
                        selSQL = "SELECT * FROM  clientcodedetails where HospitalName='" + name + "' ";
                    }
                    else if (codeFlag == 3)
                    {
                        selSQL = "SELECT * FROM  clientcodedetails where HospitalLinkDoctName='" + name + "' and Location='" + location + "' ";
                    }
                    else if (codeFlag == 4)
                    {
                        selSQL = "SELECT CodeId,HospitalLinkDoctName,ClientCode as MaxClientCode,GetDate,IsMailRequired,ClientEmailID,PhoneNO,Location,PanNo,Address FROM  clientcodedetails where HospitalLinkDoctName like '%" + name + "%' ";
                    }
                    else if (codeFlag == 5)
                    {
                        selSQL = "SELECT CodeId,HospitalLinkDoctName,ClientCode as MaxClientCode,GetDate,IsMailRequired,ClientEmailID,PhoneNO,Location,PanNo,Address FROM  clientcodedetails";
                    }
                    MySqlDataAdapter seldata = new MySqlDataAdapter(selSQL, conn);
                    MySqlCommandBuilder selcmd = new MySqlCommandBuilder(seldata);
                    DataSet selds = new DataSet();
                    DataTable selDt = new DataTable();
                    seldata.Fill(selds);
                    selDt = selds.Tables[0];
                    if (selDt.Rows.Count > 0)
                    {
                        //getDoctorCode = selDt.Rows[0]["ClientCode"].ToString();
                        foreach (DataRow dr in selDt.Rows)
                        {
                            if (dr != null)
                            {
                                HospitalLinkDoctors doctorDetails = new HospitalLinkDoctors();
                                doctorDetails.CodeId = (int)dr["CodeId"];
                                doctorDetails.HospitalLinkDoctName = dr["HospitalLinkDoctName"].ToString();
                                doctorDetails.ClientCode = dr["MaxClientCode"].ToString();
                                doctorDetails.GetDate = dr["GetDate"].ToString();
                                doctorDetails.IsMailRequired = dr["IsMailRequired"].ToString();
                                doctorDetails.EmailID = dr["ClientEmailID"].ToString();
                                doctorDetails.PhoneNO = dr["PhoneNO"].ToString();
                                doctorDetails.Location = dr["Location"].ToString();
                                doctorDetails.PanNo = dr["PanNo"].ToString();
                                doctorDetails.Address = dr["Address"].ToString();

                                lstDoctorDetails.Add(doctorDetails);
                            }
                        }
                    }
                    else
                    {
                        //string strSQL = "SELECT *,Max(ClientCode) as MaxClientCode FROM  clientcodedetails where CodeFlag=" + codeFlag + "";
                        string strSQL = "SELECT *,(ClientCode) as MaxClientCode FROM clientcodedetails " +
                                        " where CodeFlag=" + codeFlag + " order by CodeId desc Limit 1";
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                HospitalLinkDoctors doctorDetails = new HospitalLinkDoctors();
                                //doctorDetails.CodeId = (int)dr["CodeId"];
                                //doctorDetails.DoctorName = dr["DoctorName"].ToString();
                                doctorDetails.HospitalName = dr["HospitalName"].ToString();
                                doctorDetails.HospitalLinkDoctName = dr["HospitalLinkDoctName"].ToString();

                                doctorDetails.ClientCode = dr["MaxClientCode"].ToString();
                                //doctorDetails.GetDate = (dr["GetDate"]).ToString();
                                //doctorDetails.CodeStatus = (int)(dr["CodeStatus"]);
                                //doctorDetails.CodeFlag = (int)(dr["CodeFlag"]);
                                doctorDetails.EmailID = dr["ClientEmailID"].ToString();
                                doctorDetails.PhoneNO = dr["PhoneNO"].ToString();
                                doctorDetails.PanNo = dr["PanNo"].ToString();
                                doctorDetails.Address = dr["Address"].ToString();

                                lstDoctorDetails.Add(doctorDetails);

                                // getDoctorCode = doctorDetails.ClientCode;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }
        #endregion


        #region getDoctorCodeDetails
        /// <summary>
        ///  Table - Doctor
        /// </summary>
        /// Listed all values from MasterProfileList table
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/getDoctorCodeDetails")]
        [HttpGet]
        public List<HospitalLinkDoctors> getDoctorCodeDetails(int codeFlag, string docName)
        {
            List<HospitalLinkDoctors> lstDoctorDetails = new List<HospitalLinkDoctors>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    if ((codeFlag != 0) && (docName == null))
                    {
                        string strSQL = "SELECT * FROM  clientcodedetails where CodeFlag=" + codeFlag + "";
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                HospitalLinkDoctors doctorDetails = new HospitalLinkDoctors();
                                doctorDetails.CodeId = (int)dr["CodeId"];
                                //doctorDetails.DoctorName = dr["DoctorName"].ToString();
                                doctorDetails.HospitalName = dr["HospitalName"].ToString();
                                doctorDetails.HospitalLinkDoctName = dr["HospitalLinkDoctName"].ToString();
                                if ((int)(dr["CodeFlag"]) == 1)
                                { doctorDetails.DoctorName = dr["DoctorName"].ToString(); }
                                else { doctorDetails.DoctorName = dr["HospitalLinkDoctName"].ToString(); }

                                doctorDetails.ClientCode = dr["ClientCode"].ToString();
                                doctorDetails.GetDate = (dr["GetDate"]).ToString();
                                doctorDetails.CodeStatus = (int)(dr["CodeStatus"]);
                                doctorDetails.CodeFlag = (int)(dr["CodeFlag"]);
                                doctorDetails.EmailID = dr["ClientEmailID"].ToString();
                                doctorDetails.PhoneNO = dr["PhoneNO"].ToString();
                                lstDoctorDetails.Add(doctorDetails);
                            }
                        }
                    }
                    else if ((codeFlag != 0) && (docName != ""))
                    {
                        string strSQL = "";
                        if ((codeFlag == 999))
                        {
                            strSQL = "SELECT * FROM  clientcodedetails where CodeFlag=3 and ClientCode='" + docName + "'";
                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    HospitalLinkDoctors doctorDetails = new HospitalLinkDoctors();
                                    doctorDetails.HospitalLinkDoctName = dr["HospitalLinkDoctName"].ToString();
                                    doctorDetails.ClientCode = dr["ClientCode"].ToString();
                                    lstDoctorDetails.Add(doctorDetails);
                                }
                            }
                        }
                        else
                        {
                            if ((codeFlag == 1))
                            {
                                strSQL = "SELECT ClientCode FROM  clientcodedetails where CodeFlag=" + codeFlag + " and DoctorName='" + docName + "'";
                            }
                            else if ((codeFlag == 2))
                            {
                                strSQL = "SELECT ClientCode FROM  clientcodedetails where CodeFlag=" + codeFlag + " and HospitalLinkDoctName='" + docName + "'";
                            }
                            else if ((codeFlag == 3))
                            {
                                strSQL = "SELECT ClientCode FROM  clientcodedetails where CodeFlag=" + codeFlag + " and HospitalLinkDoctName='" + docName + "'";
                            }
                            else if ((codeFlag == 4))
                            {
                                strSQL = "SELECT ClientCode FROM  clientcodedetails where CodeFlag=3 and HospitalLinkDoctName like'" + docName + "%'";
                            }
                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    HospitalLinkDoctors doctorDetails = new HospitalLinkDoctors();
                                    //doctorDetails.CodeId = (int)dr["CodeId"];
                                    //doctorDetails.DoctorName = dr["DoctorName"].ToString();
                                    //doctorDetails.HospitalName = dr["HospitalName"].ToString();
                                    //doctorDetails.HospitalLinkDoctName = dr["HospitalLinkDoctName"].ToString();
                                    doctorDetails.ClientCode = dr["ClientCode"].ToString();
                                    //doctorDetails.GetDate = (dr["GetDate"]).ToString();
                                    //doctorDetails.CodeStatus = (int)(dr["CodeStatus"]);
                                    //doctorDetails.CodeFlag = (int)(dr["CodeFlag"]);
                                    lstDoctorDetails.Add(doctorDetails);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }
        #endregion

        #region getCodeForRegister
        /// <summary>
        ///  Table - Doctor
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getCodeForRegister")]
        [HttpGet]
        public List<HospitalLinkDoctors> getCodeForRegister(int codeFlag)
        {
            List<HospitalLinkDoctors> lstDoctorDetails = new List<HospitalLinkDoctors>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    if ((codeFlag != 0))
                    {
                        string strSQL = "";
                        //if ((codeFlag == 1))
                        //{
                        strSQL = "SELECT ClientCode,HospitalLinkDoctName FROM  clientcodedetails where CodeFlag=" + codeFlag + " ";
                        //}
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                HospitalLinkDoctors doctorDetails = new HospitalLinkDoctors();
                                //doctorDetails.CodeId = (int)dr["CodeId"];
                                //doctorDetails.DoctorName = dr["DoctorName"].ToString();
                                //doctorDetails.HospitalName = dr["HospitalName"].ToString();
                                doctorDetails.HospitalLinkDoctName = dr["HospitalLinkDoctName"].ToString();
                                doctorDetails.ClientCode = dr["ClientCode"].ToString();
                                //doctorDetails.GetDate = (dr["GetDate"]).ToString();
                                //doctorDetails.CodeStatus = (int)(dr["CodeStatus"]);
                                //doctorDetails.CodeFlag = (int)(dr["CodeFlag"]);
                                lstDoctorDetails.Add(doctorDetails);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }
        #endregion

        #region getDoctorsPersonInfo
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getDoctorsPersonInfo")]
        [HttpGet]
        public List<Doctor> getDoctorsPersonInfo(int flag, int doctorId)
        {
            List<Doctor> lstDoctorDetails = new List<Doctor>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Doctor where RegID='" + regId + "' ";
                    string strSQL = "";
                    if (flag == 1)
                    {
                        strSQL = "SELECT * FROM  doctorpersonalinfo";
                    }
                    else if (flag == 2)
                    {
                        strSQL = "SELECT dp.*,im.PriorityOrder,im.Designation as DocDesigForRpt,im.PicturePath,im.ImageName FROM  doctorpersonalinfo dp left join image im on im.DoctorId=dp.DoctorId " +
                                 " where dp.DoctorId=" + doctorId + "";
                    }
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Doctor doctorDetails = new Doctor();
                            doctorDetails.DoctorId = (int)dr["DoctorId"];
                            doctorDetails.FirstName = dr["FirstName"].ToString();

                            if (dr["UserName"] == DBNull.Value)
                            {
                                doctorDetails.UserName = "";
                            }
                            else
                            {
                                doctorDetails.UserName = dr["UserName"].ToString();
                            }

                            if (dr["LastName"] == DBNull.Value)
                            {
                                doctorDetails.LastName = "";
                            }
                            else
                            {
                                doctorDetails.LastName = dr["LastName"].ToString();
                            }
                            if (dr["Gender"] == DBNull.Value)
                            {
                                doctorDetails.Gender = "";
                            }
                            else
                            {
                                doctorDetails.Gender = dr["Gender"].ToString();
                            }
                            if (dr["DOB"] == DBNull.Value)
                            {
                                doctorDetails.DOB = "";
                            }
                            else
                            {
                                doctorDetails.DOB = dr["DOB"].ToString();
                            }
                            if (dr["Age"] == DBNull.Value)
                            {
                                doctorDetails.Age = "";
                            }
                            else
                            {
                                doctorDetails.Age = dr["Age"].ToString();
                            }
                            if (dr["UGDegree"] == DBNull.Value)
                            {
                                doctorDetails.UGDegree = "";
                            }
                            else
                            {
                                doctorDetails.UGDegree = dr["UGDegree"].ToString();
                            }
                            if (dr["UgUniver"] == DBNull.Value)
                            {
                                doctorDetails.UgUniver = "";
                            }
                            else
                            {
                                doctorDetails.UgUniver = dr["UgUniver"].ToString();
                            }
                            if (dr["PGDegree"] == DBNull.Value)
                            {
                                doctorDetails.PGDegree = "";
                            }
                            else
                            {
                                doctorDetails.PGDegree = dr["PGDegree"].ToString();
                            }
                            if (dr["PGUniver"] == DBNull.Value)
                            {
                                doctorDetails.PGUniver = "";
                            }
                            else
                            {
                                doctorDetails.PGUniver = dr["PGUniver"].ToString();
                            }
                            if (dr["College"] == DBNull.Value)
                            {
                                doctorDetails.College = "";
                            }
                            else
                            {
                                doctorDetails.College = dr["College"].ToString();
                            }
                            if (dr["OtherDegree"] == DBNull.Value)
                            {
                                doctorDetails.OtherDegree = "";
                            }
                            else
                            {
                                doctorDetails.OtherDegree = dr["OtherDegree"].ToString();
                            }
                            if (dr["RegistNumber"] == DBNull.Value)
                            {
                                doctorDetails.RegistNumber = "";
                            }
                            else
                            {
                                doctorDetails.RegistNumber = dr["RegistNumber"].ToString();
                            }
                            if (dr["Designation"] == DBNull.Value)
                            {
                                doctorDetails.Designation = "";
                            }
                            else
                            {
                                doctorDetails.Designation = dr["Designation"].ToString();
                            }
                            if (dr["DesigForReport"] == DBNull.Value)
                            {
                                doctorDetails.DesigForReport = "";
                            }
                            else
                            {
                                doctorDetails.DesigForReport = dr["DesigForReport"].ToString();
                            }
                            doctorDetails.Checked = false;
                            if (flag == 2)
                            {
                                if (dr["PriorityOrder"] == DBNull.Value)
                                {
                                    doctorDetails.Priority = 0;
                                }
                                else
                                {
                                    doctorDetails.Priority = Convert.ToInt32(dr["PriorityOrder"].ToString());
                                }
                                if (dr["DocDesigForRpt"] == DBNull.Value)
                                {
                                    doctorDetails.DocDesigForRpt = "";
                                }
                                else
                                {
                                    doctorDetails.DocDesigForRpt = dr["DocDesigForRpt"].ToString();
                                }
                                if (dr["PicturePath"] == DBNull.Value)
                                {
                                    doctorDetails.PicturePath = "";
                                }
                                else
                                {
                                    doctorDetails.PicturePath = dr["PicturePath"].ToString();
                                }
                                if (dr["ImageName"] == DBNull.Value)
                                {
                                    doctorDetails.ImageName = "";
                                }
                                else
                                {
                                    doctorDetails.ImageName = dr["ImageName"].ToString();
                                }
                            }
                            lstDoctorDetails.Add(doctorDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }
        #endregion


        #endregion forDoctor



        #region getInvoiceDetailsByInvoiceNo
        /// <summary>
        /// Table - Invoice
        /// </summary>
        /// get invoice details from Invoice table by invoiceNo
        /// <param "invoiceNo"></param>
        /// <returns></returns>
        [Route("api/Account/getInvoiceDetailsByInvoiceNo")]
        [HttpGet]
        public List<InvoiceView> getInvoiceDetailsByInvoiceNo(int invoiceNo)
        {
            List<InvoiceView> InvoiceViewDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Invoice where InvoiceNo='" + invoiceNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InvoiceView invoiceview = new InvoiceView();
                            invoiceview.Id = (int)dr["Id"];
                            invoiceview.RegID = dr["RegID"].ToString();
                            invoiceview.MrdNo = dr["MrdNo"].ToString();
                            invoiceview.PatientName = dr["PatientName"].ToString();
                            invoiceview.Status = dr["Status"].ToString();
                            invoiceview.Amount = dr["Amount"].ToString();
                            invoiceview.Discount = dr["Discount"].ToString();
                            invoiceview.NetAmount = dr["NetAmount"].ToString();
                            invoiceview.PaidAmount = dr["PaidAmount"].ToString();
                            invoiceview.Action = dr["Action"].ToString();
                            invoiceview.InvoiceDate = dr["InvoiceDate"].ToString();
                            invoiceview.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoiceview.Token = dr["Token"].ToString();
                            InvoiceViewDetails.Add(invoiceview);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceViewDetails;
            }
        }
        #endregion



        #region insertInvoiceReturn
        /// <summary>
        /// Table - Invoice
        /// Inserted the values into Invoice Return Table . The Invoice ID reffered from Invoice table.
        /// </summary>
        /// <param name="childTestList"></param>
        [Route("api/Account/insertInvoiceReturn")]
        [HttpPost]
        public void insertInvoiceReturn(InvoiceReturn invoiceReturn)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Today;
                    invoiceReturn.ReturnDate = today.ToShortDateString();
                    string strSQL = "INSERT INTO InvoiceReturn(RegID,InvoiceNo,ReturnAmount,ReturnDate,ReturnReason,ReturnStatus) VALUES(@val1,@val2,@val3,@val4,@val5,@val6)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", invoiceReturn.RegID);
                    cmd.Parameters.AddWithValue("@val2", invoiceReturn.InvoiceNo);
                    cmd.Parameters.AddWithValue("@val3", invoiceReturn.ReturnAmount);
                    cmd.Parameters.AddWithValue("@val4", invoiceReturn.ReturnDate);
                    cmd.Parameters.AddWithValue("@val5", invoiceReturn.ReturnReason);
                    cmd.Parameters.AddWithValue("@val6", invoiceReturn.ReturnStatus);


                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion




        #region getAllInvoiceDetailsReturn
        /// <summary>
        /// Table - Invoice
        /// </summary>
        /// Listed all values from Invoice table
        /// <returns></returns>
        [Route("api/Account/getAllInvoiceDetailsReturn")]
        [HttpGet]
        public List<InvoiceReturn> getAllInvoiceDetailsReturn()
        {
            List<InvoiceReturn> InvoiceViewDetails = new List<InvoiceReturn>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  invoicereturn";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InvoiceReturn invoiceReturn = new InvoiceReturn();
                            invoiceReturn.Sno = i;
                            invoiceReturn.InvoiceReturnId = (int)dr["InvoiceReturnId"];
                            invoiceReturn.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoiceReturn.RegID = (int)dr["RegID"];
                            invoiceReturn.ReturnAmount = dr["ReturnAmount"].ToString();
                            invoiceReturn.ReturnDate = dr["ReturnDate"].ToString();
                            invoiceReturn.ReturnReason = dr["ReturnReason"].ToString();
                            invoiceReturn.ReturnStatus = dr["ReturnStatus"].ToString();
                            InvoiceViewDetails.Add(invoiceReturn);
                            i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceViewDetails;
            }
        }
        #endregion



        #region getLabOrderDetailsByLabId

        /// <summary>
        /// getLabOrderDetailsByLabId
        /// </summary>
        /// To get records from LabOrder table by LabID.
        ///  /// <param name=" labID"></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getLabOrderDetailsByLabId")]
        [HttpGet]

        public LabOrder getLabOrderDetailsByLabId(int labID)
        {
            LabOrder labOrderDetails = new LabOrder();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from labOrder where LabId='" + labID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            labOrderDetails.LabId = Convert.ToInt32(dr["LabId"]);
                            labOrderDetails.RegID = (dr["RegID"]).ToString();
                            labOrderDetails.PatientName = dr["PatientName"].ToString();
                            labOrderDetails.MrdNo = dr["MrdNo"].ToString();
                            labOrderDetails.ReferredBy = dr["ReferredBy"].ToString();
                            labOrderDetails.ReferenceDiscountAmount = Convert.ToDouble(dr["ReferenceDiscountAmount"]);
                            labOrderDetails.Height = (float)(dr["Height"]);
                            labOrderDetails.Weight = (float)(dr["Weight"]);
                            labOrderDetails.PaymentTypeName = dr["PaymentTypeName"].ToString();
                            labOrderDetails.PaymentTypeCode = dr["PaymentTypeCode"].ToString();
                            labOrderDetails.InsuranceName = dr["InsuranceName"].ToString();
                            labOrderDetails.CollectAt = dr["CollectAt"].ToString();
                            labOrderDetails.HomeCollectChargeAmount = Convert.ToDouble(dr["HomeCollectChargeAmount"]);
                            labOrderDetails.IsPregnancy = Convert.ToInt16(dr["IsPregnancy"]);
                            labOrderDetails.LMP = dr["LMP"].ToString();
                            labOrderDetails.Trimester = dr["Trimester"].ToString();
                            labOrderDetails.DepartmentID = Convert.ToInt32(dr["DepartmentID"]);
                            labOrderDetails.DepartmentName = dr["DepartmentName"].ToString();
                            labOrderDetails.Amount = Convert.ToDouble(dr["Amount"]);
                            labOrderDetails.CreateDate = Convert.ToDateTime(dr["CreateDate"]);




                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return labOrderDetails;
            }
        }

        #endregion

        #region insertInsurance
        /// <summary>
        /// Table - Insurance
        /// Inserted the Insurance table values.
        /// </summary>
        /// <param name="insurance"></param>
        [Route("api/Account/insertInsurance")]
        [HttpPost]
        public void insertInsurance(Insurance insurance)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO Insurance(RegID,InsuranceProviderName,ContactNo,Amount) VALUES(@val1,@val2,@val3,@val4)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", insurance.RegID);
                    cmd.Parameters.AddWithValue("@val2", insurance.InsuranceProviderName);
                    cmd.Parameters.AddWithValue("@val3", insurance.ContactNo);
                    cmd.Parameters.AddWithValue("@val4", insurance.Amount);

                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertOutofHospital
        /// <summary>
        /// Table - insertOutofHospital
        /// Inserted the insertOutofHospital table values.
        /// </summary>
        /// <param name="outofHospital"></param>
        [Route("api/Account/insertOutofHospital")]
        [HttpPost]
        public void insertOutofHospital(OutofHospital outofHospital)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO OutofHospital(RegID,ProfileName,o_Ho_Name,Amount) VALUES(@val1,@val2,@val3,@val4)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", outofHospital.RegID);
                    cmd.Parameters.AddWithValue("@val2", outofHospital.ProfileName);
                    cmd.Parameters.AddWithValue("@val3", outofHospital.o_Ho_Name);
                    cmd.Parameters.AddWithValue("@val4", outofHospital.Amount);

                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getInsuranceDetailbyRefId
        /// <summary>
        /// Table - Insurance
        /// </summary>
        /// Listed all values from Insurance table by RegID
        /// <param value="regID"></param>
        /// <returns></returns>
        [Route("api/Account/getInsuranceDetailbyRefId")]
        [HttpGet]
        public List<Insurance> getInsuranceDetailbyRefId(int regId)
        {
            List<Insurance> lstInsuranceDetails = new List<Insurance>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Insurance where RegID ='" + regId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Insurance insurance = new Insurance();

                            insurance.InsuranceId = (int)dr["InsuranceId"];
                            insurance.RegID = (int)dr["RegID"];
                            insurance.InsuranceProviderName = dr["InsuranceProviderName"].ToString();
                            insurance.ContactNo = dr["ContactNo"].ToString();
                            insurance.Amount = (double)dr["Amount"];
                            lstInsuranceDetails.Add(insurance);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstInsuranceDetails;
            }
        }
        #endregion

        #region getOutofHospitalDetailsbyRegId
        /// <summary>
        /// Table -  OutofHospital
        /// </summary>
        /// Listed all values from OutofHospital table by RegID
        /// <param value="regID"></param>
        /// <returns></returns>
        [Route("api/Account/getOutofHospitalDetailsbyRegId")]
        [HttpGet]
        public List<OutofHospital> getOutofHospitalDetailsbyRegId(int regId)
        {
            List<OutofHospital> lstOutofHospitalDetails = new List<OutofHospital>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  OutofHospital where RegID ='" + regId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospital outofHospital = new OutofHospital();

                            outofHospital.OutofHospitalId = (int)dr["OutofHospitalId"];
                            outofHospital.RegID = (int)dr["RegID"];
                            outofHospital.ProfileName = dr["ProfileName"].ToString();
                            outofHospital.o_Ho_Name = dr["o_Ho_Name"].ToString();
                            outofHospital.Amount = (double)dr["Amount"];
                            lstOutofHospitalDetails.Add(outofHospital);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstOutofHospitalDetails;
            }
        }
        #endregion
        #endregion


        #region getAllChildTestList
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllChildTestList")]
        [HttpGet]
        public List<ChildTestList> getAllChildTestList()
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where ActiveStatus =1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.DepartmentName = dr["DepartmentName"].ToString();
                            childTestList.Methodology = dr["Methodology"].ToString();
                            childTestList.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestList.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            childTestList.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestList.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestList.DefaultValues = dr["DefaultValues"].ToString();
                            childTestList.GenderMale = dr["GenderMale"].ToString();
                            childTestList.GenderFemale = dr["GenderFemale"].ToString();
                            childTestList.Pregnancyrefrange = dr["Pregnancyrefrange"].ToString();
                            childTestList.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestList.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestList.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestList.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestList.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestList.units = dr["units"].ToString();
                            childTestList.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestList.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestList.RequiredSamples = dr["RequiredSamples"].ToString();
                            childTestList.PatientPreparation = dr["PatientPreparation"].ToString();
                            childTestList.ExpectedResultDate = dr["ExpectedResultDate"].ToString();
                            childTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestList.Finaloutput = dr["Finaloutput"].ToString();
                            childTestList.TestbasedDiscount = dr["TestbasedDiscount"].ToString();
                            childTestList.Outsourced = dr["Outsourced"].ToString();
                            childTestList.CreateDate = dr["CreateDate"].ToString();
                            childTestList.cutOffTime = dr["CutoffTime"].ToString();
                            childTestList.ValidDate = dr["AmountValidDate"].ToString();
                            childTestList.DisplayName = dr["DisplayTestName"].ToString();
                            childTestList.TestInformation = dr["TestInformation"].ToString();
                            childTestList.TestSchedule = dr["TestSchedule"].ToString();
                            childTestList.NumericOrText = Convert.ToBoolean(dr["NumericOrText"]);
                            childTestList.commonParagraph = dr["commonParagraph"].ToString();
                            childTestList.UrineCulture = dr["UrineCulture"].ToString();
                            childTestList.AlternativeSample = dr["AlternativeSampleContainer"].ToString();
                            childTestList.CalculationPresent = dr["CalculationPresent"].ToString();
                            childTestList.Multiplecomponents = dr["multiplecomponents"].ToString();
                            childTestList.SampleContainer = dr["SampleContainer"].ToString();
                            if (dr["CultureCategory"] != DBNull.Value)
                            {
                                childTestList.CultureCategory = dr["CultureCategory"].ToString();
                            }
                            else
                            {
                                childTestList.CultureCategory = "";
                            }
                            if (dr["ProfilePriority"] != DBNull.Value)
                            {
                                childTestList.ProfilePriority = (double)dr["ProfilePriority"];
                            }
                            else
                            {
                                childTestList.ProfilePriority = 0;
                            }
                            if (dr["BiospyAbbrevation"] != DBNull.Value)
                            {
                                childTestList.BiospyAbbrevation = dr["BiospyAbbrevation"].ToString();
                            }
                            else
                            {
                                childTestList.BiospyAbbrevation = "";
                            }
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion

        #region getAllDisabledTest
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllDisabledTest")]
        [HttpGet]
        public List<ChildTestList> getAllDisabledTest()
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where ActiveStatus =0";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.DepartmentName = dr["DepartmentName"].ToString();
                            childTestList.Methodology = dr["Methodology"].ToString();
                            childTestList.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestList.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            childTestList.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestList.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestList.DefaultValues = dr["DefaultValues"].ToString();
                            childTestList.GenderMale = dr["GenderMale"].ToString();
                            childTestList.GenderFemale = dr["GenderFemale"].ToString();
                            childTestList.Pregnancyrefrange = dr["Pregnancyrefrange"].ToString();
                            childTestList.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestList.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestList.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestList.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestList.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestList.units = dr["units"].ToString();
                            childTestList.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestList.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestList.RequiredSamples = dr["RequiredSamples"].ToString();
                            childTestList.PatientPreparation = dr["PatientPreparation"].ToString();
                            childTestList.ExpectedResultDate = dr["ExpectedResultDate"].ToString();
                            childTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestList.Finaloutput = dr["Finaloutput"].ToString();
                            childTestList.TestbasedDiscount = dr["TestbasedDiscount"].ToString();
                            childTestList.Outsourced = dr["Outsourced"].ToString();
                            childTestList.CreateDate = dr["CreateDate"].ToString();
                            childTestList.cutOffTime = dr["CutoffTime"].ToString();
                            childTestList.ValidDate = dr["AmountValidDate"].ToString();
                            childTestList.DisplayName = dr["DisplayTestName"].ToString();
                            childTestList.TestInformation = dr["TestInformation"].ToString();
                            childTestList.TestSchedule = dr["TestSchedule"].ToString();
                            childTestList.NumericOrText = Convert.ToBoolean(dr["NumericOrText"]);
                            childTestList.commonParagraph = dr["commonParagraph"].ToString();
                            childTestList.UrineCulture = dr["UrineCulture"].ToString();
                            childTestList.AlternativeSample = dr["AlternativeSampleContainer"].ToString();
                            childTestList.CalculationPresent = dr["CalculationPresent"].ToString();
                            childTestList.Multiplecomponents = dr["multiplecomponents"].ToString();
                            childTestList.SampleContainer = dr["SampleContainer"].ToString();
                            if (dr["CultureCategory"] != DBNull.Value)
                            {
                                childTestList.CultureCategory = dr["CultureCategory"].ToString();
                            }
                            else
                            {
                                childTestList.CultureCategory = "";
                            }
                            if (dr["ProfilePriority"] != DBNull.Value)
                            {
                                childTestList.ProfilePriority = (double)dr["ProfilePriority"];
                            }
                            else
                            {
                                childTestList.ProfilePriority = 0;
                            }
                            if (dr["BiospyAbbrevation"] != DBNull.Value)
                            {
                                childTestList.BiospyAbbrevation = dr["BiospyAbbrevation"].ToString();
                            }
                            else
                            {
                                childTestList.BiospyAbbrevation = "";
                            }
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion

        #region getAllChildTestListWithSearchParameters
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllChildTestListWithSearchParameters")]
        [HttpGet]
        public List<ChildTestList> getAllChildTestListWithSearchParameters(string testnameSerach)
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where ActiveStatus =1 AND TestName LIKE '%" + testnameSerach + "%' OR TestCode  LIKE '%" + testnameSerach + "%' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.DepartmentName = dr["DepartmentName"].ToString();
                            childTestList.Methodology = dr["Methodology"].ToString();
                            childTestList.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestList.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            childTestList.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestList.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestList.DefaultValues = dr["DefaultValues"].ToString();
                            childTestList.GenderMale = dr["GenderMale"].ToString();
                            childTestList.GenderFemale = dr["GenderFemale"].ToString();
                            childTestList.Pregnancyrefrange = dr["Pregnancyrefrange"].ToString();
                            childTestList.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestList.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestList.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestList.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestList.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestList.units = dr["units"].ToString();
                            childTestList.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestList.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestList.RequiredSamples = dr["RequiredSamples"].ToString();
                            childTestList.PatientPreparation = dr["PatientPreparation"].ToString();
                            childTestList.ExpectedResultDate = dr["ExpectedResultDate"].ToString();
                            childTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestList.Finaloutput = dr["Finaloutput"].ToString();
                            childTestList.TestbasedDiscount = dr["TestbasedDiscount"].ToString();
                            childTestList.Outsourced = dr["Outsourced"].ToString();
                            childTestList.CreateDate = dr["CreateDate"].ToString();
                            childTestList.cutOffTime = dr["CutoffTime"].ToString();
                            childTestList.ValidDate = dr["AmountValidDate"].ToString();
                            childTestList.DisplayName = dr["DisplayTestName"].ToString();
                            childTestList.TestInformation = dr["TestInformation"].ToString();
                            childTestList.TestSchedule = dr["TestSchedule"].ToString();
                            childTestList.NumericOrText = Convert.ToBoolean(dr["NumericOrText"]);
                            childTestList.commonParagraph = dr["commonParagraph"].ToString();
                            childTestList.UrineCulture = dr["UrineCulture"].ToString();
                            childTestList.AlternativeSample = dr["AlternativeSampleContainer"].ToString();
                            childTestList.CalculationPresent = dr["CalculationPresent"].ToString();
                            childTestList.Multiplecomponents = dr["multiplecomponents"].ToString();
                            childTestList.SampleContainer = dr["SampleContainer"].ToString();
                            if (dr["CultureCategory"] != DBNull.Value)
                            {
                                childTestList.CultureCategory = dr["CultureCategory"].ToString();
                            }
                            else
                            {
                                childTestList.CultureCategory = "";
                            }
                            if (dr["ProfilePriority"] != DBNull.Value)
                            {
                                childTestList.ProfilePriority = (double)dr["ProfilePriority"];
                            }
                            else
                            {
                                childTestList.ProfilePriority = 0;
                            }
                            if (dr["BiospyAbbrevation"] != DBNull.Value)
                            {
                                childTestList.BiospyAbbrevation = dr["BiospyAbbrevation"].ToString();
                            }
                            else
                            {
                                childTestList.BiospyAbbrevation = "";
                            }
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion


        #region Payment

        #region insertPayment
        /// <summary>
        /// Table -  Payment
        /// Inserted the  Payment table values.
        /// </summary>
        /// <param name=" Payment"></param>
        [Route("api/Account/insertPayment")]
        [HttpPost]
        public void insertPayment(Payment Payment)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO Payment(RegID,PaymentDate,PaymentType,InvoiceNo,OrderNo,MrdNo,PaidAmount,NetAmount,PendingAmount,Status,PaidBy) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", Payment.RegID);
                    cmd.Parameters.AddWithValue("@val2", Payment.PaymentDate);
                    cmd.Parameters.AddWithValue("@val3", Payment.PaymentType);
                    cmd.Parameters.AddWithValue("@val4", Payment.InvoiceNo);
                    cmd.Parameters.AddWithValue("@val5", Payment.OrderNo);
                    cmd.Parameters.AddWithValue("@val6", Payment.MrdNo);
                    cmd.Parameters.AddWithValue("@val7", Payment.PaidAmount);
                    cmd.Parameters.AddWithValue("@val8", Payment.NetAmount);
                    cmd.Parameters.AddWithValue("@val9", Payment.PendingAmount);
                    cmd.Parameters.AddWithValue("@val10", Payment.Status);
                    cmd.Parameters.AddWithValue("@val11", Payment.PaidBy);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #endregion

        #region insertLabTestList


        /// <summary>
        /// Table -  LabTestList
        /// Inserted the  LabTestList table values.
        /// </summary>
        /// <param name=" LabTestList"></param>
        [Route("api/Account/insertLabTestList")]
        [HttpPost]
        public void insertLabTestList(LabTestList labTestList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //foreach (var labTestDetails in labTestList)
                    //{
                    string strSQL = "INSERT INTO LabTestList(RegID,TestCode,TestName,Amount,MrdNo,PatientName,IndividualStatus) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", labTestList.RegID);
                    cmd.Parameters.AddWithValue("@val2", labTestList.TestCode);
                    cmd.Parameters.AddWithValue("@val3", labTestList.TestName);
                    cmd.Parameters.AddWithValue("@val4", labTestList.Amount);
                    cmd.Parameters.AddWithValue("@val5", labTestList.MrdNo);
                    cmd.Parameters.AddWithValue("@val6", labTestList.PatientName);
                    cmd.Parameters.AddWithValue("@val7", labTestList.IndividualStatus);
                    cmd.ExecuteNonQuery();


                    //}
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getLabTestDatailsByRegIDandDate

        /// <summary>
        /// getPatientAllRegistrationInfo
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="patientAllRegistrationInfo"></returns>
        ///
        [Route("api/Account/getLabTestDatailsByRegIDandDate")]
        [HttpGet]
        public LabTechandTestDetails getLabTestDatailsByRegIDandDate(int regID, string orderDate)
        {
            LabTechandTestDetails labTechandTestDetails = new LabTechandTestDetails();

            labTechandTestDetails.LabOrderDetails = new LabOrder();
            labTechandTestDetails.ChildTestListDetails = new ChildTestList();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "Select c.TestID,c.ProfileID,c.TestName,c.UnitMeasurementNumeric,c.UnitMesurementFreeText,c.TableRequiredPrint,c.DefaultValues,c.GenderMale,c.GenderFemale,c.AdditionalFixedComments,c.LowerCriticalValue from  ChildTestList c inner Join  LabOrder l on c.TestID= l.TestID where l.RegID = '" + regID + "' and l.CreateDate = '" + orderDate + "' Where c.ActiveStatus=1";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            labTechandTestDetails.ChildTestListDetails.TestID = Convert.ToInt32(dr["TestID"]);
                            labTechandTestDetails.ChildTestListDetails.ProfileID = Convert.ToInt32(dr["ProfileID"]);
                            labTechandTestDetails.ChildTestListDetails.TestName = dr["TestName"].ToString();
                            labTechandTestDetails.ChildTestListDetails.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            labTechandTestDetails.ChildTestListDetails.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            labTechandTestDetails.ChildTestListDetails.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            labTechandTestDetails.ChildTestListDetails.DefaultValues = dr["DefaultValues"].ToString();
                            labTechandTestDetails.ChildTestListDetails.GenderMale = dr["GenderMale"].ToString();
                            labTechandTestDetails.ChildTestListDetails.GenderFemale = dr["GenderFemale"].ToString();
                            labTechandTestDetails.ChildTestListDetails.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            labTechandTestDetails.ChildTestListDetails.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            labTechandTestDetails.ChildTestListDetails.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            labTechandTestDetails.ChildTestListDetails.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            labTechandTestDetails.ChildTestListDetails.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            labTechandTestDetails.ChildTestListDetails.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            labTechandTestDetails.ChildTestListDetails.units = dr["units"].ToString();
                            labTechandTestDetails.ChildTestListDetails.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            labTechandTestDetails.ChildTestListDetails.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            labTechandTestDetails.ChildTestListDetails.RequiredSamples = dr["TestName"].ToString();
                            labTechandTestDetails.ChildTestListDetails.PatientPreparation = dr["TestName"].ToString();
                            labTechandTestDetails.ChildTestListDetails.ExpectedResultDate = dr["TestName"].ToString();
                            labTechandTestDetails.ChildTestListDetails.Amount = Convert.ToDouble(dr["Amount"]);
                            labTechandTestDetails.ChildTestListDetails.Finaloutput = dr["Finaloutput"].ToString();
                            labTechandTestDetails.ChildTestListDetails.TestbasedDiscount = dr["RequiredBiospyTestNumber"].ToString();
                            labTechandTestDetails.ChildTestListDetails.Outsourced = dr["Outsourced"].ToString();
                            labTechandTestDetails.ChildTestListDetails.CreateDate = dr["CreateDate"].ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return labTechandTestDetails;
            }
        }

        #endregion


        #region insertLabProfileList
        /// <summary>
        /// Table -  LabTestList
        /// Inserted the LabProfileList table values.
        /// </summary>
        /// <param name="LabProfileList"></param>
        [Route("api/Account/insertLabProfileList")]
        [HttpPost]
        public void insertLabProfileList(LabProfileList labProfileList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //foreach (var labprofileDetails in labProfileList)
                    //{
                    string strSQL = "INSERT INTO LabProfileList(RegID,ProfileCode,ProfileName,Amount,MrdNo,ProfileID,PatientName,IndividualStatus) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", labProfileList.RegID);
                    cmd.Parameters.AddWithValue("@val2", labProfileList.ProfileCode);
                    cmd.Parameters.AddWithValue("@val3", labProfileList.ProfileName);
                    cmd.Parameters.AddWithValue("@val4", labProfileList.Amount);
                    cmd.Parameters.AddWithValue("@val5", labProfileList.MrdNo);
                    cmd.Parameters.AddWithValue("@val6", labProfileList.ProfileID);
                    cmd.Parameters.AddWithValue("@val7", labProfileList.PatientName);
                    cmd.Parameters.AddWithValue("@val8", labProfileList.IndividualStatus);
                    cmd.ExecuteNonQuery();
                    //}
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertcancelComment
        /// <summary>       
        [Route("api/Account/insertcancelComment")]
        [HttpPost]
        public void insertcancelComment(string mrdNO, string regID, string comment)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "Update laborderstatus set LabStatus=0,CancelFlag=1,CancelComment='" + comment + "' where MrdNo='" + mrdNO + "' and RegID='" + regID + "'";
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                    string invSQL = "Update invoice set Status='Cancelled' where MrdNo='" + mrdNO + "' and RegID='" + regID + "'";
                    MySqlCommand invSQLCmd = new MySqlCommand(invSQL, conn);
                    invSQLCmd.CommandType = CommandType.Text;
                    invSQLCmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getProfileListByMrdNoLab
        /// <summary>
        /// Table - LabProfileList
        /// </summary>
        /// Listed all values from LabProfileList table
        /// <returns></returns>
        [Route("api/Account/getProfileListByMrdNoLab")]
        [HttpGet]
        public List<LabProfileList> getProfileListByMrdNoLab(string mrdNo)
        {
            List<LabProfileList> lisLabProfileDetails = new List<LabProfileList>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    //string strSQL = " SELECT DISTINCT SampleContainer, labprofilelist.ProfileID,labprofilelist.ProfileName,labprofilelist.ProfileCode from childtestlist inner join labprofilelist on labprofilelist.ProfileID = childtestlist.ProfileID where labprofilelist.MrdNo = '" + mrdNo + "'AND ActiveStatus=1";


                    string strSQL = "SELECT * from labprofilelist  where  MrdNo = '" + mrdNo + "'";


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabProfileList labProfileList = new LabProfileList();
                            labProfileList.Sno = i;
                            labProfileList.ProfileID = (int)dr["ProfileID"];
                            labProfileList.ProfileName = dr["ProfileName"].ToString();
                            labProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            labProfileList.IndividualStatus = (int)dr["IndividualStatus"];
                            labProfileList.MrdNo = mrdNo;
                            lisLabProfileDetails.Add(labProfileList);

                            i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisLabProfileDetails;
            }
        }
        #endregion


        #region getProfileListByMrdNo
        /// <summary>
        /// Table - LabProfileList
        /// </summary>
        /// Listed all values from LabProfileList table
        /// <returns></returns>
        [Route("api/Account/getProfileListByMrdNo")]
        [HttpGet]
        public List<LabProfileList> getProfileListByMrdNo(string mrdNo)
        {
            List<LabProfileList> lisLabProfileDetails = new List<LabProfileList>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  LabProfileList where mrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabProfileList labProfileList = new LabProfileList();
                            labProfileList.Sno = i;
                            labProfileList.LabProfileListID = (int)dr["LabProfileListID"];

                            labProfileList.RegID = (int)dr["RegID"];
                            labProfileList.ProfileName = dr["ProfileName"].ToString();
                            labProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            labProfileList.Amount = Convert.ToDouble((dr["Amount"]));
                            labProfileList.PatientName = dr["PatientName"].ToString();


                            lisLabProfileDetails.Add(labProfileList);

                            i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisLabProfileDetails;
            }
        }
        #endregion


        #region getTestListByMrdNo
        /// <summary>
        /// Table - LabTestList
        /// </summary>
        /// Listed all values from LabTestList table
        /// <returns></returns>
        [Route("api/Account/getTestListByMrdNo")]
        [HttpGet]
        public List<LabTestList> getTestListByMrdNo(string mrdNo)
        {
            List<LabTestList> lisLabTestDetails = new List<LabTestList>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  LabTestList where mrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabTestList labTestList = new LabTestList();
                            labTestList.Sno = i;
                            labTestList.LabTestListId = (int)dr["LabTestListId"];

                            labTestList.RegID = (int)dr["RegID"];
                            labTestList.TestName = dr["TestName"].ToString();
                            labTestList.TestCode = dr["TestCode"].ToString();
                            labTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            labTestList.PatientName = dr["PatientName"].ToString();
                            labTestList.MrdNo = dr["MrdNo"].ToString();

                            lisLabTestDetails.Add(labTestList);

                            i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisLabTestDetails;
            }
        }
        #endregion

        #region getTestByTestCode
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from childtestlist table
        /// <returns></returns>
        [Route("api/Account/getTestByTestCode")]
        [HttpGet]
        public ChildTestList getTestByTestCode(string testCode)
        {
            ChildTestList childTestList = new ChildTestList();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where TestCode='" + testCode + "' AND ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            childTestList.Sno = i;
                            childTestList.TestID = Convert.ToInt32(dr["TestID"]);
                            childTestList.ProfilePriority = Convert.ToInt32(dr["ProfilePriority"]);
                            childTestList.ProfileID = Convert.ToInt32(dr["ProfileID"]);
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.Methodology = dr["Methodology"].ToString();
                            childTestList.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestList.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestList.SampleContainer = dr["SampleContainer"].ToString();
                            childTestList.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestList.DefaultValues = dr["DefaultValues"].ToString();
                            childTestList.GenderMale = dr["GenderMale"].ToString();
                            childTestList.GenderFemale = dr["GenderFemale"].ToString();
                            childTestList.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestList.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestList.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestList.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestList.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestList.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            childTestList.Pregnancyrefrange = dr["Pregnancyrefrange"].ToString();
                            childTestList.units = dr["units"].ToString();
                            childTestList.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestList.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestList.RequiredSamples = dr["RequiredSamples"].ToString();
                            childTestList.PatientPreparation = dr["PatientPreparation"].ToString();
                            childTestList.ExpectedResultDate = dr["ExpectedResultDate"].ToString();
                            childTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestList.Finaloutput = dr["Finaloutput"].ToString();
                            childTestList.TestbasedDiscount = dr["TestbasedDiscount"].ToString();
                            childTestList.Outsourced = dr["Outsourced"].ToString();
                            childTestList.CreateDate = dr["CreateDate"].ToString();
                            childTestList.commonParagraph = dr["commonParagraph"].ToString();
                            childTestList.Multiplecomponents = dr["Multiplecomponents"].ToString();
                            childTestList.UrineCulture = dr["UrineCulture"].ToString();
                            childTestList.CalculationPresent = dr["CalculationPresent"].ToString();
                            childTestList.cutOffTime = dr["CutoffTime"].ToString();
                            childTestList.ValidDate = dr["AmountValidDate"].ToString();
                            childTestList.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return childTestList;
            }
        }
        #endregion



        #region getTestDetailsByProfileID
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from childtestlist table
        /// <returns></returns>
        [Route("api/Account/getTestDetailsByProfileID")]
        [HttpGet]
        public List<ChildTestList> getTestDetailsByProfileID(string profileID)
        {
            List<ChildTestList> lstchildTest = new List<ChildTestList>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where ProfileID='" + profileID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            ChildTestList childTestDetails = new ChildTestList();
                            childTestDetails.Sno = i;



                            childTestDetails.TestID = Convert.ToInt32(dr["TestID"]);
                            childTestDetails.ProfileID = Convert.ToInt32(dr["ProfileID"]);
                            childTestDetails.TestName = dr["TestName"].ToString();
                            childTestDetails.TestCode = dr["TestCode"].ToString();
                            childTestDetails.Methodology = dr["Methodology"].ToString();
                            childTestDetails.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestDetails.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestDetails.SampleContainer = dr["SampleContainer"].ToString();
                            childTestDetails.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestDetails.DefaultValues = dr["DefaultValues"].ToString();
                            childTestDetails.GenderMale = dr["GenderMale"].ToString();
                            childTestDetails.GenderFemale = dr["GenderFemale"].ToString();
                            childTestDetails.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestDetails.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestDetails.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestDetails.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestDetails.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestDetails.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            childTestDetails.units = dr["units"].ToString();
                            childTestDetails.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestDetails.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestDetails.RequiredSamples = dr["RequiredSamples"].ToString();
                            childTestDetails.PatientPreparation = dr["PatientPreparation"].ToString();
                            childTestDetails.ExpectedResultDate = dr["ExpectedResultDate"].ToString();
                            childTestDetails.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestDetails.Finaloutput = dr["Finaloutput"].ToString();
                            childTestDetails.TestbasedDiscount = dr["TestbasedDiscount"].ToString();
                            childTestDetails.Outsourced = dr["Outsourced"].ToString();
                            childTestDetails.CreateDate = dr["CreateDate"].ToString();


                            i++;

                            lstchildTest.Add(childTestDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstchildTest;
            }
        }
        #endregion



        #region getProfileByProfileCode
        /// <summary>
        /// Table - Masterprofilelist
        /// </summary>
        /// Listed all values from Masterprofilelist table
        /// <returns></returns>
        [Route("api/Account/getProfileByProfileCode")]
        [HttpGet]
        public MasterProfileList getProfileByProfileCode(string profileCode)
        {
            MasterProfileList masterProfileList = new MasterProfileList();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  createprofile where ProfileCode='" + profileCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            masterProfileList.Sno = i;
                            masterProfileList.ProfileID = (int)dr["ProfileID"];
                            masterProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            masterProfileList.ProfileName = dr["ProfileName"].ToString();
                            masterProfileList.Amount = Convert.ToDouble((dr["Amount"]));

                            i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return masterProfileList;
            }
        }
        #endregion






        #region getAllInsuranceDetail
        /// <summary>
        /// Table - Insurance
        /// </summary>
        /// Listed all values from Insurance table
        /// <returns></returns>
        [Route("api/Account/getAllInsuranceDetail")]
        [HttpGet]
        public List<Insurance> getAllInsuranceDetail()
        {
            List<Insurance> lstInsuranceDetails = new List<Insurance>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Insurance";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Insurance insurance = new Insurance();

                            insurance.InsuranceId = (int)dr["InsuranceId"];
                            insurance.RegID = (int)dr["RegID"];
                            insurance.InsuranceProviderName = dr["InsuranceProviderName"].ToString();
                            insurance.ContactNo = dr["ContactNo"].ToString();
                            insurance.Amount = (double)dr["Amount"];
                            lstInsuranceDetails.Add(insurance);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstInsuranceDetails;
            }
        }
        #endregion


        #region insertLaborderStatus


        /// <summary>
        /// Table -  LaborderStatus
        /// Inserted the  LaborderStatus table values.
        /// </summary>
        /// <param name=" laborderStatus"></param>
        [Route("api/Account/insertLaborderStatus")]
        [HttpPost]
        public void insertLaborderStatus(LaborderStatus laborderStatus)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    laborderStatus.LabOrderDate = DateTime.Now;
                    string strSQL = "INSERT INTO laborderstatus(RegID,MrdNo,LabStatus,LabOrderDate,ApproveStatus,DenyStatus,SampleStatus,CancelFlag) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", laborderStatus.RegID);
                    cmd.Parameters.AddWithValue("@val2", laborderStatus.MrdNo);
                    cmd.Parameters.AddWithValue("@val3", laborderStatus.LabStatus);
                    cmd.Parameters.AddWithValue("@val4", laborderStatus.LabOrderDate);
                    cmd.Parameters.AddWithValue("@val5", laborderStatus.ApproveStatus);
                    cmd.Parameters.AddWithValue("@val6", laborderStatus.DenyStatus);
                    cmd.Parameters.AddWithValue("@val7", laborderStatus.SampleStatus);
                    cmd.Parameters.AddWithValue("@val8", laborderStatus.CancelFlag);

                    cmd.ExecuteNonQuery();



                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        //LabTech login Grd

        #region getTodayLaborderforSampleCollect
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getTodayLaborderforSampleCollect")]
        [HttpGet]
        public List<LabOrderInprogressList> getTodayLaborderforSampleCollect()
        {
            List<LabOrderInprogressList> lstLabInprogressDetails = new List<LabOrderInprogressList>();



            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //  string strSQL = "SELECT lo.PatientName, ls.MrdNo, ls.LabStatus FROM  laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo where ls.LabStatus = 'Inprogress'";

                    string strSQL = "SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus, pr.Age, pr.Sex FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) where ls.LabStatus = '1' ORDER BY ls.LabOrderDate ASC";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrderInprogressList labOrderView = new LabOrderInprogressList();



                            labOrderView.FirstName = dr["FirstName"].ToString();
                            labOrderView.LastName = dr["LastName"].ToString();
                            labOrderView.LabStatus = dr["LabStatus"].ToString();
                            labOrderView.MrdNo = dr["MrdNo"].ToString();
                            labOrderView.RegID = dr["RegID"].ToString();
                            labOrderView.sex = dr["Sex"].ToString();
                            labOrderView.Age = dr["Age"].ToString();
                            //var d = Convert.ToDateTime(dr["CreateDate"]);
                            //var getdate = d.ToShortDateString();
                            //var gettime = d.ToShortTimeString();
                            labOrderView.CreateDate = dr["LabOrderDate"].ToString();

                            lstLabInprogressDetails.Add(labOrderView);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabInprogressDetails;
            }
        }
        #endregion



        #region getTodayLaborderStatus
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getTodayLaborderStatus")]
        [HttpGet]
        public List<LabOrderInprogressList> getTodayLaborderStatus(string labstatus)
        {
            List<LabOrderInprogressList> lstLabInprogressDetails = new List<LabOrderInprogressList>();



            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //  string strSQL = "SELECT lo.PatientName, ls.MrdNo, ls.LabStatus FROM  laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo where ls.LabStatus = 'Inprogress'";

                    string strSQL = "SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus, pr.Age, pr.Sex FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) where ls.LabStatus = '" + labstatus + "' ORDER BY ls.LabOrderDate ASC";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrderInprogressList labOrderView = new LabOrderInprogressList();



                            labOrderView.FirstName = dr["FirstName"].ToString();
                            labOrderView.LastName = dr["LastName"].ToString();
                            labOrderView.LabStatus = dr["LabStatus"].ToString();
                            labOrderView.MrdNo = dr["MrdNo"].ToString();
                            labOrderView.RegID = dr["RegID"].ToString();
                            labOrderView.sex = dr["Sex"].ToString();
                            labOrderView.Age = dr["Age"].ToString();
                            //var d = Convert.ToDateTime(dr["CreateDate"]);
                            //var getdate = d.ToShortDateString();
                            //var gettime = d.ToShortTimeString();
                            labOrderView.CreateDate = dr["LabOrderDate"].ToString();

                            lstLabInprogressDetails.Add(labOrderView);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabInprogressDetails;
            }
        }
        #endregion



        #region getTodayLaborderStatusLocation
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getTodayLaborderStatusLocation")]
        [HttpGet]
        public List<LabOrderInprogressList> getTodayLaborderStatusLocation(string locationCode)
        {
            List<LabOrderInprogressList> lstLabInprogressDetails = new List<LabOrderInprogressList>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //  string strSQL = "SELECT lo.PatientName, ls.MrdNo, ls.LabStatus FROM  laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo where ls.LabStatus = 'Inprogress'";

                    //string strSQL = "SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,lo.LocationName, pr.Age, pr.Sex,lo.ProviderName " +
                    //    " FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) " +
                    //    " where  lo.LocationCode='" + locationCode + "' and cast(ls.LabOrderDate as date)=(CURDATE()) and lo.ProviderName!='Hospital'";
                    string strSQL = " SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,ls.FinalStatus,lo.LocationName, pr.Age, pr.Sex,lo.ProviderName, " +
                                    " DAY(CURDATE())-DAY(LabOrderDate) as DayCount " +
                                    " FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) " +
                                    " where lo.LocationCode = '" + locationCode + "' and cast(ls.LabOrderDate as date) = (CURDATE()) and lo.ProviderName != 'Hospital' " +
                                    " and lo.ProviderName not like '%_Camp' " +
                                    " union " +
                                    " SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,ls.FinalStatus,lo.LocationName, pr.Age, pr.Sex,lo.ProviderName, " +
                                    " DAY(CURDATE())-DAY(LabOrderDate) as DayCount " +
                                    " FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) " +
                                    " left join groupmaster gm on gm.GroupName = lo.ProviderName " +
                                    " where lo.LocationCode = '" + locationCode + "' and cast(ls.LabOrderDate as date) = (CURDATE()) and lo.ProviderName like '%_Camp' " +
                                    " and gm.SampleCollect = 'Yes' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrderInprogressList labOrderView = new LabOrderInprogressList();


                            labOrderView.PatientName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                            labOrderView.FirstName = dr["FirstName"].ToString();
                            labOrderView.LastName = dr["LastName"].ToString();
                            labOrderView.LabStatus = dr["LabStatus"].ToString();
                            labOrderView.MrdNo = dr["MrdNo"].ToString();

                            string staSQL = "select * from laborderstatus where MrdNo='" + dr["MrdNo"].ToString() + "'";
                            MySqlDataAdapter staData = new MySqlDataAdapter(staSQL, conn);
                            MySqlCommandBuilder staCmd = new MySqlCommandBuilder(staData);
                            DataSet staDS = new DataSet();
                            DataTable StaDT = new DataTable();
                            staData.Fill(staDS);
                            StaDT = staDS.Tables[0];
                            if (StaDT.Rows.Count > 0)
                            {
                                foreach (DataRow sdr in StaDT.Rows)
                                {
                                    if (sdr != null)
                                    {
                                        if (sdr["FinalStatus"] == DBNull.Value)
                                        {
                                            labOrderView.FinalStatus = "";
                                        }
                                        else
                                        {
                                            labOrderView.FinalStatus = sdr["FinalStatus"].ToString();
                                        }
                                        labOrderView.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                                    }
                                }
                            }
                            labOrderView.RegID = dr["RegID"].ToString();
                            labOrderView.sex = dr["Sex"].ToString();
                            labOrderView.Age = dr["Age"].ToString();
                            //var d = Convert.ToDateTime(dr["CreateDate"]);
                            //var getdate = d.ToShortDateString();
                            //var gettime = d.ToShortTimeString();
                            labOrderView.CreateDate = dr["LabOrderDate"].ToString();
                            labOrderView.LocationName = dr["LocationName"].ToString();
                            labOrderView.PatientID = dr["RegID"].ToString();
                            lstLabInprogressDetails.Add(labOrderView);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabInprogressDetails;
            }
        }
        #endregion

        #region getCancelledBill
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getCancelledBill")]
        [HttpGet]
        public List<CancelledInvoice> getCancelledBill(string patientID)
        {
            List<CancelledInvoice> cancldInvoice = new List<CancelledInvoice>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select ls.CancelComment,Inv.InvoiceNo from laborderstatus ls inner join Invoice  Inv on ls.MrdNo=Inv.MrdNo " +
                                    " where ls.CancelFlag=1 and ls.LabStatus=0 and ls.RegID='" + patientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CancelledInvoice det = new CancelledInvoice();
                            det.InvoiceId = dr["InvoiceNo"].ToString();
                            det.comment = dr["CancelComment"].ToString();
                            cancldInvoice.Add(det);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return cancldInvoice;
            }
        }
        #endregion


        #region getTodayLaborderforLabView
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getTodayLaborderforLabView")]
        [HttpGet]
        public List<LabOrderInprogressList> getTodayLaborderforLabView()
        {
            List<LabOrderInprogressList> lstLabInprogressDetails = new List<LabOrderInprogressList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT distinct ls.LabOrderDate,pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,ls.FinalStatus, pr.Age, pr.DOB, pr.Sex,  " +
                                    " (select count(distinct TestCode) from samplecollecter sc where sc.MrdNo = lo.MrdNo ) as totalSamples, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = lo.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = lo.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = lo.MrdNo and rt1.Status = 1) as totalApproved, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = lo.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                    " ABS(DAY(CURDATE())-DAY(LabOrderDate)) as DayCount " +
                                    " FROM((laborderstatus ls INNER JOIN pathostatus lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON ls.RegID = pr.RegID) " +
                                    " where lo.LabStatus = '0' and (cast(ls.LabOrderDate as date) <= (CURDATE()) and cast(ls.LabOrderDate as date) >= (DATE_SUB(CURDATE(), INTERVAL 2 DAY))) " +
                                    " and ls.CancelFlag <> 1 ORDER BY ls.LabOrderDate ASC ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrderInprogressList labOrderView = new LabOrderInprogressList();
                            labOrderView.FirstName = dr["FirstName"].ToString();
                            labOrderView.LastName = dr["LastName"].ToString();
                            labOrderView.LabStatus = dr["LabStatus"].ToString();
                            labOrderView.MrdNo = dr["MrdNo"].ToString();
                            labOrderView.RegID = dr["RegID"].ToString();
                            labOrderView.sex = dr["Sex"].ToString();
                            labOrderView.Age = dr["Age"].ToString();

                            //var d = Convert.ToDateTime(dr["CreateDate"]);
                            //var getdate = d.ToShortDateString();
                            //var gettime = d.ToShortTimeString();
                            //labOrderView.CreateDate = getdate;
                            labOrderView.PatientID = dr["RegID"].ToString();
                            labOrderView.CreateDate = dr["LabOrderDate"].ToString();
                            labOrderView.TotalSamples = dr["totalSamples"].ToString();
                            labOrderView.TotalEntered = dr["totalEntered"].ToString();
                            labOrderView.TotalConfirmed = dr["totalConfirmed"].ToString();
                            labOrderView.TotalApproved = dr["totalApproved"].ToString();
                            labOrderView.PendingApproval = dr["pendingApproval"].ToString();
                            labOrderView.DayCount = (int)dr["DayCount"];

                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                labOrderView.FinalStatus = "";
                            }
                            else
                            {
                                labOrderView.FinalStatus = dr["FinalStatus"].ToString();
                            }

                            lstLabInprogressDetails.Add(labOrderView);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabInprogressDetails;
            }
        }
        #endregion

        #region getTodayLaborderWithDateforLabView
        /// <summary>
        ///gets Todays Laborder details based on Date forLabView
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getTodayLaborderWithDateforLabView")]
        [HttpGet]
        public List<LabOrderInprogressList> getTodayLaborderWithDateforLabView(string locationCode, string from, string to)
        {
            List<LabOrderInprogressList> lstLabInprogressDetails = new List<LabOrderInprogressList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT distinct ls.LabOrderDate,pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,ls.FinalStatus, pr.Age, pr.DOB, pr.Sex, " +
                                    " (select count(distinct TestCode) from samplecollecter sc where sc.MrdNo = ls.MrdNo) as totalSamples, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = ls.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = ls.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = ls.MrdNo and rt1.Status = 1) as totalApproved, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = ls.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                    " ABS(DAY(CURDATE())-DAY(ls.LabOrderDate)) as DayCount " +
                                    " FROM((laborderstatus ls " +
                                    " INNER JOIN pathostatus lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON ls.RegID = pr.RegID) where lo.LabStatus = '0' " +
                                    " AND ls.LabOrderDate Between '" + from + "' AND '" + to + "' and ls.CancelFlag<>1 ORDER BY ls.LabOrderDate ASC";

                    //ref query
                    //string strSQL = "SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,lo.LocationName, pr.Age, pr.Sex FROM((laborderstatus ls 
                    //    INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) where  lo.LocationCode='" + locationCode + "'
                    //    AND ls.LabOrderDate Between '" + from + "' AND '" + to + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrderInprogressList labOrderView = new LabOrderInprogressList();
                            labOrderView.FirstName = dr["FirstName"].ToString();
                            labOrderView.LastName = dr["LastName"].ToString();
                            labOrderView.LabStatus = dr["LabStatus"].ToString();
                            labOrderView.MrdNo = dr["MrdNo"].ToString();
                            labOrderView.RegID = dr["RegID"].ToString();
                            labOrderView.sex = dr["Sex"].ToString();
                            labOrderView.Age = dr["Age"].ToString();

                            //     var d = Convert.ToDateTime(dr["CreateDate"]);
                            //var getdate = d.ToShortDateString();
                            //var gettime = d.ToShortTimeString();
                            //labOrderView.CreateDate = getdate;
                            labOrderView.PatientID = dr["RegID"].ToString();
                            labOrderView.CreateDate = dr["LabOrderDate"].ToString();
                            labOrderView.TotalSamples = dr["totalSamples"].ToString();
                            labOrderView.TotalEntered = dr["totalEntered"].ToString();
                            labOrderView.TotalConfirmed = dr["totalConfirmed"].ToString();
                            labOrderView.TotalApproved = dr["totalApproved"].ToString();
                            labOrderView.PendingApproval = dr["pendingApproval"].ToString();
                            labOrderView.DayCount = (int)dr["DayCount"];

                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                labOrderView.FinalStatus = "";
                            }
                            else
                            {
                                labOrderView.FinalStatus = dr["FinalStatus"].ToString();
                            }

                            lstLabInprogressDetails.Add(labOrderView);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabInprogressDetails;
            }
        }
        #endregion

        #region getTodayLaborderforLabViewDrop
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getTodayLaborderforLabViewDrop")]
        [HttpGet]
        public List<LabOrderInprogressList> getTodayLaborderforLabViewDrop()
        {
            List<LabOrderInprogressList> lstLabInprogressDetails = new List<LabOrderInprogressList>();



            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT lo.CreateDate,pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus, pr.Age, pr.DOB, pr.Sex FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) where ls.LabStatus = '1' and ls.SampleStatus = '1' ORDER BY lo.CreateDate ASC";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrderInprogressList labOrderView = new LabOrderInprogressList();
                            labOrderView.FirstName = dr["FirstName"].ToString();
                            labOrderView.LastName = dr["LastName"].ToString();
                            labOrderView.LabStatus = dr["LabStatus"].ToString();
                            labOrderView.MrdNo = dr["MrdNo"].ToString();
                            labOrderView.RegID = dr["RegID"].ToString();
                            labOrderView.sex = dr["Sex"].ToString();
                            labOrderView.Age = dr["Age"].ToString();

                            //     var d = Convert.ToDateTime(dr["CreateDate"]);
                            //var getdate = d.ToShortDateString();
                            //var gettime = d.ToShortTimeString();
                            //labOrderView.CreateDate = getdate;
                            labOrderView.CreateDate = dr["CreateDate"].ToString();
                            lstLabInprogressDetails.Add(labOrderView);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabInprogressDetails;
            }
        }
        #endregion


        #region getAllpaymentDetailsByToday
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllpaymentDetailsByToday")]
        [HttpGet]
        public List<Payment> getAllpaymentDetailsByToday()
        {
            List<Payment> PaymentDetails = new List<Payment>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //DateTime today = new DateTime();
                    string today = DateTime.Now.ToString("MM/dd/yyyy");
                    string strSQL = "SELECT * FROM  Payment Where PaymentDate = '" + today + "' && PaymentType = 'Cash'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Payment payment = new Payment();


                            payment.PaymentId = (int)dr["PaymentId"];
                            payment.PaidAmount = Convert.ToDouble(dr["PaidAmount"]);
                            payment.PendingAmount = Convert.ToDouble(dr["PendingAmount"]);
                            payment.NetAmount = Convert.ToDouble(dr["NetAmount"]);
                            payment.PaymentDate = dr["PaymentDate"].ToString();
                            payment.PaymentType = dr["PaymentType"].ToString();
                            payment.InvoiceNo = dr["InvoiceNo"].ToString();
                            payment.RegID = (int)dr["RegID"];

                            PaymentDetails.Add(payment);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return PaymentDetails;
            }
        }
        #endregion

        #region getAllpaymentDetailsByPaymentMode
        /// <summary>
        /// Get details from payment table passing payment mode parameter like card, cash,credit
        /// </summary>
        /// <param name="paymentMode"></param>
        /// <returns></returns>
        [Route("api/Account/getAllpaymentDetailsByPaymentMode")]
        [HttpGet]
        public List<Invoice> getAllpaymentDetailsByPaymentMode(string paymentMode)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Invoice  where PaymentType LIKE'%" + paymentMode + "' AND Action ='SELF'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PaymentType = dr["PaymentType"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }

        #endregion


        #region getSearchSelfView
        /// <summary>
        /// Get details from payment table passing payment mode parameter like card, cash,credit
        /// </summary>
        /// <param name="paymentMode"></param>
        /// <returns></returns>
        [Route("api/Account/getSearchSelfView")]
        [HttpGet]
        public List<CommonProfileTestDetails> getSearchSelfView(string testorprofile)
        {
            List<CommonProfileTestDetails> lisLabProfileTestDetails = new List<CommonProfileTestDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  commonprofiletestdetails  where Description LIKE'%" + testorprofile + "%'  AND Action ='SELF'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            CommonProfileTestDetails labProfileTestList = new CommonProfileTestDetails();

                            labProfileTestList.RegID = (int)dr["RegID"];
                            labProfileTestList.Description = dr["Description"].ToString();
                            labProfileTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            labProfileTestList.PatientName = dr["PatientName"].ToString();
                            labProfileTestList.Code = dr["Code"].ToString();
                            labProfileTestList.MrdNo = dr["MrdNo"].ToString();
                            labProfileTestList.Discount = dr["Discount"].ToString();
                            labProfileTestList.NetAmount = dr["NetAmount"].ToString();
                            lisLabProfileTestDetails.Add(labProfileTestList);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisLabProfileTestDetails;
            }
        }

        #endregion


        #region getpaymentDetailsByAllPaymentMode
        /// <summary>
        /// Get details from payment table passing payment mode parameter like card, cash,credit
        /// </summary>
        /// <param name="paymentMode"></param>
        /// <returns></returns>
        [Route("api/Account/getpaymentDetailsByAllPaymentMode")]
        [HttpGet]
        public List<Invoice> getpaymentDetailsByAllPaymentMode()
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Invoice  where Action ='SELF'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();
                            invoice.PaymentType = dr["PaymentType"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }

        #endregion
        #region InsertGrouptRegistrationDetails
        /// <summary>
        /// Table - Registration
        /// </summary>
        /// <param name="Registration"></param>
        [Route("api/Account/InsertGrouptRegistrationDetails")]
        [HttpPost]
        public void InsertGrouptRegistrationDetails(GroupRegistration groupregistration)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Today;

                    string strSQL = "INSERT INTO grouppatientregistration(Title,FirstName,MiddleName,LastName,Guardian,Relation,PatientType,Sex,MaritalStatus,DOB,Age,DateOfReg,ProfilePicture,Amount,NoOfPerson,GroupName) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val14,@val15,@val16,@val17)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", groupregistration.Title);
                    cmd.Parameters.AddWithValue("@val2", groupregistration.FirstName);
                    cmd.Parameters.AddWithValue("@val3", groupregistration.MiddleName);
                    cmd.Parameters.AddWithValue("@val4", groupregistration.LastName);
                    cmd.Parameters.AddWithValue("@val5", groupregistration.Guardian);
                    cmd.Parameters.AddWithValue("@val6", groupregistration.Relation);
                    cmd.Parameters.AddWithValue("@val7", groupregistration.PatientType);
                    cmd.Parameters.AddWithValue("@val8", groupregistration.Sex);
                    cmd.Parameters.AddWithValue("@val9", groupregistration.MaritalStatus);
                    cmd.Parameters.AddWithValue("@val10", groupregistration.DOB);
                    cmd.Parameters.AddWithValue("@val11", groupregistration.Age);
                    cmd.Parameters.AddWithValue("@val12", groupregistration.DateOfReg);
                    //cmd.Parameters.AddWithValue("@val13", registration.PhoneNumber);
                    cmd.Parameters.AddWithValue("@val14", groupregistration.ProfilePicture);
                    cmd.Parameters.AddWithValue("@val15", groupregistration.Amount);
                    cmd.Parameters.AddWithValue("@val16", groupregistration.NoOfPerson);
                    cmd.Parameters.AddWithValue("@val17", groupregistration.GroupName);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getAllpaymentDetailsByInvoiceNo
        /// <summary>
        /// Get details from payment table passing payment mode parameter like card, cash,credit
        /// </summary>
        /// <param name="paymentMode"></param>
        /// <returns></returns>
        [Route("api/Account/getAllpaymentDetailsByInvoiceNo")]
        [HttpGet]
        public List<Payment> getAllpaymentDetailsByInvoiceNo(string invoiceNo)
        {
            List<Payment> PaymentDetails = new List<Payment>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string today = DateTime.Now.ToString("MM/dd/yyyy");
                    string strSQL = "SELECT * FROM  Payment Where  InvoiceNo = '" + invoiceNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Payment payment = new Payment();


                            payment.PaymentId = (int)dr["PaymentId"];
                            payment.PaidAmount = Convert.ToDouble(dr["PaidAmount"]);
                            payment.PendingAmount = Convert.ToDouble(dr["PendingAmount"]);
                            payment.NetAmount = Convert.ToDouble(dr["NetAmount"]);
                            payment.PaymentDate = dr["PaymentDate"].ToString();
                            payment.PaymentType = dr["PaymentType"].ToString();
                            payment.InvoiceNo = dr["InvoiceNo"].ToString();
                            payment.RegID = (int)dr["RegID"];

                            PaymentDetails.Add(payment);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return PaymentDetails;
            }
        }

        #endregion
        #region getAllProfiles
        /// <summary>
        /// Table - masterprofilelist
        /// </summary>
        /// Listed all values from masterprofilelist table
        /// <returns></returns>
        [Route("api/Account/getAllProfiles")]
        [HttpGet]
        public List<MasterProfileList> getAllProfiles()
        {
            List<MasterProfileList> lstProfiles = new List<MasterProfileList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  masterprofilelist";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MasterProfileList masterProfileList = new MasterProfileList();

                            masterProfileList.ProfileID = (int)dr["ProfileID"];
                            masterProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            masterProfileList.ProfileName = dr["ProfileName"].ToString();

                            lstProfiles.Add(masterProfileList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfiles;
            }
        }
        #endregion


        #region getTotalPendingAmount
        /// <summary>
        ///
        ///
        /// </summary>
        /// <returns></returns>

        [Route("api/Account/getTotalPendingAmount")]
        [HttpGet]
        public int getTotalPendingAmount()
        {
            int pendingamt = 0;
            string today = DateTime.Now.ToString("MM/dd/yyyy");
            DataTable dt = new DataTable();
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            string strSQL = "SELECT SUM(PendingAmount) FROM  payment Where PaymentDate = '" + today + "'  && PaymentType ='Cash'";
            conn.Open();
            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
            DataSet ds = new DataSet();
            mydata.Fill(ds);
            dt = ds.Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0] != DBNull.Value)
                {
                    pendingamt = Convert.ToInt32(dr[0]);
                }
                else
                {
                    pendingamt = 0;
                }
            }
            conn.Close();
            return pendingamt;
        }


        #endregion

        #region getTotalpaidAmount
        /// <summary>
        ///
        ///
        /// </summary>
        /// <returns></returns>

        [Route("api/Account/getTotalpaidAmount")]
        [HttpGet]
        public int getTotalpaidAmount()
        {
            int paidamt = 0;
            string today = DateTime.Now.ToString("MM/dd/yyyy");
            DataTable dt = new DataTable();
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            string strSQL = "SELECT SUM(PaidAmount) FROM  payment  Where PaymentDate = '" + today + "'  && PaymentType ='Cash'";
            conn.Open();
            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
            DataSet ds = new DataSet();
            mydata.Fill(ds);
            dt = ds.Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0] != DBNull.Value)
                {
                    paidamt = Convert.ToInt32(dr[0]);
                }
                else
                {
                    paidamt = 0;
                }
            }
            conn.Close();
            return paidamt;
        }


        #endregion

        #region  Group
        #region insertGroupdetails
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertGroupdetails")]
        [HttpPost]
        public void insertGroupdetails(Group group)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //DateTime today = DateTime.Today;
                    //group.GroupCreatDate = today.ToShortDateString();
                    string selectSQL = "SELECT * FROM  groupmaster where GroupName='" + group.GroupName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(selectSQL, conn);
                    MySqlCommandBuilder selcmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        //if ((group.SampleCollect.ToString()) == "on")
                        //{
                        //    group.SampleCollect= "Yes";
                        //}
                        //else
                        //{
                        //    group.SampleCollect= "No";
                        //}
                        string updSql = "update groupmaster set NoOfPerson=" + group.NoOfPerson + ",Amount=" + group.Amount + ",HosLocation='" + group.HospLocation + "'," +
                                        " HospitalName='" + group.HospitalName + "',HospitalID=" + group.HospitalID + ",RefferedBy='" + group.RefferedBy + "'," +
                                        " PaymentMode='" + group.PaymentMode + "',PaidAmount=" + group.PaidAmount + ",NetAmount=" + group.NetAmount + ", " +
                                        " SampleCollect='" + group.SampleCollect + "' " +
                                        " where GroupName='" + group.GroupName + "' ";
                        MySqlCommand updcmd = new MySqlCommand(updSql, conn);
                        updcmd.CommandType = CommandType.Text;
                        updcmd.ExecuteNonQuery();
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  groupmaster(GroupOrginID,NoOfPerson,GroupCreatDate,Amount,GroupName,HospitalName,HosLocation," +
                          " HospitalID,RefferedBy,PaymentMode,PaidAmount,NetAmount,SampleCollect,ClientCode) " +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", group.GroupOrginID);
                        cmd.Parameters.AddWithValue("@val2", group.NoOfPerson);
                        cmd.Parameters.AddWithValue("@val3", group.GroupCreatDate);
                        cmd.Parameters.AddWithValue("@val4", group.Amount);
                        cmd.Parameters.AddWithValue("@val5", group.GroupName);
                        cmd.Parameters.AddWithValue("@val6", group.HospitalName);
                        cmd.Parameters.AddWithValue("@val7", group.HospLocation);
                        cmd.Parameters.AddWithValue("@val8", group.HospitalID);
                        cmd.Parameters.AddWithValue("@val9", group.RefferedBy);
                        cmd.Parameters.AddWithValue("@val10", group.PaymentMode);
                        cmd.Parameters.AddWithValue("@val11", group.PaidAmount);
                        cmd.Parameters.AddWithValue("@val12", group.NetAmount);
                        cmd.Parameters.AddWithValue("@val13", group.SampleCollect);
                        cmd.Parameters.AddWithValue("@val14", group.ClientCode);
                        //if ((group.SampleCollect.ToString()) == "on")
                        //{
                        //    cmd.Parameters.AddWithValue("@val13", "Yes");
                        //}
                        //else
                        //{
                        //    cmd.Parameters.AddWithValue("@val13", "No");
                        //}
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region insertGroupTestList


        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertGroupTestList")]
        [HttpPost]
        public void insertGroupTestList(GroupTestList GroupTestList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //foreach (var labTestDetails in labTestList)
                    //{
                    string strSQL = "INSERT INTO GroupTestList(TestCode,TestName,Amount,MrdNo,GroupName) VALUES(@val1,@val2,@val3,@val4,@val5)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    //cmd.Parameters.AddWithValue("@val1", GroupTestList.GroupTestListId);
                    cmd.Parameters.AddWithValue("@val1", GroupTestList.TestCode);
                    cmd.Parameters.AddWithValue("@val2", GroupTestList.TestName);
                    cmd.Parameters.AddWithValue("@val3", GroupTestList.Amount);
                    cmd.Parameters.AddWithValue("@val4", GroupTestList.MrdNo);
                    cmd.Parameters.AddWithValue("@val5", GroupTestList.GroupName);
                    cmd.ExecuteNonQuery();
                    //}
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region insertGroupProfileList
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertGroupProfileList")]
        [HttpPost]
        public void insertGroupProfileList(GroupProfileList groupprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //foreach (var labprofileDetails in labProfileList)
                    //{
                    string strSQL = "";

                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand();
                    if (groupprofile.DeleteFlag == 1)
                    {
                        if ((groupprofile.ProfileCode).ToString() != "0")
                        {
                            strSQL = "delete from GroupProfileList where ProfileCode='" + groupprofile.ProfileCode + "' and GroupName='" + groupprofile.GroupName + "'";
                            cmd = new MySqlCommand(strSQL, conn);

                        }
                        else if ((groupprofile.TestCode).ToString() != "0")
                        {
                            strSQL = "delete from GroupTestList where TestCode='" + groupprofile.TestCode + "' and GroupName='" + groupprofile.GroupName + "'";
                            cmd = new MySqlCommand(strSQL, conn);
                        }

                    }
                    else
                    {
                        strSQL = "INSERT INTO GroupProfileList(ProfileCode,ProfileName,Amount,MrdNo,GroupName) VALUES(@val1,@val2,@val3,@val4,@val5)";
                        cmd = new MySqlCommand(strSQL, conn);
                        //cmd.Parameters.AddWithValue("@val1", groupprofile.GroupProfileListID);
                        cmd.Parameters.AddWithValue("@val1", groupprofile.ProfileCode);
                        cmd.Parameters.AddWithValue("@val2", groupprofile.ProfileName);
                        cmd.Parameters.AddWithValue("@val3", groupprofile.Amount);
                        cmd.Parameters.AddWithValue("@val4", groupprofile.MrdNo);
                        cmd.Parameters.AddWithValue("@val5", groupprofile.GroupName);
                    }
                    cmd.ExecuteNonQuery();

                    //}
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }

            }
        }
        #endregion

        #region getgrpProfandTestDetails
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getgrpProfandTestDetails")]
        [HttpGet]
        public List<GroupProfileList> getgrpProfandTestDetails(string groupName, int flag)
        {
            List<GroupProfileList> groupDetailsList = new List<GroupProfileList>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (flag == 1)
                    {
                        strSQL = "SELECT * FROM  GroupProfileList where GroupName='" + groupName + "'";
                    }
                    else if (flag == 2)
                    {
                        strSQL = "SELECT gt.*, ch.BiospyAbbrevation,ch.RequiredBiospyTestNumber FROM  GroupTestList gt inner join childtestlist ch " +
                                 " on gt.TestCode=ch.TestCode where GroupName='" + groupName + "'";
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            GroupProfileList groupprofile = new GroupProfileList();
                            if (flag == 1)
                            {
                                groupprofile.ProfileCode = dr["ProfileCode"].ToString();
                                groupprofile.ProfileName = dr["ProfileName"].ToString();
                                groupprofile.Amount = Convert.ToDouble(dr["Amount"].ToString());
                                groupprofile.MrdNo = dr["MrdNo"].ToString();
                                groupprofile.GroupName = dr["GroupName"].ToString();
                            }
                            else if (flag == 2)
                            {
                                groupprofile.TestCode = dr["TestCode"].ToString();
                                groupprofile.TestName = dr["TestName"].ToString();
                                groupprofile.TstAmount = Convert.ToDouble(dr["Amount"].ToString());
                                groupprofile.MrdNo = dr["MrdNo"].ToString();
                                groupprofile.GroupName = dr["GroupName"].ToString();
                                groupprofile.BiospyAbbrevation = dr["BiospyAbbrevation"].ToString();
                                groupprofile.BiospyFlag = dr["RequiredBiospyTestNumber"].ToString();
                            }
                            groupDetailsList.Add(groupprofile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return groupDetailsList;
            }
        }
        #endregion

        #endregion



        #region  addgroup related

        #region getGroupDetailsForBind
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupDetailsForBind")]
        [HttpGet]
        public List<Group> getGroupDetailsForBind(string hosLocation, int hospId)
        {
            List<Group> groupDetailsList = new List<Group>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  groupmaster where HosLocation='"+ hosLocation + "' and HospitalID=" + hospId + "";
                    string strSQL = "SELECT * FROM  groupmaster";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Group group = new Group();
                            group.GroupOrginID = dr["GroupOrginID"].ToString();
                            group.GroupName = dr["GroupName"].ToString();
                            group.NoOfPerson = dr["NoOfPerson"].ToString();
                            group.GroupCreatDate = dr["GroupCreatDate"].ToString();
                            group.Amount = Convert.ToDouble(dr["Amount"]);
                            group.HospitalName = dr["HospitalName"].ToString();
                            group.HospitalID = Convert.ToInt32(dr["HospitalID"].ToString());
                            group.HospLocation = dr["HosLocation"].ToString();
                            group.SampleCollect = dr["SampleCollect"].ToString();
                            group.ClientCode = dr["ClientCode"].ToString();
                            groupDetailsList.Add(group);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return groupDetailsList;
            }
        }
        #endregion

        #region getGroupDetails
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupDetails")]
        [HttpGet]
        public List<Group> getGroupDetails()
        {
            List<Group> groupDetailsList = new List<Group>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  groupmaster";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Group group = new Group();
                            group.GroupOrginID = dr["GroupOrginID"].ToString();
                            group.GroupName = dr["GroupName"].ToString();
                            group.NoOfPerson = dr["NoOfPerson"].ToString();
                            group.GroupCreatDate = dr["GroupCreatDate"].ToString();
                            group.Amount = Convert.ToDouble(dr["Amount"]);
                            groupDetailsList.Add(group);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return groupDetailsList;
            }
        }
        #endregion

        #region getDetailsByGROPName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getDetailsByGROPName")]
        [HttpGet]
        public List<Group> getDetailsByGROPName(string groupName)
        {
            List<Group> groupDetailsList = new List<Group>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT gr.*,grp.ProfileCode as RefCode,grp.ProfileName as RefName FROM groupmaster gr " +
                                    " left join GroupProfileList grp on gr.GroupName = grp.GroupName where gr.GroupName = '" + groupName + "' " +
                                    " union " +
                                    " SELECT gr.*,grt.TestCode as RefCode,grt.TestName as RefName FROM groupmaster gr " +
                                    " left join GroupTestList grt on gr.GroupName = grt.GroupName where gr.GroupName = '" + groupName + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Group group = new Group();
                            group.GroupOrginID = dr["GroupOrginID"].ToString();
                            group.GroupName = dr["GroupName"].ToString();
                            group.NoOfPerson = dr["NoOfPerson"].ToString();
                            group.GroupCreatDate = dr["GroupCreatDate"].ToString();
                            if (dr["RefCode"].ToString().StartsWith("PR"))
                            {
                                group.ProfileCode = dr["RefCode"].ToString();
                                group.ProfileName = dr["RefName"].ToString();
                                group.TestCode = "";
                                group.TestName = "";
                            }
                            else if (dr["RefCode"].ToString().StartsWith("TS"))
                            {
                                group.ProfileCode = "";
                                group.ProfileName = "";
                                group.TestCode = dr["RefCode"].ToString();
                                group.TestName = dr["RefName"].ToString();
                            }
                            else if (dr["RefCode"] == DBNull.Value)
                            {
                                group.ProfileCode = "";
                                group.ProfileName = "";
                                group.TestCode = "";
                                group.TestName = "";
                            }
                            group.HospLocation = dr["HosLocation"].ToString();
                            group.HospitalName = dr["HospitalID"].ToString() + '_' + dr["HospitalName"].ToString();
                            group.RefferedBy = dr["RefferedBy"].ToString();
                            group.PaymentMode = dr["PaymentMode"].ToString();
                            group.Amount = Convert.ToDouble(dr["Amount"]);
                            group.PaidAmount = (dr["PaidAmount"]).ToString();
                            group.NetAmount = (dr["NetAmount"]).ToString();
                            group.SampleCollect = dr["SampleCollect"].ToString();
                            groupDetailsList.Add(group);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return groupDetailsList;
            }
        }
        #endregion


        #region getGroupProfileDetailsByMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupProfileDetailsByMrdNo")]
        [HttpGet]
        public List<GroupProfileList> getGroupProfileDetailsByMrdNo(string groupmrdno)
        {
            List<GroupProfileList> groupProfileList = new List<GroupProfileList>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  groupprofilelist where MrdNo='" + groupmrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            GroupProfileList groupProfile = new GroupProfileList();
                            groupProfile.Sno = i;
                            groupProfile.GroupProfileListID = (int)dr["GroupProfileListID"];
                            groupProfile.ProfileCode = dr["ProfileCode"].ToString();
                            groupProfile.ProfileName = dr["ProfileName"].ToString();
                            groupProfile.Amount = Convert.ToDouble(dr["Amount"]);
                            groupProfileList.Add(groupProfile);
                            i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return groupProfileList;
            }
        }
        #endregion


        #region getGroupTestDetailsByMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupTestDetailsByMrdNo")]
        [HttpGet]
        public List<GroupTestList> getGroupTestDetailsByMrdNo(string groupmrdno)
        {
            List<GroupTestList> groupTestList = new List<GroupTestList>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  grouptestlist where MrdNo='" + groupmrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            GroupTestList groupTest = new GroupTestList();
                            groupTest.Sno = i;
                            groupTest.GroupTestListId = (int)dr["GroupTestListId"];
                            groupTest.TestCode = dr["TestCode"].ToString();
                            groupTest.TestName = dr["TestName"].ToString();
                            groupTest.Amount = Convert.ToDouble(dr["Amount"]);

                            i++;
                            groupTestList.Add(groupTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return groupTestList;
            }
        }
        #endregion

        #region getGroupDetailsbyGroupName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupDetailsbyGroupName")]
        [HttpGet]
        public Group getGroupDetailsbyGroupName(string groupname)
        {
            Group groupDetailsList = new Group();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  groupmaster  where GroupName = '" + groupname + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            groupDetailsList.GroupOrginID = dr["GroupOrginID"].ToString();
                            groupDetailsList.GroupName = dr["GroupName"].ToString();
                            groupDetailsList.HospitalName = dr["HospitalName"].ToString();
                            groupDetailsList.NoOfPerson = dr["NoOfPerson"].ToString();
                            groupDetailsList.GroupCreatDate = dr["GroupCreatDate"].ToString();
                            groupDetailsList.Amount = Convert.ToDouble(dr["Amount"]);
                            groupDetailsList.RefferedBy = dr["RefferedBy"].ToString();
                            groupDetailsList.PaymentMode = dr["PaymentMode"].ToString();
                            groupDetailsList.PaidAmount = dr["PaidAmount"].ToString();
                            groupDetailsList.NetAmount = dr["NetAmount"].ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return groupDetailsList;
            }
        }
        #endregion

        #endregion


        #region insurance related
        #region getInsuranceDetails
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getInsuranceDetails")]
        [HttpGet]
        public List<InsuranceAdminLevel> getInsuranceDetails()
        {
            List<InsuranceAdminLevel> insuranceDetailsList = new List<InsuranceAdminLevel>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  InsuranceAdminLevel where InsuranceName is not null";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            InsuranceAdminLevel insurance = new InsuranceAdminLevel();
                            insurance.InsuranceOrginID = dr["InsuranceOrginID"].ToString();
                            insurance.InsuranceName = dr["InsuranceName"].ToString();
                            //   insurance.insu = dr["NoOfPerson"].ToString();
                            insurance.InsuranceCreatDate = dr["InsuranceCreatDate"].ToString();
                            insurance.Amount = Convert.ToDouble(dr["Amount"]);
                            insuranceDetailsList.Add(insurance);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return insuranceDetailsList;
            }
        }
        #endregion


        #region getInsuranceDetailsbyInsuranceName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getInsuranceDetailsbyInsuranceName")]
        [HttpGet]
        public InsuranceAdminLevel getInsuranceDetailsbyInsuranceName(string insurancename)
        {
            InsuranceAdminLevel insuranceDetailsList = new InsuranceAdminLevel();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  InsuranceAdminLevel  where InsuranceName = '" + insurancename + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {


                            insuranceDetailsList.InsuranceOrginID = dr["InsuranceOrginID"].ToString();
                            insuranceDetailsList.InsuranceName = dr["InsuranceName"].ToString();
                            //insuranceDetailsList.NoOfPerson = dr["NoOfPerson"].ToString();
                            insuranceDetailsList.InsuranceCreatDate = dr["InsuranceCreatDate"].ToString();
                            insuranceDetailsList.Amount = Convert.ToDouble(dr["Amount"]);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return insuranceDetailsList;
            }
        }
        #endregion



        #region getinsuranceProfileDetailsByMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getinsuranceProfileDetailsByMrdNo")]
        [HttpGet]
        public List<InsuranceProfileList> getinsuranceProfileDetailsByMrdNo(string insurancemrdno)
        {
            List<InsuranceProfileList> insuranceProfileList = new List<InsuranceProfileList>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  InsuranceProfileList where MrdNoInsurance='" + insurancemrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InsuranceProfileList insuranceProfile = new InsuranceProfileList();
                            //insuranceProfile.Sno = i;
                            insuranceProfile.InsuranceProfileListID = (int)dr["InsuranceProfileListID"];
                            insuranceProfile.ProfileCode = dr["ProfileCode"].ToString();
                            insuranceProfile.ProfileName = dr["ProfileName"].ToString();
                            insuranceProfile.Amount = Convert.ToDouble(dr["Amount"]);
                            insuranceProfileList.Add(insuranceProfile);
                            // i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return insuranceProfileList;
            }
        }
        #endregion


        #region getinsuranceTestDetailsByMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getinsuranceTestDetailsByMrdNo")]
        [HttpGet]
        public List<InsuranceTestList> getinsuranceTestDetailsByMrdNo(string insurancemrdno)
        {
            List<InsuranceTestList> insuranceTestList = new List<InsuranceTestList>();
            DataTable dt = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  InsuranceTestList where MrdNoInsurance='" + insurancemrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InsuranceTestList insuranceTest = new InsuranceTestList();
                            //   insuranceTest.Sno = i;
                            insuranceTest.InsuranceTestListId = (int)dr["InsuranceTestListId"];
                            insuranceTest.TestCode = dr["TestCode"].ToString();
                            insuranceTest.TestName = dr["TestName"].ToString();
                            insuranceTest.Amount = Convert.ToDouble(dr["Amount"]);

                            //   i++;
                            insuranceTestList.Add(insuranceTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return insuranceTestList;
            }
        }
        #endregion

        #endregion



        #region outhospital related
        #region getOutofhospitalDetails
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getOutofhospitalDetails")]
        [HttpGet]
        public List<OutofHospitalAdminLevel> getOutofhospitalDetails(string locCode)
        {
            List<OutofHospitalAdminLevel> OuthospitalDetailsList = new List<OutofHospitalAdminLevel>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  OutofHospitalAdminLevel where LocationCode='" + locCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalAdminLevel outofhospital = new OutofHospitalAdminLevel();
                            if (dr["HospitalName"] != DBNull.Value)
                            {
                                outofhospital.HospitalName = dr["HospitalName"].ToString();

                                outofhospital.OutOfHospitalID = Convert.ToInt32(dr["OutOfHospitalID"].ToString());
                                outofhospital.HospitalOrginID = dr["HospitalOrginID"].ToString();
                                outofhospital.OutOfHospitalCreatDate = dr["OutOfHospitalCreatDate"].ToString();

                                if (dr["Amount"] != DBNull.Value)
                                {
                                    outofhospital.Amount = Convert.ToDouble(dr["Amount"]);
                                }
                                else
                                {
                                    outofhospital.Amount = 0;
                                }
                            }
                            //   insurance.insu = dr["NoOfPerson"].ToString();

                            OuthospitalDetailsList.Add(outofhospital);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return OuthospitalDetailsList;
            }
        }
        #endregion

        #region getoutHospitals
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getoutHospitals")]
        [HttpGet]
        public List<OutofHospitalAdminLevel> getoutHospitals(string locCode)
        {
            List<OutofHospitalAdminLevel> OuthospitalDetailsList = new List<OutofHospitalAdminLevel>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  outofhospitaladminlevel where LocationCode='" + locCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalAdminLevel outofhospital = new OutofHospitalAdminLevel();
                            if (dr["HospitalName"] != DBNull.Value)
                            {
                                outofhospital.HospitalName = dr["HospitalName"].ToString();
                                outofhospital.OutOfHospitalID = Convert.ToInt32(dr["OutofHospitalId"].ToString());
                                outofhospital.OutOfHospitalCreatDate = dr["OutOfHospitalCreatDate"].ToString();
                            }
                            OuthospitalDetailsList.Add(outofhospital);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return OuthospitalDetailsList;
            }
        }
        #endregion



        #region getHospitalDetailsbyName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getHospitalDetailsbyName")]
        [HttpGet]
        public OutofHospitalAdminLevel getHospitalDetailsbyInsuranceName(string outofhospitalname)
        {
            OutofHospitalAdminLevel HospitalDetailsList = new OutofHospitalAdminLevel();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  OutofHospitalAdminLevel  where HospitalName = '" + outofhospitalname + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {


                            HospitalDetailsList.HospitalOrginID = dr["HospitalOrginID"].ToString();
                            HospitalDetailsList.HospitalName = dr["HospitalName"].ToString();
                            //insuranceDetailsList.NoOfPerson = dr["NoOfPerson"].ToString();
                            HospitalDetailsList.OutOfHospitalCreatDate = dr["OutOfHospitalCreatDate"].ToString();
                            HospitalDetailsList.Amount = Convert.ToDouble(dr["Amount"]);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return HospitalDetailsList;
            }
        }
        #endregion



        #region getoutofhospitalProfileDetailsByMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getoutofhospitalProfileDetailsByMrdNo")]
        [HttpGet]
        public List<OutofHospitalProfilelist> getoutofhospitalProfileDetailsByMrdNo(string hospitalmrdno)
        {
            List<OutofHospitalProfilelist> outofhospitalProfileList = new List<OutofHospitalProfilelist>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  outofhospitalprofilelist where MrdNoOutOfHospital='" + hospitalmrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalProfilelist hospiatlanameprofile = new OutofHospitalProfilelist();
                            //insuranceProfile.Sno = i;
                            hospiatlanameprofile.OutOfHospitalProfileListID = (int)dr["OutOfHospitalProfileListID"];
                            hospiatlanameprofile.ProfileCode = dr["ProfileCode"].ToString();
                            hospiatlanameprofile.ProfileName = dr["ProfileName"].ToString();
                            hospiatlanameprofile.Amount = Convert.ToDouble(dr["Amount"]);
                            outofhospitalProfileList.Add(hospiatlanameprofile);
                            // i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return outofhospitalProfileList;
            }
        }
        #endregion



        #region getoutofhospitalProfile
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getoutofhospitalProfile")]
        [HttpGet]
        public List<OutofHospitalProfilelist> getoutofhospitalProfile(string hospitalName, int hospId, string hospLoc)
        {
            List<OutofHospitalProfilelist> outofhospitalProfileList = new List<OutofHospitalProfilelist>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  outofhospitalprofilelist where HospitalName='" + hospitalName + "' and LocationCode='" + hospLoc + "' and HospitalID=" + hospId + "";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalProfilelist hospiatlanameprofile = new OutofHospitalProfilelist();
                            //insuranceProfile.Sno = i;
                            hospiatlanameprofile.OutOfHospitalProfileListID = (int)dr["OutOfHospitalProfileListID"];
                            hospiatlanameprofile.ProfileCode = dr["ProfileCode"].ToString();
                            hospiatlanameprofile.ProfileName = dr["ProfileName"].ToString();
                            hospiatlanameprofile.Amount = Convert.ToDouble(dr["Amount"]);
                            outofhospitalProfileList.Add(hospiatlanameprofile);
                            // i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return outofhospitalProfileList;
            }
        }
        #endregion

        #region getHospitalTestDetailsByMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getHospitalTestDetailsByMrdNo")]
        [HttpGet]
        public List<OutofHospitalTestlist> getHospitalTestDetailsByMrdNo(string hospitalmrdno)
        {
            List<OutofHospitalTestlist> hospitalTestList = new List<OutofHospitalTestlist>();
            DataTable dt = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  outofhospitaltestlist where MrdNoOutOfHospital='" + hospitalmrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalTestlist hospitalTest = new OutofHospitalTestlist();
                            //   insuranceTest.Sno = i;
                            hospitalTest.OutOfHospitalTestListId = (int)dr["OutOfHospitalTestListId"];
                            hospitalTest.TestCode = dr["TestCode"].ToString();
                            hospitalTest.TestName = dr["TestName"].ToString();
                            hospitalTest.Amount = Convert.ToDouble(dr["Amount"]);

                            //   i++;
                            hospitalTestList.Add(hospitalTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return hospitalTestList;
            }
        }
        #endregion
        #endregion


        #region getHospitalTestDetails
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getHospitalTestDetails")]
        [HttpGet]
        public List<OutofHospitalTestlist> getHospitalTestDetails(string hospitalName, int hospId, string hospLoc)
        {
            List<OutofHospitalTestlist> hospitalTestList = new List<OutofHospitalTestlist>();
            DataTable dt = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  outofhospitaltestlist where HospitalName='" + hospitalName + "' and LocationCode='" + hospLoc + "' and HospitalID=" + hospId + "";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalTestlist hospitalTest = new OutofHospitalTestlist();
                            //   insuranceTest.Sno = i;
                            hospitalTest.OutOfHospitalTestListId = (int)dr["OutOfHospitalTestListId"];
                            hospitalTest.TestCode = dr["TestCode"].ToString();
                            hospitalTest.TestName = dr["TestName"].ToString();
                            hospitalTest.Amount = Convert.ToDouble(dr["Amount"]);

                            //   i++;
                            hospitalTestList.Add(hospitalTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return hospitalTestList;
            }
        }
        #endregion


        #region InsuranceAdmin
        #region insertInsuranceAdminLevel
        /// <summary>
        /// Table - Insert InsuranceAdminLevel
        /// </summary>
        /// <param name="insuranceAdminLevel"></param>
        [Route("api/Account/insertInsuranceAdminLevel")]
        [HttpPost]
        public string insertInsuranceAdminLevel(InsuranceAdminLevel insuranceAdminLevel)
        {
            var retValue = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string selSql = "select * from InsuranceAdminLevel where InsuranceName='" + insuranceAdminLevel.InsuranceName + "'";
                    MySqlDataAdapter sda = new MySqlDataAdapter(selSql, conn);
                    MySqlCommandBuilder scb = new MySqlCommandBuilder(sda);
                    DataSet ds = new DataSet();
                    sda.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        retValue = "exist";
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  InsuranceAdminLevel(InsuranceOrginID,InsuranceName,InsuranceCreatDate,Amount,Location) VALUES(@val1,@val2,@val3,@val4,@val5)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", insuranceAdminLevel.InsuranceOrginID);
                        cmd.Parameters.AddWithValue("@val2", insuranceAdminLevel.InsuranceName);
                        cmd.Parameters.AddWithValue("@val3", insuranceAdminLevel.InsuranceCreatDate);
                        cmd.Parameters.AddWithValue("@val4", insuranceAdminLevel.Amount);
                        cmd.Parameters.AddWithValue("@val5", insuranceAdminLevel.Location);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        retValue = "success";
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
            return retValue;
        }
        #endregion

        #region insertInsuranceProfileList
        /// <summary>
        /// Table - insert Insuranceprofilelist
        /// </summary>
        /// <param name="insuranceprofilelist"></param>
        [Route("api/Account/insertInsuranceprofilelist")]
        [HttpPost]
        public void insertInsuranceProfileList(InsuranceProfileList insuranceprofilelist)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string selstrSQL = "SELECT * FROM  InsuranceProfileList where ProfileName='" + insuranceprofilelist.ProfileName + "' and ProfileCode='" + insuranceprofilelist.ProfileCode + "' " +
                                        " and InsuranceName='" + insuranceprofilelist.InsuranceName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(selstrSQL, conn);
                    MySqlCommandBuilder selcmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL = "INSERT INTO  Insuranceprofilelist(ProfileCode,ProfileName,Amount,MrdNoInsurance,InsuranceName) VALUES(@val1,@val2,@val3,@val4,@val5)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", insuranceprofilelist.ProfileCode);
                        cmd.Parameters.AddWithValue("@val2", insuranceprofilelist.ProfileName);
                        cmd.Parameters.AddWithValue("@val3", insuranceprofilelist.Amount);
                        cmd.Parameters.AddWithValue("@val4", insuranceprofilelist.MrdNoInsurance);
                        cmd.Parameters.AddWithValue("@val5", insuranceprofilelist.InsuranceName);
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region insertInsuranceTestList
        /// <summary>
        /// Table - insert Insurancetestlist
        /// </summary>
        /// <param name="insuranceTestList"></param>
        [Route("api/Account/insertInsuranceTestList")]
        [HttpPost]
        public void insertInsuranceTestList(InsuranceTestList insuranceTestList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string selstrSQL = "SELECT * FROM  InsuranceTestList where TestName='" + insuranceTestList.TestName + "' and TestCode='" + insuranceTestList.TestCode + "' " +
                                        " and InsuranceName='" + insuranceTestList.InsuranceName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(selstrSQL, conn);
                    MySqlCommandBuilder selcmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL = "INSERT INTO  Insurancetestlist(TestCode,TestName,Amount,MrdNoInsurance,InsuranceName) VALUES(@val1,@val2,@val3,@val4,@val5)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", insuranceTestList.TestCode);
                        cmd.Parameters.AddWithValue("@val2", insuranceTestList.TestName);
                        cmd.Parameters.AddWithValue("@val3", insuranceTestList.Amount);
                        cmd.Parameters.AddWithValue("@val4", insuranceTestList.MrdNoInsurance);
                        cmd.Parameters.AddWithValue("@val5", insuranceTestList.InsuranceName);
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region getAllProfilelistByInsuranceName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllProfilelistByInsuranceName")]
        [HttpGet]
        public List<InsuranceProfileList> getAllProfilelistByInsuranceName(string insurancename)
        {
            List<InsuranceProfileList> lstInsProfileDetails = new List<InsuranceProfileList>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    //string strSQL = "SELECT* FROM((childtestlist INNER JOIN labtestlist ON childtestlist.TestCode = labtestlist.TestCode) INNER JOIN samplecollecter ON labtestlist.TestCode = samplecollecter.TestCode) where labtestlist.MrdNo = '" + mrdNo + "'";
                    string strSQL = "SELECT * FROM  insuranceprofilelist where InsuranceName = '" + insurancename + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InsuranceProfileList InsuranceProfile = new InsuranceProfileList();

                            InsuranceProfile.InsuranceProfileListID = (int)dr["InsuranceProfileListID"];
                            InsuranceProfile.ProfileCode = dr["ProfileCode"].ToString();
                            InsuranceProfile.ProfileName = dr["ProfileName"].ToString();
                            InsuranceProfile.Amount = (double)dr["Amount"];
                            InsuranceProfile.MrdNoInsurance = dr["MrdNoInsurance"].ToString();
                            InsuranceProfile.InsuranceName = dr["InsuranceName"].ToString();
                            lstInsProfileDetails.Add(InsuranceProfile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstInsProfileDetails;
            }
        }
        #endregion


        #region getAllTestlistByInsuranceName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllTestlistByInsuranceName")]
        [HttpGet]
        public List<InsuranceTestList> getAllTestlistByInsuranceName(string insurancename)
        {
            List<InsuranceTestList> lstInsTestDetails = new List<InsuranceTestList>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    string strSQL = "SELECT * FROM  insurancetestlist where InsuranceName = '" + insurancename + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InsuranceTestList insurancelTest = new InsuranceTestList();

                            insurancelTest.InsuranceTestListId = (int)dr["InsuranceTestListId"];
                            insurancelTest.TestCode = dr["TestCode"].ToString();
                            insurancelTest.TestName = dr["TestName"].ToString();
                            insurancelTest.Amount = (double)dr["Amount"];
                            insurancelTest.MrdNoInsurance = dr["MrdNoInsurance"].ToString();
                            insurancelTest.InsuranceName = dr["InsuranceName"].ToString();
                            lstInsTestDetails.Add(insurancelTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstInsTestDetails;
            }
        }
        #endregion
        #endregion

        #region OutOfHospitalAdmin

        #region insertOutOfHospital
        /// <summary>
        /// Table - Insert outofhospital
        /// </summary>
        /// <param name="insertOutOfHospital"></param>
        [Route("api/Account/insertOutOfHospital")]
        [HttpPost]
        public int insertOutOfHospital(string hospLoc, string hospName, string date)
        {
            int newHospId = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string hosSelect = "select * from  outofhospital where HospitalName='" + hospName + "' and Location='" + hospLoc + "'";
                    MySqlDataAdapter hosAdap = new MySqlDataAdapter(hosSelect, conn);
                    MySqlCommandBuilder hosCmd = new MySqlCommandBuilder(hosAdap);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    hosAdap.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        newHospId = Convert.ToInt32(dt.Rows[0]["OutOfHospitalID"]);
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  outofhospital(HospitalName,Location,CreatedDate) VALUES(@val1,@val2,@val3);SELECT LAST_INSERT_ID();";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", hospName);
                        cmd.Parameters.AddWithValue("@val2", hospLoc);
                        cmd.Parameters.AddWithValue("@val3", date);
                        cmd.CommandType = CommandType.Text;
                        newHospId = Convert.ToInt32(cmd.ExecuteScalar());
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return newHospId;
            }
        }
        #endregion

        #region updatenameForHosp
        /// <summary>
        /// Table - update outofhospitaladminlevel
        /// </summary>
        /// <param name="updatenameForHosp"></param>
        [Route("api/Account/updatenameForHosp")]
        [HttpPost]
        public int updatenameForHosp(OutofHospitalAdminLevel outofHospitalAdminLevel)
        {
            int newHospId = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string hosSelect = "select * from  outofhospitaladminlevel where LocationCode='" + outofHospitalAdminLevel.LocationCode + "'";
                    MySqlDataAdapter hosAdap = new MySqlDataAdapter(hosSelect, conn);
                    MySqlCommandBuilder hosCmd = new MySqlCommandBuilder(hosAdap);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    hosAdap.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        // newHospId = Convert.ToInt32(dt.Rows[0]["OutOfHospitalID"]);
                        newHospId = Convert.ToInt32(outofHospitalAdminLevel.OutOfHospitalID);
                        string updSql = "Update outofhospitaladminlevel set HospitalName='" + outofHospitalAdminLevel.HospitalName + "' " +
                                        " where OutOfHospitalID=" + newHospId + " ";
                        MySqlCommand upcmd = new MySqlCommand(updSql, conn);
                        upcmd.CommandType = CommandType.Text;
                        upcmd.ExecuteNonQuery();

                        string updProfSql = "Update outofhospitalprofilelist set HospitalName='" + outofHospitalAdminLevel.HospitalName + "' " +
                                        " where HospitalID=" + newHospId + " ";
                        MySqlCommand upProfcmd = new MySqlCommand(updProfSql, conn);
                        upProfcmd.CommandType = CommandType.Text;
                        upProfcmd.ExecuteNonQuery();

                        string updTstSql = "Update outofhospitaltestlist set HospitalName='" + outofHospitalAdminLevel.HospitalName + "' " +
                                        " where HospitalID=" + newHospId + " ";
                        MySqlCommand updTstcmd = new MySqlCommand(updTstSql, conn);
                        updTstcmd.CommandType = CommandType.Text;
                        updTstcmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return newHospId;
            }
        }
        #endregion

        #region insertOutOfHospitalAdminLevel
        /// <summary>
        /// Table - Insert outofhospitaladminlevel
        /// </summary>
        /// <param name="outofHospitalAdminLevel"></param>
        [Route("api/Account/insertOutOfHospitalAdminLevel")]
        [HttpPost]
        public int insertOutOfHospitalAdminLevel(OutofHospitalAdminLevel outofHospitalAdminLevel)
        {
            int newHospId = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string hosSelect = "select * from  outofhospitaladminlevel where HospitalName='" + outofHospitalAdminLevel.HospitalName + "' and LocationCode='" + outofHospitalAdminLevel.LocationCode + "'";
                    MySqlDataAdapter hosAdap = new MySqlDataAdapter(hosSelect, conn);
                    MySqlCommandBuilder hosCmd = new MySqlCommandBuilder(hosAdap);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    hosAdap.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        newHospId = Convert.ToInt32(dt.Rows[0]["OutOfHospitalID"]);
                        string updSql = "Update outofhospitaladminlevel set HospitalOrginID='" + outofHospitalAdminLevel.HospitalOrginID + "',Amount=" + outofHospitalAdminLevel.Amount + " " +
                                        " where OutOfHospitalID=" + newHospId + " ";
                        MySqlCommand upcmd = new MySqlCommand(updSql, conn);
                        upcmd.CommandType = CommandType.Text;
                        upcmd.ExecuteNonQuery();
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  outofhospitaladminlevel(HospitalOrginID,HospitalName,OutOfHospitalCreatDate,LocationCode,Amount) VALUES(@val1,@val2,@val3,@val4,@val5);SELECT LAST_INSERT_ID();";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", outofHospitalAdminLevel.HospitalOrginID);
                        cmd.Parameters.AddWithValue("@val2", outofHospitalAdminLevel.HospitalName);
                        cmd.Parameters.AddWithValue("@val3", outofHospitalAdminLevel.OutOfHospitalCreatDate);
                        cmd.Parameters.AddWithValue("@val4", outofHospitalAdminLevel.LocationCode);
                        cmd.Parameters.AddWithValue("@val5", outofHospitalAdminLevel.Amount);
                        cmd.CommandType = CommandType.Text;
                        newHospId = Convert.ToInt32(cmd.ExecuteScalar());
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return newHospId;
            }
        }
        #endregion

        #region insertOutofHospitalProfilelist
        /// <summary>
        /// Table - insert outofhospitalprofilelist
        /// </summary>
        /// <param name="outofHospitalProfilelist"></param>
        [Route("api/Account/insertOutofHospitalProfilelist")]
        [HttpPost]
        public void insertOutofHospitalProfilelist(OutofHospitalProfilelist outofHospitalProfilelist)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  outofhospitalprofilelist(ProfileCode,ProfileName,Amount,MrdNoOutOfHospital,HospitalName,LocationCode,HospitalID) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", outofHospitalProfilelist.ProfileCode);
                    cmd.Parameters.AddWithValue("@val2", outofHospitalProfilelist.ProfileName);
                    cmd.Parameters.AddWithValue("@val3", outofHospitalProfilelist.Amount);
                    cmd.Parameters.AddWithValue("@val4", outofHospitalProfilelist.MrdNoOutOfHospital);
                    cmd.Parameters.AddWithValue("@val5", outofHospitalProfilelist.HospitalName);
                    cmd.Parameters.AddWithValue("@val6", outofHospitalProfilelist.LocationCode);
                    cmd.Parameters.AddWithValue("@val7", outofHospitalProfilelist.HospitalID);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region insertOutofHospitalTestlist
        /// <summary>
        /// Table - insert outofhospitaltestlist
        /// </summary>
        /// <param name="outofHospitalTestlist"></param>
        [Route("api/Account/insertOutofHospitalTestlist")]
        [HttpPost]
        public void insertOutofHospitalTestlist(OutofHospitalTestlist outofHospitalTestlist)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  outofhospitaltestlist(TestCode,TestName,Amount,MrdNoOutOfHospital,HospitalName,LocationCode,HospitalID) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", outofHospitalTestlist.TestCode);
                    cmd.Parameters.AddWithValue("@val2", outofHospitalTestlist.TestName);
                    cmd.Parameters.AddWithValue("@val3", outofHospitalTestlist.Amount);
                    cmd.Parameters.AddWithValue("@val4", outofHospitalTestlist.MrdNoOutOfHospital);
                    cmd.Parameters.AddWithValue("@val5", outofHospitalTestlist.HospitalName);
                    cmd.Parameters.AddWithValue("@val6", outofHospitalTestlist.LocationCode);
                    cmd.Parameters.AddWithValue("@val7", outofHospitalTestlist.HospitalID);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region editprofileOrTestForHosp
        /// <summary>
        /// 
        /// </summary>
        /// <param name="editprofileOrTestForHosp"></param>
        [Route("api/Account/editprofileOrTestForHosp")]
        [HttpPost]
        public void editprofileOrTestForHosp(int editID, string editAmount, string editCode, int updFlag)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (updFlag == 1)
                    {
                        if (editCode.StartsWith("PR"))
                        {
                            strSQL = "Update  outofhospitalprofilelist set Amount='" + editAmount + "' where OutOfHospitalProfileListID='" + editID + "'";
                        }
                        else if (editCode.StartsWith("TS"))
                        {
                            strSQL = "Update  outofhospitaltestlist set Amount='" + editAmount + "' where OutOfHospitalTestListId='" + editID + "'";
                        }
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else if (updFlag == 2)
                    {
                        if (editCode.StartsWith("PR"))
                        {
                            strSQL = "Update  insuranceprofilelist set Amount='" + editAmount + "' where InsuranceProfileListID='" + editID + "'";
                        }
                        else if (editCode.StartsWith("TS"))
                        {
                            strSQL = "Update  insurancetestlist set Amount='" + editAmount + "' where InsuranceTestListId='" + editID + "'";
                        }
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region deleteprofileOrTestForHosp
        /// <summary>
        /// 
        /// </summary>      
        [Route("api/Account/deleteprofileOrTestForHosp")]
        [HttpPost]
        public void deleteprofileOrTestForHosp(int editID, string editCode, int delFlag)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (delFlag == 1)
                    {
                        if (editCode.StartsWith("PR"))
                        {
                            strSQL = "delete from  outofhospitalprofilelist where OutOfHospitalProfileListID='" + editID + "'";
                        }
                        else if (editCode.StartsWith("TS"))
                        {
                            strSQL = "delete from  outofhospitaltestlist where OutOfHospitalTestListId='" + editID + "'";
                        }
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else if (delFlag == 2)
                    {
                        if (editCode.StartsWith("PR"))
                        {
                            strSQL = "delete from  insuranceprofilelist where InsuranceProfileListID='" + editID + "'";
                        }
                        else if (editCode.StartsWith("TS"))
                        {
                            strSQL = "delete from  insurancetestlist where InsuranceTestListId='" + editID + "'";
                        }
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllProfilelistByHospitalName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllProfilelistByHospitalName")]
        [HttpGet]
        public List<OutofHospitalProfilelist> getAllProfilelistByHospitalName(string gethospitalname, string locationCode)
        {
            List<OutofHospitalProfilelist> lstHospProfileDetails = new List<OutofHospitalProfilelist>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    //string strSQL = "SELECT* FROM((childtestlist INNER JOIN labtestlist ON childtestlist.TestCode = labtestlist.TestCode) INNER JOIN samplecollecter ON labtestlist.TestCode = samplecollecter.TestCode) where labtestlist.MrdNo = '" + mrdNo + "'";
                    string strSQL = "SELECT* FROM outofhospitalprofilelist where HospitalName = '" + gethospitalname + "' and LocationCode ='" + locationCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalProfilelist hospitalProfile = new OutofHospitalProfilelist();

                            hospitalProfile.OutOfHospitalProfileListID = (int)dr["OutOfHospitalProfileListID"];
                            hospitalProfile.ProfileCode = dr["ProfileCode"].ToString();
                            hospitalProfile.ProfileName = dr["ProfileName"].ToString();
                            hospitalProfile.Amount = (double)dr["Amount"];
                            hospitalProfile.MrdNoOutOfHospital = dr["MrdNoOutOfHospital"].ToString();
                            hospitalProfile.HospitalName = dr["HospitalName"].ToString();
                            lstHospProfileDetails.Add(hospitalProfile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstHospProfileDetails;
            }
        }
        #endregion

        #region getAllTestlistByHospitalName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllTestlistByHospitalName")]
        [HttpGet]
        public List<OutofHospitalTestlist> getAllTestlistByHospitalName(string gethospitalname, string locationCode)
        {
            List<OutofHospitalTestlist> lstHospTestDetails = new List<OutofHospitalTestlist>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT* FROM outofhospitaltestlist where HospitalName = '" + gethospitalname + "' and LocationCode ='" + locationCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            OutofHospitalTestlist hospitalTest = new OutofHospitalTestlist();

                            hospitalTest.OutOfHospitalTestListId = (int)dr["OutOfHospitalTestListId"];
                            hospitalTest.TestCode = dr["TestCode"].ToString();
                            hospitalTest.TestName = dr["TestName"].ToString();
                            hospitalTest.Amount = (double)dr["Amount"];
                            hospitalTest.MrdNoOutOfHospital = dr["MrdNoOutOfHospital"].ToString();
                            hospitalTest.HospitalName = dr["HospitalName"].ToString();
                            lstHospTestDetails.Add(hospitalTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstHospTestDetails;
            }
        }
        #endregion
        #endregion

        //get Sample


        #region getTestList by MrdNo

        /// <summary>
        /// Table - LabTestList,childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getNewTestListbyMrdNo")]
        [HttpGet]
        public List<ChildTestList> getNewTestListbyMrdNo(string mrdNo)
        {
            List<ChildTestList> lstChildTestList = new List<ChildTestList>();
            DataTable dt = new DataTable();
            //int i = 1;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM childtestlist INNER JOIN labtestlist ON childtestlist.TestCode = labtestlist.TestCode where labtestlist.MrdNo = '" + mrdNo + "'AND childtestlist.ActiveStatus=1";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //new
                            //   SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                            ChildTestList childTestList = new ChildTestList();
                            childTestList.AdditionalFixedComments = dr["MrdNo"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            lstChildTestList.Add(childTestList);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstChildTestList;

        }


        #endregion




        #region getSampleListByMrdNo
        /// <summary>
        /// Table - LabTestList,childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getSampleListByMrdNo")]
        [HttpGet]
        public List<SampleContainersByMrdNo> getSampleListByMrdNo(string mrdNo)
        {
            List<SampleContainersByMrdNo> lstSampleDetails = new List<SampleContainersByMrdNo>();
            DataTable dt = new DataTable();
            //int i = 1;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT* FROM childtestlist INNER JOIN labtestlist ON childtestlist.TestCode = labtestlist.TestCode where labtestlist.MrdNo = '" + mrdNo + "'AND childtestlist.ActiveStatus=1";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //new
                            //   SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                            string mrdNoLocal = dr["MrdNo"].ToString();
                            string testcodeLocal = dr["TestCode"].ToString();
                            DataTable dts = new DataTable();
                            // int i = 1;
                            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                            {

                                //string strSQL = "SELECT * FROM childtestlist INNER JOIN labProfilelist ON childtestlist.ProfileID = labProfilelist.ProfileID where labProfilelist.MrdNo = '"+ mrdNo + "'";

                                string strSQLs = "SELECT * FROM SampleCollecter where MrdNo = '" + mrdNoLocal + "' and TestCode='" + testcodeLocal + "'";



                                conns.Open();
                                MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                                MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                                DataSet dss = new DataSet();
                                mydatas.Fill(dss);
                                dts = dss.Tables[0];
                                if (dts.Rows.Count > 0)
                                {
                                    foreach (DataRow drs in dts.Rows)
                                    {
                                        if (drs != null)
                                        {


                                            SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                                            sampleContainer.MrdNo = mrdNo;
                                            sampleContainer.SampleStatus = (int)drs["SampleStatus"];
                                            sampleContainer.SampleContainer = drs["SampleName"].ToString();
                                            sampleContainer.TestCode = drs["TestCode"].ToString();
                                            sampleContainer.TestID = (int)drs["TestID"];
                                            sampleContainer.ProfileID = (int)drs["ProfileID"];
                                            sampleContainer.ProfileName = drs["ProfileName"].ToString();
                                            sampleContainer.TestName = drs["TestName"].ToString();
                                            sampleContainer.IndividualStatus = (int)dr["IndividualStatus"];
                                            sampleContainer.Dynamic = "";
                                            sampleContainer.Catagory_Test_Profile = "Test";
                                            if (sampleContainer.SampleStatus != 1)
                                            {
                                                DataTable dt2 = new DataTable();
                                                string strSQL2 = "SELECT * FROM  Alternativesamplecontainer where TestCode='" + testcodeLocal + "' ";
                                                // conn.Open();
                                                MySqlDataAdapter mydata2 = new MySqlDataAdapter(strSQL2, conn);
                                                MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata2);
                                                DataSet ds2 = new DataSet();
                                                mydata2.Fill(ds2);
                                                dt2 = ds2.Tables[0];
                                                if (dt2.Rows.Count != 0)
                                                {
                                                    foreach (DataRow dr2 in dt2.Rows)
                                                    {
                                                        if (dr2 != null)
                                                        {

                                                            sampleContainer.AlternativeSampleName = dr2["AlternativeSampleName"].ToString(); sampleContainer.AlternativeSampleAvailable = "Yes";

                                                        }
                                                    }

                                                }
                                                else
                                                {
                                                    sampleContainer.AlternativeSampleAvailable = "No";
                                                }
                                            }
                                            else
                                            {
                                                sampleContainer.AlternativeSampleAvailable = "No";
                                            }
                                            lstSampleDetails.Add(sampleContainer);
                                            //  sampleContainer.SampleStatus = (int)drs["SampleStatus"];
                                        }



                                    }
                                }
                                else
                                {



                                    SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                                    sampleContainer.MrdNo = mrdNo;
                                    sampleContainer.TestID = (int)dr["TestID"];
                                    sampleContainer.ProfileID = (int)dr["ProfileID"];
                                    sampleContainer.TestCode = dr["TestCode"].ToString();
                                    sampleContainer.TestName = dr["TestName"].ToString();
                                    sampleContainer.SampleContainer = dr["SampleContainer"].ToString();
                                    sampleContainer.AlternativeSampleAvailable = dr["AlternativeSampleContainer"].ToString();
                                    sampleContainer.IndividualStatus = (int)dr["IndividualStatus"];
                                    sampleContainer.Dynamic = "";
                                    sampleContainer.Catagory_Test_Profile = "Test";
                                    if (sampleContainer.AlternativeSampleAvailable == "Yes")
                                    {
                                        DataTable dt2 = new DataTable();
                                        string strSQL2 = "SELECT * FROM  Alternativesamplecontainer where TestCode='" + testcodeLocal + "' ";
                                        // conn.Open();
                                        MySqlDataAdapter mydata2 = new MySqlDataAdapter(strSQL2, conn);
                                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata2);
                                        DataSet ds2 = new DataSet();
                                        mydata2.Fill(ds2);
                                        dt2 = ds2.Tables[0];
                                        foreach (DataRow dr2 in dt2.Rows)
                                        {
                                            if (dr2 != null)
                                            {

                                                sampleContainer.AlternativeSampleName = dr2["AlternativeSampleName"].ToString();

                                            }
                                        }
                                    }
                                    sampleContainer.SampleStatus = 0;
                                    lstSampleDetails.Add(sampleContainer);

                                }

                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstSampleDetails;
            }
        }
        #endregion


        #region getTestListsByMrdNo
        /// <summary>
        /// Table - LabTestList,childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getTestListsByMrdNo")]
        [HttpGet]
        public List<LabTestList> getTestListsByMrdNo(string mrdNo)
        {
            List<LabTestList> lstTestDetails = new List<LabTestList>();
            DataTable dt = new DataTable();
            //int i = 1;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT TestCode FROM labtestlist where labtestlist.MrdNo = '" + mrdNo + "'";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabTestList labTestList = new LabTestList();
                            labTestList.TestCode = dr["TestCode"].ToString();
                            lstTestDetails.Add(labTestList);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstTestDetails;
            }

        }
        #endregion



        #region getSampleListProfileByMrdNo
        /// <summary>
        /// Table - labProfilelist,childtestlist
        /// </summary>
        /// Listed all values from labProfilelist,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getSampleListProfileByMrdNo")]
        [HttpGet]
        public List<SampleContainersByMrdNo> getSampleListProfileByMrdNo(string mrdNo)
        {
            List<SampleContainersByMrdNo> lstSampleDetails = new List<SampleContainersByMrdNo>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM childtestlist INNER JOIN labProfilelist ON childtestlist.ProfileID = labProfilelist.ProfileID where labProfilelist.MrdNo = '" + mrdNo + "'AND childtestlist.ActiveStatus=1";



                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //new
                            SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                            string mrdNoLocal = dr["MrdNo"].ToString();
                            string testcodeLocal = dr["TestCode"].ToString();
                            DataTable dts = new DataTable();
                            // int i = 1;
                            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                            {
                                string strSQLs = "SELECT * FROM SampleCollecter where MrdNo = '" + mrdNoLocal + "' and TestCode='" + testcodeLocal + "'";
                                conns.Open();
                                MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                                MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                                DataSet dss = new DataSet();
                                mydatas.Fill(dss);
                                dts = dss.Tables[0];
                                foreach (DataRow drs in dts.Rows)
                                {
                                    if (drs != null)
                                    {
                                        sampleContainer.SampleStatus = (int)drs["SampleStatus"];
                                    }
                                }
                            }
                            sampleContainer.MrdNo = dr["MrdNo"].ToString();
                            sampleContainer.TestID = (int)dr["TestID"];
                            sampleContainer.TestCode = dr["TestCode"].ToString();
                            sampleContainer.TestName = dr["TestName"].ToString();
                            sampleContainer.SampleContainer = dr["SampleContainer"].ToString();
                            lstSampleDetails.Add(sampleContainer);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstSampleDetails;
            }
        }
        #endregion


        //new Code

        #region getSampleListTestByProfileTestCode
        /// <summary>
        /// Table - labProfilelist,childtestlist
        /// </summary>
        /// Listed all values from labProfilelist,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getSampleListTestByProfileTestCode")]
        [HttpGet]
        public List<SampleContainersByMrdNo> getSampleListTestByProfileTestCode(string mrdNo, string testCode)
        {
            List<SampleContainersByMrdNo> lstSampleDetails = new List<SampleContainersByMrdNo>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM childtestlist INNER JOIN labProfilelist ON childtestlist.ProfileID = labProfilelist.ProfileID where labProfilelist.MrdNo = '"+ mrdNo + "'";

                    //string strSQL = "SELECT * FROM SampleCollecter where MrdNo = '" + mrdNo + "' and TestCode ='"+ testCode + "'";

                    string strSQL = "SELECT* FROM childtestlist Left JOIN samplecollecter ON childtestlist.TestCode = samplecollecter.TestCode where samplecollecter.MrdNo = '" + mrdNo + "'AND childtestlist.ActiveStatus=1";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();

                            sampleContainer.MrdNo = dr["MrdNo"].ToString();
                            sampleContainer.TestID = (int)dr["TestID"];
                            sampleContainer.TestCode = dr["TestCode"].ToString();
                            sampleContainer.SampleContainer = dr["SampleName"].ToString();
                            sampleContainer.SampleStatus = (int)dr["SampleStatus"];
                            lstSampleDetails.Add(sampleContainer);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstSampleDetails;
            }
        }
        #endregion


        #region insertSampleCollectTestDetails
        /// <summary>
        /// Table -  SampleCollecter
        /// Inserted the  SampleCollecter table values.
        /// </summary>
        /// <param name="SampleCollect"></param>
        [Route("api/Account/insertSampleCollectTestDetails")]
        [HttpPost]
        public void insertSampleCollectTestDetails(SampleCollect sampleCollect)
        {

            try
            {

                using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                {


                    DataTable dts = new DataTable();
                    string strSQLs = "SELECT * FROM SampleCollecter where MrdNo = '" + sampleCollect.MrdNo + "' and TestCode='" + sampleCollect.TestCode + "'";



                    conns.Open();

                    MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                    MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                    DataSet dss = new DataSet();
                    mydatas.Fill(dss);
                    dts = dss.Tables[0];
                    if (dts.Rows.Count > 0)
                    {
                        foreach (DataRow drs in dts.Rows)
                        {
                            if (drs != null)
                            {
                                string strSQL = "UPDATE  SampleCollecter SET SampleStatus='" + sampleCollect.SampleStatus + "',SampleName='" + sampleCollect.SampleName + "' where MrdNo='" + sampleCollect.MrdNo + "' && TestCode='" + sampleCollect.TestCode + "'";

                                MySqlCommand cmd = new MySqlCommand(strSQL, conns);
                                cmd.ExecuteNonQuery();

                                if (sampleCollect.SampleStatus == 1 && sampleCollect.ProfileID == 0)
                                {
                                    string strSQL1 = "UPDATE labtestlist SET IndividualStatus=2 where MrdNo='" + sampleCollect.MrdNo + "' && TestCode='" + sampleCollect.TestCode + "'";

                                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                                    cmd1.ExecuteNonQuery();
                                }

                                if (sampleCollect.SampleStatus == 1 && sampleCollect.ProfileID != 0)
                                {
                                    string strSQL1 = "UPDATE labprofilelist SET IndividualStatus=2 where MrdNo='" + sampleCollect.MrdNo + "' && ProfileID='" + sampleCollect.ProfileID + "'";

                                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                                    cmd1.ExecuteNonQuery();
                                }

                            }

                        }
                    }

                    else
                    {
                        string strSQL = "INSERT INTO SampleCollecter(TestID,TestCode,TestName,SampleStatus,MrdNo,SampleName,ProfileCode,ProfileID,ProfileName,ProfilePriority) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conns);

                        cmd.Parameters.AddWithValue("@val1", sampleCollect.TestID);
                        cmd.Parameters.AddWithValue("@val2", sampleCollect.TestCode);
                        cmd.Parameters.AddWithValue("@val3", sampleCollect.TestName);
                        cmd.Parameters.AddWithValue("@val4", sampleCollect.SampleStatus);
                        cmd.Parameters.AddWithValue("@val5", sampleCollect.MrdNo);
                        cmd.Parameters.AddWithValue("@val6", sampleCollect.SampleName);
                        cmd.Parameters.AddWithValue("@val7", sampleCollect.ProfileCode);
                        cmd.Parameters.AddWithValue("@val8", sampleCollect.ProfileID);
                        cmd.Parameters.AddWithValue("@val9", sampleCollect.ProfileName);
                        cmd.Parameters.AddWithValue("@val10", sampleCollect.ProfilePriority);
                        cmd.ExecuteNonQuery();

                        if (sampleCollect.SampleStatus == 1 && sampleCollect.ProfileID == 0)
                        {
                            string strSQL1 = "UPDATE labtestlist SET IndividualStatus=2 where MrdNo='" + sampleCollect.MrdNo + "' && TestCode='" + sampleCollect.TestCode + "'";

                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                            cmd1.ExecuteNonQuery();
                        }
                        if (sampleCollect.SampleStatus == 1 && sampleCollect.ProfileID != 0)
                        {
                            string strSQL1 = "UPDATE labprofilelist SET IndividualStatus=2 where MrdNo='" + sampleCollect.MrdNo + "' && ProfileID='" + sampleCollect.ProfileID + "'";

                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                            cmd1.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (Exception Ex)
            {
                string logdetails = Ex.InnerException.ToString();
            }

        }
        #endregion


        #region updateSampleCollectTestDetails
        /// <summary>
        /// Table -  SampleCollecter
        /// Inserted the  SampleCollecter table values.
        /// </summary>
        /// <param name="SampleCollect"></param>
        [Route("api/Account/updateSampleCollectTestDetails")]
        [HttpPost]
        public void updateSampleCollectTestDetails(SampleCollect sampleCollect)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                    {


                        DataTable dts = new DataTable();
                        string strSQLs = "SELECT * FROM SampleCollecter where MrdNo = '" + sampleCollect.MrdNo + "' and TestCode='" + sampleCollect.TestCode + "'";



                        conns.Open();
                        conn.Open();
                        MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                        MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                        DataSet dss = new DataSet();
                        mydatas.Fill(dss);
                        dts = dss.Tables[0];
                        if (dts.Rows.Count > 0)
                        {
                            foreach (DataRow drs in dts.Rows)
                            {
                                if (drs != null)
                                {
                                    string strSQL = "UPDATE  SampleCollecter SET SampleStatus='" + sampleCollect.SampleStatus + "' where MrdNo='" + sampleCollect.MrdNo + "' && TestCode='" + sampleCollect.TestCode + "'";

                                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                                    cmd.ExecuteNonQuery();

                                    string strSQLUpdate = "UPDATE LaborderStatus SET LabStatus='1' where MrdNo='" + sampleCollect.MrdNo + "'";

                                    MySqlCommand cmdUpdate = new MySqlCommand(strSQLUpdate, conn);
                                    cmdUpdate.CommandType = CommandType.Text;
                                    cmdUpdate.ExecuteNonQuery();
                                }

                            }
                        }


                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region getSampleListByMrdNoforLabTech
        /// <summary>
        /// Table - LabTestList,childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getSampleListByMrdNoforLabTech")]
        [HttpGet]
        public List<LabTechGrid> getSampleListByMrdNoforLabTech(string mrdNo)
        {
            List<LabTechGrid> lstLabTech = new List<LabTechGrid>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT* FROM((childtestlist INNER JOIN labtestlist ON childtestlist.TestCode = labtestlist.TestCode) INNER JOIN samplecollecter ON labtestlist.TestCode = samplecollecter.TestCode) where labtestlist.MrdNo = '" + mrdNo + "'";
                    string strSQL = "SELECT* FROM labtestlist where MrdNo = '" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabTechGrid labTech = new LabTechGrid();

                            labTech.TestID = (int)dr["TestID"];
                            labTech.TestCode = dr["TestCode"].ToString();
                            //  labTech.SampleName = dr["SampleName"].ToString();
                            labTech.TestName = dr["TestName"].ToString();
                            labTech.IndividualStatus = (int)dr["IndividualStatus"];
                            lstLabTech.Add(labTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabTech;
            }
        }
        #endregion


        #region getSampleListProfileByMrdNoForLabTech
        /// <summary>
        /// Table - labProfilelist,childtestlist
        /// </summary>
        /// Listed all values from labProfilelist,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getSampleListProfileByMrdNoForLabTech")]
        [HttpGet]
        public List<SampleContainersByMrdNo> getSampleListProfileByMrdNoForLabTech(string mrdNo)
        {
            List<SampleContainersByMrdNo> lstSampleDetails = new List<SampleContainersByMrdNo>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM childtestlist INNER JOIN labProfilelist ON childtestlist.ProfileID = labProfilelist.ProfileID where labProfilelist.MrdNo = '" + mrdNo + "' AND childtestlist.ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();

                            sampleContainer.TestID = (int)dr["TestID"];
                            sampleContainer.TestCode = dr["TestCode"].ToString();
                            sampleContainer.SampleContainer = dr["SampleContainer"].ToString();
                            lstSampleDetails.Add(sampleContainer);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstSampleDetails;
            }
        }
        #endregion



        //Get All Details from Progress Table

        #region LAB TEST LIST
        #region InsertBoneMarrowDetails
        /// <summary>
        /// Table - boneMarrowAspiration
        /// </summary>
        /// <param name="boneMarrowAspiration"></param>
        [Route("api/Account/InsertBoneMarrowDetails")]
        [HttpPost]
        public void InsertBoneMarrowDetails(BoneMarrowAspiration boneMarrowAspiration)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    int coutDetails = 0;
                    string fetch = "Select count(Id) from boneMarrowAspiration where Id='" + boneMarrowAspiration.Id + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(fetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            coutDetails = Convert.ToInt32(dr[0]);
                        }
                    }
                    if (coutDetails == 0)
                    {
                        string strSQL = "INSERT INTO boneMarrowAspiration(id_MrdNumber,SampleId_mrdnumber,ClinicalFindings,PeripheralBloodFindings,BoneMarrowNumber,Cellularity,Erythropoiesis,Myelopoiesis,M_E,Eosinophils,Lymphocytes,PlasmaCells,Blasts,Megakaryocytes,Others,Perl_sIronStain,Impression,Advice,Status) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16,@val17,@val18,@val19)";
                        conn.Open();
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", boneMarrowAspiration.id_MrdNumber);
                        cmd.Parameters.AddWithValue("@val2", boneMarrowAspiration.SampleId_mrdnumber);
                        cmd.Parameters.AddWithValue("@val3", boneMarrowAspiration.ClinicalFindings);
                        cmd.Parameters.AddWithValue("@val4", boneMarrowAspiration.PeripheralBloodFindings);
                        cmd.Parameters.AddWithValue("@val5", boneMarrowAspiration.BoneMarrowNumber);
                        cmd.Parameters.AddWithValue("@val6", boneMarrowAspiration.Cellularity);
                        cmd.Parameters.AddWithValue("@val7", boneMarrowAspiration.Erythropoiesis);
                        cmd.Parameters.AddWithValue("@val8", boneMarrowAspiration.Myelopoiesis);
                        cmd.Parameters.AddWithValue("@val9", boneMarrowAspiration.M_E);
                        cmd.Parameters.AddWithValue("@val10", boneMarrowAspiration.Eosinophils);
                        cmd.Parameters.AddWithValue("@val11", boneMarrowAspiration.Lymphocytes);
                        cmd.Parameters.AddWithValue("@val12", boneMarrowAspiration.PlasmaCells);
                        cmd.Parameters.AddWithValue("@val13", boneMarrowAspiration.Blasts);
                        cmd.Parameters.AddWithValue("@val14", boneMarrowAspiration.Megakaryocytes);
                        cmd.Parameters.AddWithValue("@val15", boneMarrowAspiration.Others);
                        cmd.Parameters.AddWithValue("@val16", boneMarrowAspiration.Perl_sIronStain);
                        cmd.Parameters.AddWithValue("@val17", boneMarrowAspiration.Impression);
                        cmd.Parameters.AddWithValue("@val18", boneMarrowAspiration.Advice);
                        cmd.Parameters.AddWithValue("@val19", boneMarrowAspiration.Status);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllfromBoneMarrowAspiration
        /// <summary>
        /// Table - bonemarrowaspiration
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        [Route("api/Account/getAllfromBoneMarrowAspiration")]
        [HttpGet]
        public List<BoneMarrowAspiration> getAllfromBoneMarrowAspiration()
        {
            List<BoneMarrowAspiration> lstboneMarrowAspiration = new List<BoneMarrowAspiration>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            BoneMarrowAspiration boneMarrowAspiration = new BoneMarrowAspiration();
                            boneMarrowAspiration.Id = (int)dr["Id"];
                            boneMarrowAspiration.id_MrdNumber = dr["id_MrdNumber"].ToString();
                            boneMarrowAspiration.SampleId_mrdnumber = dr["SampleId_mrdnumber"].ToString();
                            boneMarrowAspiration.ClinicalFindings = dr["ClinicalFindings"].ToString();
                            boneMarrowAspiration.PeripheralBloodFindings = dr["PeripheralBloodFindings"].ToString();
                            boneMarrowAspiration.BoneMarrowNumber = dr["BoneMarrowNumber"].ToString();
                            boneMarrowAspiration.Cellularity = dr["Cellularity"].ToString();
                            boneMarrowAspiration.Erythropoiesis = dr["Erythropoiesis"].ToString();
                            boneMarrowAspiration.Myelopoiesis = dr["Myelopoiesis"].ToString();
                            boneMarrowAspiration.M_E = dr["M_E"].ToString();
                            boneMarrowAspiration.Eosinophils = dr["Eosinophils"].ToString();
                            boneMarrowAspiration.Lymphocytes = dr["Lymphocytes"].ToString();
                            boneMarrowAspiration.PlasmaCells = dr["PlasmaCells"].ToString();
                            boneMarrowAspiration.Blasts = dr["Blasts"].ToString();
                            boneMarrowAspiration.Megakaryocytes = dr["Megakaryocytes"].ToString();
                            boneMarrowAspiration.Others = dr["Others"].ToString();
                            boneMarrowAspiration.Perl_sIronStain = dr["Perl_sIronStain"].ToString();
                            boneMarrowAspiration.Impression = dr["Impression"].ToString();
                            boneMarrowAspiration.Status = dr["Status"].ToString();
                            lstboneMarrowAspiration.Add(boneMarrowAspiration);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstboneMarrowAspiration;
            }
        }
        #endregion


        #region InsertPapSmear
        /// <summary>
        /// table - papsmear
        /// </summary>
        /// <param name="papSmear"></param>
        [Route("api/Account/InsertPapSmear")]
        [HttpPost]
        public void InsertPapSmear(PaPSmear papSmear)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO papsmear(id_MrdNumber,SampleId_mrdnumber,Cytologynumber,Numberofsildes,Reportingsystem,Specimentype,SpecimenAdequacy,NonNeoplasticFindings,withoutCol1,withoutCol2,Organisms,withoutCol3,Others,EpithelialcellAbnormalities,withoutCol4,Interpretation,Educationalnotesandcomments,Status) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16,@val17,@val18)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", papSmear.id_MrdNumber);
                    cmd.Parameters.AddWithValue("@val2", papSmear.SampleId_mrdnumber);
                    cmd.Parameters.AddWithValue("@val3", papSmear.Cytologynumber);
                    cmd.Parameters.AddWithValue("@val4", papSmear.Numberofsildes);
                    cmd.Parameters.AddWithValue("@val5", papSmear.Reportingsystem);
                    cmd.Parameters.AddWithValue("@val6", papSmear.Specimentype);
                    cmd.Parameters.AddWithValue("@val7", papSmear.SpecimenAdequacy);
                    cmd.Parameters.AddWithValue("@val8", papSmear.NonNeoplasticFindings);
                    cmd.Parameters.AddWithValue("@val9", papSmear.withoutCol1);
                    cmd.Parameters.AddWithValue("@val10", papSmear.withoutCol2);
                    cmd.Parameters.AddWithValue("@val11", papSmear.Organisms);
                    cmd.Parameters.AddWithValue("@val12", papSmear.withoutCol3);
                    cmd.Parameters.AddWithValue("@val13", papSmear.Others);
                    cmd.Parameters.AddWithValue("@val14", papSmear.EpithelialcellAbnormalities);
                    cmd.Parameters.AddWithValue("@val15", papSmear.withoutCol4);
                    cmd.Parameters.AddWithValue("@val16", papSmear.Interpretation);
                    cmd.Parameters.AddWithValue("@val17", papSmear.Educationalnotesandcomments);
                    cmd.Parameters.AddWithValue("@val18", papSmear.Status);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #endregion
        #region getAllfromProgressTable
        /// <summary>
        /// Table - progresstable
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        [Route("api/Account/getAllfromProgressTable")]
        [HttpGet]
        public List<ProgressTable> getAllfromProgressTable()
        {
            List<ProgressTable> lstProgressTablelist = new List<ProgressTable>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  progresstable";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ProgressTable progresstable = new ProgressTable();
                            progresstable.Id = (int)dr["Id"];
                            progresstable.ProgressName = dr["ProgressName"].ToString();
                            progresstable.ProgressValue = dr["ProgressValue"].ToString();
                            progresstable.MrdNumber = dr["MrdNumber"].ToString();
                            lstProgressTablelist.Add(progresstable);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProgressTablelist;
            }
        }
        #endregion

        #region updateMrdNumberforProgress
        /// <summary>
        /// Table - progresstable
        /// Update MrdNo to progresstable tables
        /// </summary>
        /// <param name="progressTable"></param>
        [Route("api/Account/updateMrdNumberforProgress")]
        [HttpPost]
        public void updateMrdNumberforProgress(ProgressTable progressTable)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  progresstable SET MrdNumber='" + progressTable.MrdNumber + "' where Id='" + progressTable.Id + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion



        #region getGroupDetailsbyGroupNameBySearch
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupDetailsbyGroupNameBySearch")]
        [HttpGet]
        public List<Invoice> getGroupDetailsbyGroupNameBySearch(string groupname)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Invoice  where Action LIKE'GRP-%" + groupname + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion



        #region getGroupDetailsbyHospitalNameBySearch
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupDetailsbyHospitalNameBySearch")]
        [HttpGet]
        public List<Invoice> getGroupDetailsbyHospitalNameBySearch(string hospitalname)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Invoice  where HospitalName =  '" + hospitalname + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion




        #region getGroupDetailsbyGroupNameAndDate
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupDetailsbyGroupNameAndDate")]
        [HttpGet]
        public List<Invoice> getGroupDetailsbyGroupNameAndDate(string groupname, string Fromdate, string Todate)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "Select* FROM  invoice where Action = 'GRP-" + groupname + "' && InvoiceDate Between '" + Fromdate + "' AND '" + Todate + "'";


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion



        #region getHospitalDetailsbyHospitalNameAndDate
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getHospitalDetailsbyHospitalNameAndDate")]
        [HttpGet]
        public List<Invoice> getHospitalDetailsbyHospitalNameAndDate(string Fromdate, string Todate, string hospitalname)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "Select* FROM  invoice  where ProviderHostName= '" + hospitalname + "' AND InvoiceDate Between '" + Fromdate + "' AND '" + Todate + "'";

                    //string strSQL = "SELECT * FROM  Invoice  where Action LIKE'GRP-%" + groupname + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();
                            invoice.ProviderHostName = dr["ProviderHostName"].ToString();
                            invoice.InvoiceDate = dr["InvoiceDate"].ToString();
                            invoice.PaymentType = dr["PaymentType"].ToString();
                            InvoiceDetailsList.Add(invoice);



                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion


        #region getInsuranceDetailsbyInsuranceNameAndDate
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getInsuranceDetailsbyInsuranceNameAndDate")]
        [HttpGet]
        public List<Invoice> getInsuranceDetailsbyInsuranceNameAndDate(string Fromdate, string Todate, string insurancename)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "Select* FROM  invoice  where ProviderHostName = '" + insurancename + "' AND InvoiceDate Between '" + Fromdate + "' AND '" + Todate + "'";

                    //string strSQL = "SELECT * FROM  Invoice  where Action LIKE'GRP-%" + groupname + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion

        #region getInsuranceDetailsbyInsunanceNameBySearch
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getInsuranceDetailsbyInsunanceNameBySearch")]
        [HttpGet]
        public List<Invoice> getInsuranceDetailsbyInsunanceNameBySearch(string insurancename)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Invoice  where Action LIKE'%INS-" + insurancename + "'";
                    string strSQL = "SELECT * FROM  Invoice  where  ProviderHostName ='" + insurancename + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();

                            invoice.ProviderHostName = dr["ProviderHostName"].ToString();
                            invoice.InvoiceDate = dr["InvoiceDate"].ToString();
                            invoice.PaymentType = dr["PaymentType"].ToString();
                            InvoiceDetailsList.Add(invoice);



                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion

        #region getHospitalDetailsbyHospitalNameBySearch
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getHospitalDetailsbyHospitalNameBySearch")]
        [HttpGet]
        public List<Invoice> getHospitalDetailsbyHospitalNameBySearch(string hospitalname)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Invoice  where Action LIKE'%OHP-" + hospitalname + "'";
                    string strSQL = "SELECT * FROM  Invoice  where ProviderHostName ='" + hospitalname + "'";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();
                            invoice.ProviderHostName = dr["ProviderHostName"].ToString();
                            invoice.InvoiceDate = dr["InvoiceDate"].ToString();
                            invoice.PaymentType = dr["PaymentType"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion


        #region getGenerateInvoiceForGroup
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getGenerateInvoiceForGroup")]
        [HttpGet]
        public List<GroupGenerateInvoice> getGenerateInvoiceForGroup(string Mrdno)
        {
            List<GroupGenerateInvoice> lstgenerateInvoiceDetails = new List<GroupGenerateInvoice>();



            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //  string strSQL = "SELECT lo.PatientName, ls.MrdNo, ls.LabStatus FROM  laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo where ls.LabStatus = 'Inprogress'";

                    // string strSQL = "SELECT pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus, pr.Age, pr.Sex FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) where ls.LabStatus = 'Inprogress'";
                    string strSQL = "SELECT* FROM((Invoice INNER JOIN labtestlist ON labtestlist.MrdNo = Invoice.MrdNo INNER JOIN labprofilelist ON labprofilelist.MrdNo = Invoice.MrdNo)) where Invoice.MrdNo = '" + Mrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            GroupGenerateInvoice groupdetails = new GroupGenerateInvoice();



                            groupdetails.PatientName = dr["PatientName"].ToString();
                            groupdetails.PaidAmount = dr["PaidAmount"].ToString();
                            groupdetails.ProfileCode = dr["ProfileCode"].ToString();
                            groupdetails.TestCode = dr["TestCode"].ToString();
                            groupdetails.RegID = (int)dr["RegID"];
                            groupdetails.Amount = dr["Amount"].ToString();
                            groupdetails.Action = dr["Action"].ToString();

                            lstgenerateInvoiceDetails.Add(groupdetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstgenerateInvoiceDetails;
            }
        }
        #endregion




        //insertCommanSampleContainer
        #region insertCommonSampleContainer
        /// <summary>
        /// Table - CommanSampleContainer
        /// </summary>
        /// Inserted the CommanSampleContainer table values.
        /// <param name="commonSampleContainer"></param>
        [Route("api/Account/insertCommonSampleContainer")]
        [HttpPost]
        public void insertCommanSampleContainer(CommonSampleContainer commonSampleContainer)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO CommonSampleContainer(SampleName,SampleTrunAroundTime) VALUES(@val1,@val2)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", commonSampleContainer.SampleName);
                    cmd.Parameters.AddWithValue("@val2", commonSampleContainer.SampleTrunAroundTime);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        //getAllCommonSampleContainer


        #region getAllCommonSampleContainer
        /// <summary>
        /// Table - CommonSampleContainer
        /// </summary>
        /// Listed all values from CommonSampleContainer table
        /// <returns></returns>
        [Route("api/Account/getAllCommonSampleContainer")]
        [HttpGet]
        public List<CommonSampleContainer> getAllCommonSampleContainer()
        {
            List<CommonSampleContainer> lstCommanSampleContainer = new List<CommonSampleContainer>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  CommonSampleContainer";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CommonSampleContainer CommonSampleContainers = new CommonSampleContainer();

                            CommonSampleContainers.SampleContainerId = (int)dr["SampleContainerId"];
                            CommonSampleContainers.SampleName = dr["SampleName"].ToString();
                            CommonSampleContainers.SampleTrunAroundTime = dr["SampleTrunAroundTime"].ToString();

                            lstCommanSampleContainer.Add(CommonSampleContainers);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCommanSampleContainer;
            }
        }
        #endregion

        #region getAllCultures
        /// <summary>      
        /// </summary>      
        /// <returns></returns>
        [Route("api/Account/getAllCultures")]
        [HttpGet]
        public List<CultureMaster> getAllCultures()
        {
            List<CultureMaster> lstCulture = new List<CultureMaster>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  culturemaster";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CultureMaster Cultures = new CultureMaster();
                            Cultures.CultureID = Convert.ToInt32(dr["CultureID"].ToString());
                            Cultures.CultureName = (dr["CultureName"].ToString());
                            lstCulture.Add(Cultures);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCulture;
            }
        }
        #endregion
        #region insertCultureMaster
        /// <summary>        
        /// <param name="CultureMaster"></param>
        [Route("api/Account/insertCultureMaster")]
        [HttpPost]
        public void insertCultureMaster(CultureMaster culture)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO culturemaster(CultureName) VALUES(@val1)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", culture.CultureName);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        //insertCommanSampleContainer
        #region insertCommonMethodology
        /// <summary>
        /// Table - CommonMethodology
        /// </summary>
        /// Inserted the CommonMethodology table values.
        /// <param name="commonSampleContainer"></param>
        [Route("api/Account/insertCommonMethodology")]
        [HttpPost]
        public void insertCommonMethodology(CommonMethodology commonMethodology)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO CommonMethodology(CommonMethodologyName) VALUES(@val1)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", commonMethodology.CommonMethodologyName);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        //getAllCommonSampleContainer


        #region getAllCommonMethodology
        /// <summary>
        /// Table - CommonMethodology
        /// </summary>
        /// Listed all values from CommonMethodology table
        /// <returns></returns>
        [Route("api/Account/getAllCommonMethodology")]
        [HttpGet]
        public List<CommonMethodology> getAllCommonMethodology()
        {
            List<CommonMethodology> lstCommonMethodology = new List<CommonMethodology>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  CommonMethodology";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CommonMethodology commonMethodology = new CommonMethodology();

                            commonMethodology.CommonMethodologyId = (int)dr["CommonMethodologyId"];
                            commonMethodology.CommonMethodologyName = dr["CommonMethodologyName"].ToString();

                            lstCommonMethodology.Add(commonMethodology);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCommonMethodology;
            }
        }
        #endregion


        //distinct sample for profile

        #region getProfileListByMrdNoDistinct
        /// <summary>
        /// Table - LabProfileList
        /// </summary>
        /// Listed all values from LabProfileList table
        /// <returns></returns>
        [Route("api/Account/getProfileListByMrdNoDistinct")]
        [HttpGet]
        public List<ProfileSampleContainer> getProfileListByMrdNoDistinct(string mrdNo, int profileID, string profileCode, string profileName)
        {
            List<ProfileSampleContainer> lstLabProfileDetailsDistinct = new List<ProfileSampleContainer>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT DISTINCT SampleContainer FROM  labprofilelist inner join childtestlist on childtestlist.ProfileID = '" + profileID + "' where MrdNo = '" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ProfileSampleContainer profileSampleContainer = new ProfileSampleContainer();

                            profileSampleContainer.ProfileName = profileName;
                            profileSampleContainer.ProfileCode = profileCode;
                            profileSampleContainer.ProfileID = profileID;
                            profileSampleContainer.MrdNo = mrdNo;
                            profileSampleContainer.SampleName = dr["SampleContainer"].ToString();
                            lstLabProfileDetailsDistinct.Add(profileSampleContainer);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabProfileDetailsDistinct;
            }
        }
        #endregion


        #region getProfileByProfileID
        /// <summary>
        /// Table - LabTestList,childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getProfileByProfileID")]
        [HttpGet]
        public List<MasterProfileList> getProfileByProfileID(string profileID)
        {
            List<MasterProfileList> lstProfileList = new List<MasterProfileList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT* FROM masterprofilelist where profileID = '" + profileID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MasterProfileList masterProfileList = new MasterProfileList();

                            masterProfileList.ProfileID = (int)dr["ProfileID"];
                            masterProfileList.ProfileName = dr["ProfileName"].ToString();
                            masterProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            //masterProfileList.TestName = dr["TestName"].ToString();
                            //masterProfileList.SampleStatus = (int)dr["SampleStatus"];
                            lstProfileList.Add(masterProfileList);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfileList;
            }
        }
        #endregion



        ///new for profileID wise Test
        ///
           #region getProfileIdWiseTest
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getProfileIdWiseTest")]
        [HttpGet]
        public List<ChildTestList> getProfileIdWiseTest(string profileID)
        {
            List<ChildTestList> lstChildTest = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT* FROM childtestlist where profileID = '" + profileID + "' AND ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTest = new ChildTestList();

                            childTest.ProfileID = (int)dr["ProfileID"];
                            childTest.TestID = (int)dr["TestID"];
                            childTest.TestCode = dr["TestCode"].ToString();
                            childTest.TestName = dr["TestName"].ToString();
                            childTest.units = dr["units"].ToString();
                            //childTest.Priority = (int)dr["Priority"];
                            lstChildTest.Add(childTest);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTest;
            }
        }
        #endregion

        ///age Reference
        #region getAgeReferenceTestDetails
        /// <summary>
        /// Table - agegenderwisereference
        /// </summary>
        /// Listed all values from agegenderwisereference table by testCode
        /// <returns></returns>
        [Route("api/Account/getAgeReferenceTestDetails")]
        [HttpGet]
        public List<AgewiseReference> getAgeReferenceTestDetails(string testCode, string ageRange)
        {
            List<AgewiseReference> lstChildTest = new List<AgewiseReference>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT " + ageRange + " FROM  agegenderwisereference where TestCode = '" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            AgewiseReference agewiseReference = new AgewiseReference();
                            agewiseReference.RequiredField = dr[0].ToString();
                            lstChildTest.Add(agewiseReference);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTest;
            }
        }
        #endregion






        #region getAllTestList
        /// <summary>
        /// Table - masterprofilelist
        /// </summary>
        /// Listed all values from masterprofilelist table
        /// <returns></returns>
        [Route("api/Account/getAllTestList")]
        [HttpGet]
        public List<ChildTestList> getAllTestList()
        {
            List<ChildTestList> lstTest = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (
                MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  childtestlist where ActiveStatus=1 order by ProfilePriority";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {

                        if (dr != null)
                        {
                            ChildTestList testList = new ChildTestList();

                            testList.TestID = (int)dr["TestID"];
                            testList.TestCode = dr["TestCode"].ToString();
                            testList.TestName = dr["TestName"].ToString();
                            lstTest.Add(testList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstTest;
            }
        }
        #endregion


        #region insertTestdetailsinMasterProfileList
        /// <summary>
        /// Table - MasterProfileList
        /// </summary>
        ///
        /// <param name="masterProfileList"></param>
        [Route("api/Account/insertTestdetailsinMasterProfileList")]
        [HttpPost]
        public void insertTestdetailsinMasterProfileList(MasterProfileList masterProfileList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //  ChildTestList.ProfileID = 1;
                    string ProfileCode = "";
                    string fetch = "Select Max(ProfileCode) from MasterProfileList";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(fetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ProfileCode = dr[0].ToString();

                        }
                        if (ProfileCode.Trim() != "")
                        {
                            var tempArray = ProfileCode.Split('P');
                            string tempId1 = tempArray[1];

                            var tempArray2 = tempId1.Split('R');
                            string tempId = tempArray2[1];
                            int id = Convert.ToInt32(tempId);
                            id = id + 1;
                            ProfileCode = "PR" + String.Format("{0:000}", id);
                        }
                        else
                        {
                            ProfileCode = "PR" + String.Format("{0:000}", 1);
                        }
                    }




                    DateTime today = DateTime.Today;
                    masterProfileList.CreateDate = today.ToShortDateString();
                    string strSQL = "INSERT INTO MasterProfileList(ProfileName,Amount,CreateDate,ProfileCode) VALUES(@val1,@val2,@val3,@val4)";
                    //   conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", masterProfileList.ProfileName);
                    cmd.Parameters.AddWithValue("@val2", masterProfileList.Amount);
                    cmd.Parameters.AddWithValue("@val3", masterProfileList.CreateDate);
                    cmd.Parameters.AddWithValue("@val4", ProfileCode);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getAllProfilesIdByMax
        /// <summary>
        /// Table - masterprofilelist
        /// </summary>
        /// Listed all values from masterprofilelist table
        /// <returns></returns>
        [Route("api/Account/getAllProfilesIdByMax")]
        [HttpGet]
        public MasterProfileList getAllProfilesIdByMax()
        {
            MasterProfileList masterProfileList = new MasterProfileList();
            // MasterProfileList lstProfiles = new MasterProfileList();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT max(ProfileID) FROM  masterprofilelist";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {


                            masterProfileList.ProfileID = (int)dr["max(ProfileID)"];
                            //masterProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            //masterProfileList.ProfileName = dr["ProfileName"].ToString();

                            // lstProfiles.Add(masterProfileList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return masterProfileList;
            }
        }
        #endregion

        #region updateMasterProfileID
        /// <summary>
        /// Table - Invoice
        /// Inserted the invoiceview table values. The reg ID reffered from patientregistration table.
        /// </summary>
        /// <param name="childTestList"></param>
        [Route("api/Account/updateMasterProfileID")]
        [HttpPost]
        public void updateMasterProfileID(ChildTestList updateTest)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Today;

                    string strSQL = "UPDATE childtestlist SET ProfileID = '" + updateTest.ProfileID + "',ProfilePriority = '" + updateTest.Sno + "'  WHERE TestID = '" + updateTest.TestID + "' AND ActiveStatus=1";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion




        #region InsertAgewiseReferences
        /// <summary>
        /// table - AgeReferenceRange
        /// </summary>
        /// <param name="AgewiseReferenceRange"></param>
        [Route("api/Account/InsertAgewiseReferences")]
        [HttpPost]
        public void InsertAgewiseReferences(AgewiseReferenceRange agewiseReferenceRange)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO agegenderwisereference(TestCode,Parameter,Birth,3Days,1Week,2Weeks,1Month,2Months,6Months,1year,6years,12years,Men,Women) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", agewiseReferenceRange.TestCode);
                    cmd.Parameters.AddWithValue("@val2", agewiseReferenceRange.Parameter);
                    cmd.Parameters.AddWithValue("@val3", agewiseReferenceRange.Birth);
                    cmd.Parameters.AddWithValue("@val4", agewiseReferenceRange.Days3);
                    cmd.Parameters.AddWithValue("@val5", agewiseReferenceRange.Week1);
                    cmd.Parameters.AddWithValue("@val6", agewiseReferenceRange.Weeks2);
                    cmd.Parameters.AddWithValue("@val7", agewiseReferenceRange.Month1);
                    cmd.Parameters.AddWithValue("@val8", agewiseReferenceRange.Months2);
                    cmd.Parameters.AddWithValue("@val9", agewiseReferenceRange.Months6);
                    cmd.Parameters.AddWithValue("@val10", agewiseReferenceRange.year1);
                    cmd.Parameters.AddWithValue("@val11", agewiseReferenceRange.years6);
                    cmd.Parameters.AddWithValue("@val12", agewiseReferenceRange.years12);
                    cmd.Parameters.AddWithValue("@val13", agewiseReferenceRange.Men);
                    cmd.Parameters.AddWithValue("@val14", agewiseReferenceRange.Women);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion


        #region InsertAgewiseCricticalValue
        /// <summary>
        /// table -  AgewiseCricticalValue
        /// </summary>
        /// <param name=" AgewiseCricticalValue"></param>
        [Route("api/Account/InsertAgewiseCricticalValue")]
        [HttpPost]
        public void InsertAgewiseCricticalValue(AgewiseCricticalValue agewiseCricticalValue)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO agewisecricticalvalue(TestCode,Parameter,Birth,3Days,1Week,2Weeks,1Month,2Months,6Months,1year,6years,12years,Men,Women) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", agewiseCricticalValue.TestCode);
                    cmd.Parameters.AddWithValue("@val2", agewiseCricticalValue.Parameter);
                    cmd.Parameters.AddWithValue("@val3", agewiseCricticalValue.Birth);
                    cmd.Parameters.AddWithValue("@val4", agewiseCricticalValue.Days3);
                    cmd.Parameters.AddWithValue("@val5", agewiseCricticalValue.Week1);
                    cmd.Parameters.AddWithValue("@val6", agewiseCricticalValue.Weeks2);
                    cmd.Parameters.AddWithValue("@val7", agewiseCricticalValue.Month1);
                    cmd.Parameters.AddWithValue("@val8", agewiseCricticalValue.Months2);
                    cmd.Parameters.AddWithValue("@val9", agewiseCricticalValue.Months6);
                    cmd.Parameters.AddWithValue("@val10", agewiseCricticalValue.year1);
                    cmd.Parameters.AddWithValue("@val11", agewiseCricticalValue.years6);
                    cmd.Parameters.AddWithValue("@val12", agewiseCricticalValue.years12);
                    cmd.Parameters.AddWithValue("@val13", agewiseCricticalValue.Men);
                    cmd.Parameters.AddWithValue("@val14", agewiseCricticalValue.Women);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion





        #region InsertPragancyReferancyRange
        /// <summary>
        /// table - PragancyReferancyRange
        /// </summary>
        /// <param name="pragancyReferancyRange"></param>
        [Route("api/Account/InsertPragancyReferancyRange")]
        [HttpPost]
        public void InsertPragancyReferancyRange(PragancyReferancyRange pragancyReferancyRange)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO pregnancyreferencerange(TestCode,Parameter,FirstTrimester,SecondTrimester,ThirdTrimester) VALUES(@val1,@val2,@val3,@val4,@val5 )";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", pragancyReferancyRange.TestCode);
                    cmd.Parameters.AddWithValue("@val2", pragancyReferancyRange.Parameter);
                    cmd.Parameters.AddWithValue("@val3", pragancyReferancyRange.FirstTrimester);
                    cmd.Parameters.AddWithValue("@val4", pragancyReferancyRange.SecondTrimester);
                    cmd.Parameters.AddWithValue("@val5", pragancyReferancyRange.ThirdTrimester);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion









        #region getMaxTestCode
        /// <summary>
        /// Table - masterprofilelist
        /// </summary>
        /// Listed all values from masterprofilelist table
        /// <returns></returns>
        [Route("api/Account/getMaxTestCode")]
        [HttpGet]
        public ChildTestList getMaxTestCode()
        {
            ChildTestList childTest = new ChildTestList();
            // MasterProfileList lstProfiles = new MasterProfileList();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "Select Max(TestCode) from ChildTestList where ActiveStatus = 1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {


                            childTest.TestCode = dr[0].ToString();

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return childTest;
            }
        }
        #endregion



        //sample Collect 27/11

        #region getSampleStatusLabTest
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getSampleStatusLabTest")]
        [HttpGet]
        public int getSampleStatusLabTest(string mrdNo)
        {
            int count = 0;

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = " SELECT * FROM samplecollecter Inner Join labtestlist on samplecollecter.TestCode = labtestlist.TestCode where samplecollecter.MrdNo = '" + mrdNo + "' and samplecollecter.SampleStatus != 1; ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion




        #region getSampleStatusLabProfile
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getSampleStatusLabProfile")]
        [HttpGet]
        public int getSampleStatusLabProfile(string mrdNo)
        {
            int count = 0;

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = " SELECT * FROM samplecollecter Inner Join labprofilelist on samplecollecter.ProfileCode = labprofilelist.ProfileCode where samplecollecter.MrdNo = '" + mrdNo + "' and samplecollecter.SampleStatus != 1;";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion




        #region updateLabSampleStatus
        /// <summary>
        /// Table - Invoice
        /// Inserted the invoiceview table values. The reg ID reffered from patientregistration table.
        /// </summary>
        /// <param name="LaborderStatus"></param>
        [Route("api/Account/updateLabSampleStatus")]
        [HttpPost]
        public void updateLabSampleStatus(string mrdNo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE LaborderStatus SET SampleStatus='1' where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion



        #region getBoneMarrowResultByMrdNo
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getBoneMarrowResultByMrdNo")]
        [HttpGet]
        public List<BoneMarrowAspiration> getBoneMarrowResultByMrdNo(string mrdNo)
        {
            List<BoneMarrowAspiration> lstBoneMarrow = new List<BoneMarrowAspiration>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  bonemarrowaspiration Where id_MrdNumber='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {



                            BoneMarrowAspiration boneMarrowAspiration = new BoneMarrowAspiration();

                            boneMarrowAspiration.ClinicalFindings = dr["ClinicalFindings"].ToString();
                            boneMarrowAspiration.PeripheralBloodFindings = dr["PeripheralBloodFindings"].ToString();
                            boneMarrowAspiration.BoneMarrowNumber = dr["BoneMarrowNumber"].ToString();
                            boneMarrowAspiration.Cellularity = dr["Cellularity"].ToString();
                            boneMarrowAspiration.Erythropoiesis = dr["Erythropoiesis"].ToString();
                            boneMarrowAspiration.Myelopoiesis = dr["Myelopoiesis"].ToString();
                            boneMarrowAspiration.M_E = dr["M_E"].ToString();
                            boneMarrowAspiration.Eosinophils = dr["Eosinophils"].ToString();
                            boneMarrowAspiration.Lymphocytes = dr["Lymphocytes"].ToString();
                            boneMarrowAspiration.PlasmaCells = dr["PlasmaCells"].ToString();
                            boneMarrowAspiration.Blasts = dr["Blasts"].ToString();
                            boneMarrowAspiration.Megakaryocytes = dr["Megakaryocytes"].ToString();
                            boneMarrowAspiration.Others = dr["Others"].ToString();
                            boneMarrowAspiration.Perl_sIronStain = dr["Perl_sIronStain"].ToString();
                            boneMarrowAspiration.Impression = dr["Impression"].ToString();
                            boneMarrowAspiration.Advice = dr["Advice"].ToString();
                            boneMarrowAspiration.Status = dr["Status"].ToString();
                            lstBoneMarrow.Add(boneMarrowAspiration);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstBoneMarrow;
            }
        }
        #endregion






        ////#region insertLabTechResult
        ///// <summary>
        ///// table - ResultLabTech
        ///// </summary>
        ///// <param name="resultLabTech"></param>
        //[Route("api/Account/insertLabTechResult")]
        //[HttpPost]
        //public void insertLabTechResult(ResultLabTech resultLabTech)
        //{
        //    DataTable dt = new DataTable();
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {
        //            string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "'";
        //            conn.Open();
        //            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
        //            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
        //            DataSet ds = new DataSet();
        //            mydata.Fill(ds);
        //            dt = ds.Tables[0];
        //            if (dt.Rows.Count > 0)
        //            {
        //                //string strSQL1 = "UPDATE resultlabtest SET Result = @Result, Comment1 = @Comment , Comment2 = @Notes,CreateDate = @CreateDate,Units = @Units, DefaultValues = @NormalValues, SpecialComments = @SpecialComments, StartRange = @StartRange ,EndRange = @EndRange,Methodology= @Methodology,CriticalValue=@CriticalValue,AdditionalFixedComments= @AdditionalFixedComments,DisplayValueText=@DisplayValueText Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "'";
        //                ////  conn.Open();
        //                string strSQL1 = "UPDATE resultlabtest SET Result = @Result, Comment1 = @Comment , Comment2 = @Notes , CreateDate = @CreateDate Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "'";
        //                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
        //                cmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
        //                cmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
        //                cmd1.Parameters.AddWithValue("@Notes", resultLabTech.Notes);
        //                cmd1.Parameters.AddWithValue("@CreateDate", DateTime.Now);
        //                //cmd1.Parameters.AddWithValue("@Units", resultLabTech.Units);
        //                //cmd1.Parameters.AddWithValue("@NormalValues", resultLabTech.NormalValues);
        //                //cmd1.Parameters.AddWithValue("@SpecialComments", resultLabTech.SpecialComments);
        //                //cmd1.Parameters.AddWithValue("@StartRange", resultLabTech.StartRange);
        //                //cmd1.Parameters.AddWithValue("@EndRange", resultLabTech.EndRange);
        //                //cmd1.Parameters.AddWithValue("@Methodology", resultLabTech.Methodology);
        //                //cmd1.Parameters.AddWithValue("@AdditionalFixedComments", resultLabTech.AdditionalFixedComments);
        //                //cmd1.Parameters.AddWithValue("@CriticalValue", resultLabTech.CriticalValue);
        //                //cmd1.Parameters.AddWithValue("@DisplayValueText", resultLabTech.DisplayValueText);


        //                cmd1.CommandType = CommandType.Text;
        //                cmd1.ExecuteNonQuery();

        //                if (resultLabTech.SpecialComments != null && resultLabTech.SpecialComments != "")
        //                {
        //                    strSQL1 = "UPDATE laborder SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where MrdNo='" + resultLabTech.MrdNo + "'";
        //                    cmd1 = new MySqlCommand(strSQL1, conn);
        //                    cmd1.ExecuteNonQuery();



        //                    resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(resultLabTech.MrdNo.Length - 3);
        //                    resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(0, 2);

        //                    int regIDValue = Convert.ToInt32(resultLabTech.MrdNo);


        //                    strSQL1 = "UPDATE patientregistration SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where RegID='" + regIDValue + "'";
        //                    cmd1 = new MySqlCommand(strSQL1, conn);
        //                    cmd1.ExecuteNonQuery();
        //                }

        //            }
        //            else
        //            {

        //                string strSQL1 = "INSERT INTO resultlabtest(MrdNo,TestCode,TestName,Result,Comment1,CreateDate,units,DefaultValues,Comment2,SpecialComments,StartRange,EndRange,Methodology,AdditionalFixedComments,CriticalValue,DisplayValueText,RegId,SampleContainer,ProfilePriority,FreeText,NormalValuesFiled) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16,@val17,@val18,@val19,@val20,@val21)";

        //                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
        //                cmd1.Parameters.AddWithValue("@val1", resultLabTech.MrdNo);
        //                cmd1.Parameters.AddWithValue("@val2", resultLabTech.TestCode);
        //                cmd1.Parameters.AddWithValue("@val3", resultLabTech.TestName);
        //                cmd1.Parameters.AddWithValue("@val4", resultLabTech.Result);
        //                cmd1.Parameters.AddWithValue("@val5", resultLabTech.Comment);
        //                cmd1.Parameters.AddWithValue("@val6", DateTime.Now);
        //                cmd1.Parameters.AddWithValue("@val7", resultLabTech.Units);
        //                cmd1.Parameters.AddWithValue("@val8", resultLabTech.NormalValues);
        //                cmd1.Parameters.AddWithValue("@val9", resultLabTech.Notes);
        //                cmd1.Parameters.AddWithValue("@val10", resultLabTech.SpecialComments);
        //                cmd1.Parameters.AddWithValue("@val11", resultLabTech.StartRange);
        //                cmd1.Parameters.AddWithValue("@val12", resultLabTech.EndRange);
        //                cmd1.Parameters.AddWithValue("@val13", resultLabTech.Methodology);
        //                cmd1.Parameters.AddWithValue("@val14", resultLabTech.AdditionalFixedComments);
        //                cmd1.Parameters.AddWithValue("@val15", resultLabTech.CriticalValue);
        //                cmd1.Parameters.AddWithValue("@val16", resultLabTech.DisplayValueText);
        //                cmd1.Parameters.AddWithValue("@val17", resultLabTech.RegId);
        //                cmd1.Parameters.AddWithValue("@val18", resultLabTech.SampleContainer);
        //                cmd1.Parameters.AddWithValue("@val19", resultLabTech.ProfilePriority);
        //                cmd1.Parameters.AddWithValue("@val20", resultLabTech.FreeText);
        //                cmd1.Parameters.AddWithValue("@val21", resultLabTech.NormalValuesFiled);
        //                cmd1.CommandType = CommandType.Text;
        //                cmd1.ExecuteNonQuery();

        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //    }
        //}
        //#endregion


        //add Test Validation

        #region getDuplicationSampleContainer
        /// <summary>
        /// Table - CommonSampleContainer
        /// </summary>
        /// Listed all values from CommonSampleContainer table
        /// <returns></returns>
        [Route("api/Account/getDuplicationSampleContainer")]
        [HttpGet]
        public int getDuplicationSampleContainer(string sampleName)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  CommonSampleContainer where SampleName='" + sampleName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion



        #region getDuplicationCommonMethodology
        /// <summary>
        /// Table - CommonMethodologyName
        /// </summary>
        /// Listed all values from CommonMethodologyName table
        /// <returns></returns>
        [Route("api/Account/getDuplicationCommonMethodology")]
        [HttpGet]
        public int getDuplicationCommonMethodology(string methodology)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  CommonMethodology where CommonMethodologyName='" + methodology + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region getDuplicationTestName
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from childtestlist table
        /// <returns></returns>
        [Route("api/Account/getDuplicationTestName")]
        [HttpGet]
        public int getDuplicationTestName(string testName)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  childtestlist where TestName='" + testName + "' AND ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region updateLabSampleStatusCompleted
        /// <summary>
        /// Table - Invoice
        /// Inserted the invoiceview table values. The reg ID reffered from patientregistration table.
        /// </summary>
        /// <param name="LaborderStatus"></param>
        [Route("api/Account/updateLabSampleStatusCompleted")]
        [HttpPost]
        public void updateLabSampleStatusCompleted(string mrdNo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE LaborderStatus SET LabStatus='3' where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region getallcompletedlaborderstatusforNotify
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getallcompletedlaborderstatusforNotify")]
        [HttpGet]
        public int getallcompletedlaborderstatusforNotify()
        {
            CountApprover countApprover = new CountApprover();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT count(distinct A.MrdNo) as apprCount FROM  laborderstatus as A  inner join  laborder as B " +
                                    " on A.MrdNo = B.MrdNo inner join  resultlabtest rt on rt.MrdNo = B.MrdNo where rt.confirmFlag = 1 " +
                                    " and (cast(A.LabOrderDate as date) <= (CURDATE()) and cast(A.LabOrderDate as date) >= (DATE_SUB(CURDATE(), INTERVAL 4 DAY))) " +
                                    " and A.LabStatus in (2,3) ";
                    //string strSQL = "SELECT count(*) FROM  laborderstatus as A  inner join  laborder as B on A.MrdNo=B.MrdNo where A.LabStatus=3";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    //foreach (DataRow dr in dt.Rows)
                    //{
                    //    if (dr != null)
                    //    {
                    //        countApprover.Count = Convert.ToInt32(dr[0]);
                    //    }
                    //}
                    if (dt.Rows.Count > 0)
                    {
                        countApprover.Count = Convert.ToInt32(dt.Rows[0]["apprCount"]);
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return countApprover.Count;
            }
        }
        #endregion

        #region getAllCompletedLaborderStatus
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getAllCompletedLaborderStatus")]
        [HttpGet]
        public List<PatientAllLabStatusInfo> getAllCompletedLaborderStatus()
        {
            List<PatientAllLabStatusInfo> lstpatientAllLabStatusInfo = new List<PatientAllLabStatusInfo>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName FROM  laborderstatus as A  inner join  laborder as B on A.MrdNo=B.MrdNo where A.LabStatus=3";

                    string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate, " +
                                    " (select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                    " ABS(DAY(CURDATE())-DAY(A.LabOrderDate)) as DayCount " +
                                    " FROM  laborderstatus as A inner join  laborder as B on A.MrdNo = B.MrdNo inner join  resultlabtest rt on rt.MrdNo = B.MrdNo" +
                                    " where rt.confirmFlag = 1 and A.LabStatus in (2,3) and (cast(A.LabOrderDate as date) <= (CURDATE()) " +
                                    " and cast(A.LabOrderDate as date) >= (DATE_SUB(CURDATE(), INTERVAL 4 DAY))) " +
                                    " group by A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                    " A.LaborderStatusId,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                    " pendingApproval,DayCount" +
                                    " order by A.LaborderStatusId,A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate," +
                                    " A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                    " pendingApproval,DayCount ";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();
                            //laborderstatus table
                            patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            //laborder table
                            //patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();
                            patientAllLabStatusInfo.CreateDate = dr["CreateDate"].ToString();
                            patientAllLabStatusInfo.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                patientAllLabStatusInfo.FinalStatus = "";
                            }
                            else
                            {
                                patientAllLabStatusInfo.FinalStatus = dr["FinalStatus"].ToString();
                            }
                            lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstpatientAllLabStatusInfo;
        }
        #endregion

        #region getAllCompletedTestByDate
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getAllCompletedTestByDate")]
        [HttpGet]
        public List<PatientAllLabStatusInfo> getAllCompletedTestByDate(string from, string to)
        {
            List<PatientAllLabStatusInfo> lstpatientAllLabStatusInfo = new List<PatientAllLabStatusInfo>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName FROM  laborderstatus as A  inner join  laborder as B on A.MrdNo=B.MrdNo where A.LabStatus=3";

                    string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate, " +
                                    " (select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                    " ABS(DAY(CURDATE())-DAY(A.LabOrderDate)) as DayCount " +
                                    " FROM  laborderstatus as A " +
                                    " inner join  laborder as B on A.MrdNo = B.MrdNo " +
                                    " inner join  resultlabtest rt on rt.MrdNo = B.MrdNo " +
                                    " where rt.confirmFlag = 1 and A.LabStatus in (2,3) and A.LabOrderDate > '" + from + "' and A.LabOrderDate <='" + to + "' " + " group by A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                   " A.LaborderStatusId,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                   " pendingApproval,DayCount" +
                                   " order by A.LaborderStatusId,A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate," +
                                   " A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                   " pendingApproval,DayCount ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();
                            //laborderstatus table
                            patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            //laborder table
                            //patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();
                            patientAllLabStatusInfo.CreateDate = dr["CreateDate"].ToString();
                            patientAllLabStatusInfo.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                patientAllLabStatusInfo.FinalStatus = "";
                            }
                            else
                            {
                                patientAllLabStatusInfo.FinalStatus = dr["FinalStatus"].ToString();
                            }
                            lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstpatientAllLabStatusInfo;
        }
        #endregion

        #region getAllLaborderStatusByDropDownSearch
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getAllLaborderStatusByDropDownSearch")]
        [HttpGet]
        public List<PatientAllLabStatusInfo> getAllLaborderStatusByDropDownSearch(int status)
        {
            List<PatientAllLabStatusInfo> lstpatientAllLabStatusInfo = new List<PatientAllLabStatusInfo>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    // string strSQL = "SELECT A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName FROM  laborderstatus as A  inner join  laborder as B on A.MrdNo=B.MrdNo where A.LabStatus='" + status + "'";
                    string strSQL = "";
                    if (status == 2)
                    {
                        //for partial confirm and not approved
                        strSQL = "select distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName from laborderstatus A inner join  laborder as B on A.MrdNo=B.MrdNo and A.LabStatus=2 " +
                                 " inner join  resultlabtest rt on A.MrdNo = rt.MrdNo where rt.confirmFlag = 1 and rt.Status = 0";
                    }
                    else if (status == 3)
                    {
                        // for partial approve
                        strSQL = "select distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName from laborderstatus A inner join  laborder as B on A.MrdNo=B.MrdNo" +
                                 " inner join  resultlabtest rt on A.MrdNo = rt.MrdNo where rt.confirmFlag = 1 and rt.Status = 1";
                    }


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();
                            //laborderstatus table
                            patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            //laborder table
                            //patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();


                            lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstpatientAllLabStatusInfo;
        }
        #endregion

        #region getAllMaxRegistrationId
        /// <summary>
        /// Table - masterprofilelist
        /// </summary>
        /// Listed all values from masterprofilelist table
        /// <returns></returns>
        [Route("api/Account/getAllMaxRegistrationId")]
        [HttpGet]
        public PatientRegistration getAllMaxRegistrationId()
        {
            PatientRegistration maxregid = new PatientRegistration();
            // MasterProfileList lstProfiles = new MasterProfileList();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT max(ID),RegID,FirstName,LastName FROM  patientregistration";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            maxregid.RegID = dr["RegID"].ToString();


                            //masterProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            //masterProfileList.ProfileName = dr["ProfileName"].ToString();

                            // lstProfiles.Add(masterProfileList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return maxregid;
            }
        }
        #endregion

        // 01-12-2017

        #region getTestIdWiseTest
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from childtestlist table by test ID
        /// <returns></returns>
        [Route("api/Account/getTestIdWiseTest")]
        [HttpGet]
        public List<ChildTestList> getTestIdWiseTest(string testID)
        {
            List<ChildTestList> lstChildTest = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT* FROM childtestlist where TestID = '" + testID + "' AND ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTest = new ChildTestList();

                            //     childTest.ProfileID = (int)dr["ProfileID"];
                            childTest.TestID = (int)dr["TestID"];
                            childTest.TestCode = dr["TestCode"].ToString();
                            childTest.TestName = dr["TestName"].ToString();
                            childTest.units = dr["units"].ToString();
                            childTest.CalculationPresent = dr["CalculationPresent"].ToString();
                            childTest.Methodology = dr["Methodology"].ToString();
                            childTest.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTest.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTest.ProfilePriority = (int)dr["ProfilePriority"];
                            //childTest.Priority = (int)dr["Priority"];
                            lstChildTest.Add(childTest);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTest;
            }
        }
        #endregion


        //02-12-2017





        #region insertAgewiseReferenceValue
        /// <summary>
        /// table - AgeReferenceRange
        /// </summary>
        /// <param name="insertAgewiseReferenceValue"></param>
        [Route("api/Account/insertAgewiseReferenceValue")]
        [HttpPost]
        public void insertAgewiseReferenceValue(Agewisereferencevalue agewisereferencevalue)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO agewisereferencevalue(TestCode,TestName,StartDay,EndDay,StartMonth,EndMonth,StartYear,EndYear,LowUpperReferenceValue,FreeText,Units,DisplayValue,ElementName,Sex) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", agewisereferencevalue.TestCode);
                    cmd.Parameters.AddWithValue("@val2", agewisereferencevalue.TestName);
                    cmd.Parameters.AddWithValue("@val3", agewisereferencevalue.StartDay);
                    cmd.Parameters.AddWithValue("@val4", agewisereferencevalue.EndDay);
                    cmd.Parameters.AddWithValue("@val5", agewisereferencevalue.StartMonth);
                    cmd.Parameters.AddWithValue("@val6", agewisereferencevalue.EndMonth);
                    cmd.Parameters.AddWithValue("@val7", agewisereferencevalue.StartYear);
                    cmd.Parameters.AddWithValue("@val8", agewisereferencevalue.EndYear);
                    cmd.Parameters.AddWithValue("@val9", agewisereferencevalue.LowUpperReferenceValue);
                    cmd.Parameters.AddWithValue("@val10", agewisereferencevalue.FreeText);
                    cmd.Parameters.AddWithValue("@val11", agewisereferencevalue.Units);
                    cmd.Parameters.AddWithValue("@val12", agewisereferencevalue.DisplayText);
                    cmd.Parameters.AddWithValue("@val13", agewisereferencevalue.ElementName);
                    cmd.Parameters.AddWithValue("@val14", agewisereferencevalue.Sex);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region insertAgewiseCricticalReferences
        /// <summary>
        /// table - AgeReferenceRange
        /// </summary>
        /// <param name="insertAgewiseCricticalReferences"></param>
        [Route("api/Account/insertAgewiseCricticalReferences")]
        [HttpPost]
        public void insertAgewiseCricticalReferences(AgewiseCricticalReferences agewiseCricticalReferences)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO agewiseCricticalReference(TestCode,TestName,StartDay,EndDay,StartMonth,EndMonth,StartYear,EndYear,LowUpperCricticalValue,Units,FreeText,DisplayValue,ElementName,Sex) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val2", agewiseCricticalReferences.TestName);
                    cmd.Parameters.AddWithValue("@val1", agewiseCricticalReferences.TestCode);
                    cmd.Parameters.AddWithValue("@val3", agewiseCricticalReferences.StartDayCrictical);
                    cmd.Parameters.AddWithValue("@val4", agewiseCricticalReferences.EndDayCrictical);
                    cmd.Parameters.AddWithValue("@val5", agewiseCricticalReferences.StartMonthCrictical);
                    cmd.Parameters.AddWithValue("@val6", agewiseCricticalReferences.EndMonthCrictical);
                    cmd.Parameters.AddWithValue("@val7", agewiseCricticalReferences.StartYearCrictical);
                    cmd.Parameters.AddWithValue("@val8", agewiseCricticalReferences.EndYearCrictical);
                    cmd.Parameters.AddWithValue("@val9", agewiseCricticalReferences.LowUpperCricticalValue);
                    cmd.Parameters.AddWithValue("@val10", agewiseCricticalReferences.Units);
                    cmd.Parameters.AddWithValue("@val11", agewiseCricticalReferences.FreeText);
                    cmd.Parameters.AddWithValue("@val12", agewiseCricticalReferences.DisplayText);
                    cmd.Parameters.AddWithValue("@val13", agewiseCricticalReferences.ElementName);
                    cmd.Parameters.AddWithValue("@val14", agewiseCricticalReferences.Sex);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion


        //#region getBoneArrowReportByMrdNo
        ///// <summary>
        ///// Table - childtestlist
        ///// </summary>
        ///// Listed all values from childtestlist table
        ///// <returns></returns>
        //[Route("api/Account/getBoneArrowReportByMrdNo")]
        //[HttpGet]
        //public int getBoneArrowReportByMrdNo(string mrdNo)
        //{
        //    int count = 0;
        //    DataTable dt = new DataTable();
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {
        //            string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + mrdNo + "'";
        //            conn.Open();
        //            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
        //            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
        //            DataSet ds = new DataSet();
        //            mydata.Fill(ds);
        //            dt = ds.Tables[0];
        //            count = dt.Rows.Count;

        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //        return count;
        //    }
        //}
        //#endregion


        #region getBoneArrowReportByMrdNo
        /// <summary>
        /// Table - bonemarrowaspiration
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        [Route("api/Account/getBoneArrowReportByMrdNo")]
        [HttpGet]
        public List<BoneMarrowAspiration> getBoneArrowReportByMrdNo(string mrdNo)
        {
            List<BoneMarrowAspiration> lstboneMarrowAspiration = new List<BoneMarrowAspiration>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration where id_MrdNumber='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            BoneMarrowAspiration boneMarrowAspiration = new BoneMarrowAspiration();
                            boneMarrowAspiration.Id = (int)dr["Id"];
                            boneMarrowAspiration.id_MrdNumber = dr["id_MrdNumber"].ToString();
                            boneMarrowAspiration.SampleId_mrdnumber = dr["SampleId_mrdnumber"].ToString();
                            boneMarrowAspiration.ClinicalFindings = dr["ClinicalFindings"].ToString();
                            boneMarrowAspiration.PeripheralBloodFindings = dr["PeripheralBloodFindings"].ToString();
                            boneMarrowAspiration.BoneMarrowNumber = dr["BoneMarrowNumber"].ToString();
                            boneMarrowAspiration.Cellularity = dr["Cellularity"].ToString();
                            boneMarrowAspiration.Erythropoiesis = dr["Erythropoiesis"].ToString();
                            boneMarrowAspiration.Myelopoiesis = dr["Myelopoiesis"].ToString();
                            boneMarrowAspiration.M_E = dr["M_E"].ToString();
                            boneMarrowAspiration.Eosinophils = dr["Eosinophils"].ToString();
                            boneMarrowAspiration.Lymphocytes = dr["Lymphocytes"].ToString();
                            boneMarrowAspiration.PlasmaCells = dr["PlasmaCells"].ToString();
                            boneMarrowAspiration.Blasts = dr["Blasts"].ToString();
                            boneMarrowAspiration.Megakaryocytes = dr["Megakaryocytes"].ToString();
                            boneMarrowAspiration.Others = dr["Others"].ToString();
                            boneMarrowAspiration.Perl_sIronStain = dr["Perl_sIronStain"].ToString();
                            boneMarrowAspiration.Impression = dr["Impression"].ToString();
                            boneMarrowAspiration.Status = dr["Status"].ToString();
                            lstboneMarrowAspiration.Add(boneMarrowAspiration);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstboneMarrowAspiration;
            }
        }
        #endregion



        // Test Code by Test Name in Add Elements



        #region getTestCodebyTestName
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// get test code from childtestlist table by Test Name
        /// <returns></returns>
        [Route("api/Account/getTestCodebyTestName")]
        [HttpGet]
        public string getTestCodebyTestName(string testName)
        {

            string testCode = "";
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT TestCode FROM childtestlist where TestName = '" + testName + "' AND ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            testCode = dr["TestCode"].ToString();
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return testCode;
            }
        }
        #endregion


        #region insertElements
        /// <summary>
        /// table - element
        /// </summary>
        /// <param name="elementTable"></param>
        [Route("api/Account/insertElements")]
        [HttpPost]
        public void insertElements(Elements element)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Today;
                    element.CreatedDate = today.ToShortDateString();
                    string strSQL = "INSERT INTO  elements(ElementName,ElementValue,TestCode,TestName,CreatedDate) VALUES(@val1,@val2,@val3,@val4,@val5)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", element.ElementName);
                    cmd.Parameters.AddWithValue("@val2", element.ElementValue);
                    cmd.Parameters.AddWithValue("@val3", element.TestCode);
                    cmd.Parameters.AddWithValue("@val4", element.TestName);
                    cmd.Parameters.AddWithValue("@val5", element.CreatedDate);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region getAllElementsDetailsByTestCode
        /// <summary>
        /// Table - resultlabtest
        /// </summary>
        /// get pending amount values from resultlabtest table
        /// <returns></returns>
        [Route("api/Account/getAllElementsDetailsByTestCode")]
        [HttpGet]
        public List<Elements> getAllElementsDetailsByTestCode(string testCode)
        {
            List<Elements> elementDetail = new List<Elements>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM elements where testCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Elements elements = new Elements();
                            elements.TestCode = dr["TestCode"].ToString();
                            elements.TestName = dr["TestName"].ToString();
                            elements.ElementId = (int)dr["ElementId"];
                            elements.ElementName = dr["ElementName"].ToString();
                            elementDetail.Add(elements);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return elementDetail;
            }
        }
        #endregion


        #region getElementDetailbyElementName
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getElementDetailbyElementName")]
        [HttpGet]
        public List<Templates> getElementDetailbyElementName(string elementName, string testCode)
        {
            List<Templates> elementDetail = new List<Templates>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM templates where ElementName = '" + elementName.Split('_')[1] + "' " +
                                    " and ElementId=" + elementName.Split('_')[0] + " and  TestCode = '" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Templates elements = new Templates();
                            elements.TemplateId = Convert.ToInt32(dr["TemplateId"].ToString());
                            elements.TestCode = dr["TestCode"].ToString();
                            elements.TestName = dr["TestName"].ToString();
                            elements.ElementId = (int)dr["ElementId"];
                            elements.TemplateName = dr["TemplateName"].ToString();
                            elements.TemplateValue = dr["TemplateValue"].ToString();
                            elementDetail.Add(elements);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return elementDetail;
            }
        }
        #endregion


        #region getElementDetailbyTestCode
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getElementDetailbyTestCode")]
        [HttpGet]
        public List<Elements> getElementDetailbyTestCode(string testCode)
        {



            List<Elements> elementDetail = new List<Elements>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM elements where TestCode = '" + testCode + "' order by PriorityStatus asc";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Elements elements = new Elements();
                            elements.ElementName = dr["ElementName"].ToString();
                            //elements.TestName = dr["TestCode"].ToString();
                            elements.TestCode = dr["TestCode"].ToString();
                            elements.TestName = dr["TestName"].ToString();
                            elements.ElementId = (int)dr["ElementId"];
                            if (dr["PriorityStatus"] != DBNull.Value)
                            {
                                elements.PriorityStatus = (int)dr["PriorityStatus"];
                            }
                            else
                            {
                                elements.PriorityStatus = 0;
                            }
                            elementDetail.Add(elements);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return elementDetail;
            }
        }
        #endregion

        #region biospy

        #region getBiospyNoDetails
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getBiospyNoDetails")]
        [HttpGet]
        public string getBiospyNoDetails(string mrdNo, int flag, string abbrev, string insGroupName)
        {
            List<Elements> elementDetail = new List<Elements>();
            var biospyNumber = "";

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    conn.Open();
                    if (flag == 1)
                    {
                        strSQL = "SELECT * FROM biospydetails where MrdNo = '" + mrdNo + "' and BiospyAbbrev = '" + abbrev + "'";
                    }
                    else if (flag == 2)
                    {
                        if (insGroupName != null)
                        {
                            if (insGroupName.Contains("_Camp"))
                            {
                                string chkGrpSql = "select * from biospydetails where BillMode='" + insGroupName + "' ";
                                MySqlDataAdapter sda = new MySqlDataAdapter(chkGrpSql, conn);
                                MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                                DataSet sDS = new DataSet();
                                DataTable sDT = new DataTable();
                                sda.Fill(sDS);
                                sDT = sDS.Tables[0];
                                if (sDT.Rows.Count > 0)
                                {
                                    strSQL = "SELECT ByspyNo  FROM biospydetails where BiospyAbbrev = '" + abbrev + "' and " +
                                         " BillMode='" + insGroupName + "' and PatientName!='' and MrdNo!='' order by RegID desc limit 1";
                                }
                                else
                                {
                                    strSQL = "SELECT ByspyNo  FROM biospydetails where BiospyAbbrev = '" + abbrev + "' order by RegID desc limit 1";
                                }

                            }
                        }
                        else
                        {
                            strSQL = "SELECT ByspyNo  FROM biospydetails where BiospyAbbrev = '" + abbrev + "' order by RegID desc limit 1";
                        }
                    }

                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0]["ByspyNo"] != DBNull.Value)
                        {
                            biospyNumber = dt.Rows[0]["ByspyNo"].ToString();
                        }
                        else
                        {
                            biospyNumber = "0";
                        }
                    }
                    else
                    {
                        biospyNumber = "0";
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return biospyNumber;
            }
        }
        #endregion

        #region insertBiospyNoDetails
        /// <summary>
        /// table - biospydetails
        /// </summary>
        /// <param name="templates"></param>
        [Route("api/Account/insertBiospyNoDetails")]
        [HttpPost]
        public void insertBiospyNoDetails(string bioAbrev, string bioNo, string patientName, string mrdNo, string testCode, string billMode, string grpCount)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    if (billMode != null)
                    {
                        #region forinsertingbiospyforgroup
                        if (billMode.Contains("_Camp"))
                        {
                            int chkCount = 1;
                            string chkGrpSql = "select * from biospydetails where BillMode='" + billMode + "' ";
                            MySqlDataAdapter sda = new MySqlDataAdapter(chkGrpSql, conn);
                            MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                            DataSet sDS = new DataSet();
                            DataTable sDT = new DataTable();
                            sda.Fill(sDS);
                            sDT = sDS.Tables[0];
                            if (sDT.Rows.Count > 0)
                            {
                                string strSQL = "SELECT *  FROM biospydetails where BiospyAbbrev = '" + bioAbrev + "' and " +
                                         " BillMode='" + billMode + "' and ByspyNo='" + bioNo + "' order by RegID desc ";
                                MySqlDataAdapter upSda = new MySqlDataAdapter(strSQL, conn);
                                MySqlCommandBuilder upScmd = new MySqlCommandBuilder(upSda);
                                DataSet upSDS = new DataSet();
                                DataTable upSDT = new DataTable();
                                upSda.Fill(upSDS);
                                upSDT = upSDS.Tables[0];
                                if (upSDT.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in upSDT.Rows)
                                    {
                                        if (dr != null)
                                        {
                                            string upPatMrdSql = "update biospydetails set MrdNo='" + mrdNo + "', PatientName='" + patientName + "' where RegID=" + dr["RegID"] + " ";
                                            MySqlCommand updCmd = new MySqlCommand(upPatMrdSql, conn);
                                            updCmd.CommandType = CommandType.Text;
                                            updCmd.ExecuteNonQuery();
                                        }
                                    }
                                }

                            }
                            else
                            {
                                var bioSpyNumber = "";
                                int year = Convert.ToInt32(DateTime.Parse(DateTime.Now.ToString()).Year.ToString());

                                for (int i = chkCount; i <= Convert.ToInt32(grpCount); i++)
                                {
                                    if (i > 1)
                                    {
                                        var addbioSpyNumber = bioSpyNumber;
                                        var n1 = addbioSpyNumber.IndexOf('-');
                                        var n2 = addbioSpyNumber.LastIndexOf('-');
                                        int autouniqNum = Convert.ToInt32(addbioSpyNumber.Substring(n2 + 1, 4));
                                        if (autouniqNum < year)
                                        {
                                            bioSpyNumber = bioAbrev + "-" + 1 + "-" + year;
                                        }
                                        else
                                        {
                                            addbioSpyNumber = addbioSpyNumber.Split('-')[1];
                                            addbioSpyNumber = addbioSpyNumber.Split('-')[0];
                                            bioSpyNumber = bioAbrev + "-" + (Convert.ToInt32(addbioSpyNumber) + 1) + "-" + year;
                                        }
                                        patientName = "";
                                        mrdNo = "";
                                    }
                                    else
                                    {
                                        bioSpyNumber = bioNo;
                                    }
                                    string strSQL = "INSERT INTO  biospydetails(BiospyAbbrev,ByspyNo,PatientName,PatientRegNo,MrdNo,TestCode,BillMode) " +
                                            " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";

                                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                                    cmd.Parameters.AddWithValue("@val1", bioAbrev);
                                    cmd.Parameters.AddWithValue("@val2", bioSpyNumber);
                                    cmd.Parameters.AddWithValue("@val3", patientName);
                                    cmd.Parameters.AddWithValue("@val4", 0);
                                    cmd.Parameters.AddWithValue("@val5", mrdNo);
                                    cmd.Parameters.AddWithValue("@val6", testCode);
                                    cmd.Parameters.AddWithValue("@val7", billMode);

                                    cmd.CommandType = CommandType.Text;
                                    cmd.ExecuteNonQuery();
                                }
                            }
                        }
                        #endregion forinsertingbiospyforgroup
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  biospydetails(BiospyAbbrev,ByspyNo,PatientName,PatientRegNo,MrdNo,TestCode,BillMode) " +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", bioAbrev);
                        cmd.Parameters.AddWithValue("@val2", bioNo);
                        cmd.Parameters.AddWithValue("@val3", patientName);
                        cmd.Parameters.AddWithValue("@val4", 0);
                        cmd.Parameters.AddWithValue("@val5", mrdNo);
                        cmd.Parameters.AddWithValue("@val6", testCode);
                        cmd.Parameters.AddWithValue("@val7", billMode);

                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #endregion forbiospy


        #region getAllElementsDetails
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getAllElementsDetails")]
        [HttpGet]
        public List<Elements> getAllElementsDetails()
        {

            List<Elements> elementDetail = new List<Elements>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM elements";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Elements elements = new Elements();
                            elements.TestCode = dr["TestCode"].ToString();
                            elements.TestName = dr["TestName"].ToString();
                            elements.ElementId = (int)dr["ElementId"];
                            elements.ElementName = dr["ElementName"].ToString();
                            elementDetail.Add(elements);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return elementDetail;
            }
        }
        #endregion



        #region insertTemplates
        /// <summary>
        /// table - templates
        /// </summary>
        /// <param name="templates"></param>
        [Route("api/Account/insertTemplates")]
        [HttpPost]
        public void insertTemplates(Templates templates)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    if (templates.Flag == 0)
                    {
                        string strSQL = "INSERT INTO  templates(TemplateName,TemplateValue,ElementId,ElementName,TestCode,TestName) VALUES(@val1,@val2,@val3,@val4,@val5,@val6)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", templates.TemplateName);
                        cmd.Parameters.AddWithValue("@val2", templates.TemplateValue);
                        cmd.Parameters.AddWithValue("@val3", templates.ElementId);
                        cmd.Parameters.AddWithValue("@val4", templates.ElementName);
                        cmd.Parameters.AddWithValue("@val5", templates.TestCode);
                        cmd.Parameters.AddWithValue("@val6", templates.TestName);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else if (templates.Flag == 1)
                    {
                        string updSql = "Update templates set TemplateName='" + templates.TemplateName + "',TemplateValue='" + templates.TemplateValue + "' " +
                                        " where TemplateId=" + templates.TemplateId + " ";
                        MySqlCommand updCmd = new MySqlCommand(updSql, conn);
                        updCmd.CommandType = CommandType.Text;
                        updCmd.ExecuteNonQuery();
                    }
                    else if (templates.Flag == 2)
                    {
                        string updSql = "delete from templates where TemplateId=" + templates.TemplateId + " ";
                        MySqlCommand updCmd = new MySqlCommand(updSql, conn);
                        updCmd.CommandType = CommandType.Text;
                        updCmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region getmarkerList
        /// <summary>
        /// Table - markermaster
        /// </summary>
        [Route("api/Account/getmarkerList")]
        [HttpGet]
        public List<markermaster> getmarkerList()
        {
            List<markermaster> markerList = new List<markermaster>();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string rsltQuery = "SELECT * FROM  markermaster ";
                    MySqlDataAdapter newData = new MySqlDataAdapter(rsltQuery, conn);
                    MySqlCommandBuilder newCmd = new MySqlCommandBuilder(newData);
                    DataSet newDS = new DataSet();
                    DataTable newDT = new DataTable();
                    newData.Fill(newDS);
                    newDT = newDS.Tables[0];
                    if (newDT.Rows.Count > 0)
                    {
                        foreach (DataRow dr in newDT.Rows)
                        {
                            markermaster list = new markermaster();
                            list.MarkerID = Convert.ToInt32(dr["MarkerID"].ToString());
                            list.MarkerName = dr["MarkerName"].ToString();
                            list.MarkerPriority = Convert.ToInt32(dr["MarkerPriority"].ToString());
                            markerList.Add(list);
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return markerList;
            }
        }
        #endregion

        #region insertmarkerList
        /// <summary>
        /// Table - markermaster
        /// </summary>
        [Route("api/Account/insertmarkerList")]
        [HttpPost]
        public List<markermaster> insertmarkerList(int flag, string markerName, int priority)
        {
            List<markermaster> markerList = new List<markermaster>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  markermaster where MarkerName='" + markerName + "' ";
                    //string strSQL = "SELECT * FROM  markermaster ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        if (flag == 1)
                        {
                            string strSQL1 = "INSERT INTO  markermaster(MarkerName,MarkerPriority) " +
                                             " VALUES(@val1,@val2)";
                            // conn.Open();
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.Parameters.AddWithValue("@val1", markerName);
                            cmd1.Parameters.AddWithValue("@val2", priority);
                            cmd1.ExecuteNonQuery();


                            string rsltQuery = "SELECT * FROM  markermaster ";
                            MySqlDataAdapter newData = new MySqlDataAdapter(rsltQuery, conn);
                            MySqlCommandBuilder newCmd = new MySqlCommandBuilder(newData);
                            DataSet newDS = new DataSet();
                            DataTable newDT = new DataTable();
                            newData.Fill(newDS);
                            newDT = newDS.Tables[0];
                            if (newDT.Rows.Count > 0)
                            {
                                foreach (DataRow dr in newDT.Rows)
                                {
                                    markermaster list = new markermaster();
                                    list.MarkerName = dr["MarkerName"].ToString();
                                    list.MarkerPriority = Convert.ToInt32(dr["MarkerPriority"].ToString());
                                    markerList.Add(list);
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (DataRow dr1 in dt.Rows)
                        {
                            if (dr1 != null)
                            {
                                if (flag == 2)
                                {
                                    string strSQL1 = "UPDATE markermaster SET MarkerName='" + markerName + "', MarkerPriority=" + priority + " where MarkerID=" + dr1["MarkerID"].ToString() + " ";
                                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                    cmd1.ExecuteNonQuery();
                                }
                                else if (flag == 3)
                                {
                                    string strSQL1 = "delete from markermaster where MarkerID=" + dr1["MarkerID"].ToString() + " ";
                                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                    cmd1.ExecuteNonQuery();
                                }
                                else if (flag == 4)
                                {
                                    markermaster list = new markermaster();
                                    list.MarkerName = dr1["MarkerName"].ToString();
                                    list.MarkerPriority = Convert.ToInt32(dr1["MarkerPriority"].ToString());
                                    markerList.Add(list);
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return markerList;
            }
        }
        #endregion

        #region getTemplateDetailbyTestCodeElementID
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getTemplateDetailbyTestCodeElementID")]
        [HttpGet]
        public List<Templates> getTemplateDetailbyTestCodeElementID(string TestCode, int ElementId)
        {
            List<Templates> templatesDetail = new List<Templates>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM templates where TestCode = '" + TestCode + "' && ElementId ='" + ElementId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Templates templateas = new Templates();
                            templateas.ElementName = dr["ElementName"].ToString();
                            //    elements.TestName = dr["TestCode"].ToString();
                            templateas.TestCode = dr["TestCode"].ToString();
                            templateas.TestName = dr["TestName"].ToString();
                            templateas.ElementId = (int)dr["ElementId"];
                            templateas.TemplateName = dr["TemplateName"].ToString();
                            templateas.TemplateId = (int)dr["TemplateId"];
                            templateas.TemplateValue = dr["TemplateValue"].ToString();

                            templatesDetail.Add(templateas);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return templatesDetail;
            }
        }
        #endregion

        #region deletesltdMarkerList
        /// <summary>
        /// Table - markermaster
        /// </summary>
        [Route("api/Account/deletesltdMarkerList")]
        [HttpPost]
        public void deletesltdMarkerList(int flag, string markerID, string mrdNo)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  immunohistomarkers where ImmunoMarkerID='" + markerID + "' ";
                    //string strSQL = "SELECT * FROM  markermaster ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        if (flag == 1)
                        {
                            string strSQL1 = "delete from immunohistomarkers where ImmunoMarkerID= '" + markerID + "' ";
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion





        #region insrtImmunoHistoMarkers
        /// <summary>
        /// Table - insert immunohistomarkers
        /// </summary>
        [Route("api/Account/insrtImmunoHistoMarkers")]
        [HttpPost]
        public string insrtImmunoHistoMarkers(BoneMarrowAspirationNew boneMarrowAspirationNew)
        {
            string insertedTestName = "";
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and TestCode = '" + boneMarrowAspirationNew.TestCode + "' " +
                                     " and ElementId ='" + boneMarrowAspirationNew.ElementId + "' and PatientID='" + boneMarrowAspirationNew.PatientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        //string strSQL1 = "INSERT INTO  bonemarrowaspiration(MrdNo,TestCode,TestName,ElementId,ElementName,TemplateId,TemplateName,TemplateDescription,PatientID,CreatedDateTime) " +
                        //                 " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";
                        //// conn.Open();
                        //MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        //cmd1.Parameters.AddWithValue("@val1", boneMarrowAspirationNew.MrdNo);
                        //cmd1.Parameters.AddWithValue("@val2", boneMarrowAspirationNew.TestCode);
                        //cmd1.Parameters.AddWithValue("@val3", boneMarrowAspirationNew.TestName);
                        //cmd1.Parameters.AddWithValue("@val4", boneMarrowAspirationNew.ElementId);
                        //cmd1.Parameters.AddWithValue("@val5", boneMarrowAspirationNew.ElementName);
                        //cmd1.Parameters.AddWithValue("@val6", boneMarrowAspirationNew.TemplateId);
                        //cmd1.Parameters.AddWithValue("@val7", boneMarrowAspirationNew.TemplateName);
                        //cmd1.Parameters.AddWithValue("@val8", boneMarrowAspirationNew.TemplateDescription);
                        //cmd1.Parameters.AddWithValue("@val9", boneMarrowAspirationNew.PatientID);
                        //cmd1.Parameters.AddWithValue("@val10", DateTime.Now);
                        //cmd1.ExecuteNonQuery();
                        //insertedTestName = boneMarrowAspirationNew.ElementName;
                    }
                    else
                    {
                        foreach (DataRow dr1 in dt.Rows)
                        {
                            if (dr1 != null)
                            {

                                string chkBobeID = "Select * from immunohistomarkers where MarkerName=" +
                                    " '" + boneMarrowAspirationNew.MarkerName + "' and BoneMarrowID=" + Convert.ToInt32(dr1["bonemarrowaspirationid"].ToString()) + " ";
                                MySqlDataAdapter chkData = new MySqlDataAdapter(chkBobeID, conn);
                                MySqlCommandBuilder chkCmd = new MySqlCommandBuilder(chkData);
                                DataSet chkDs = new DataSet();
                                DataTable chkDt = new DataTable();
                                chkData.Fill(chkDs);
                                chkDt = chkDs.Tables[0];
                                if (chkDt.Rows.Count == 0)
                                {
                                    string strSQL1 = "INSERT INTO  immunohistomarkers(MarkerName,Clone,Results,Impressions,BoneMarrowID,MrdNo,PatientID) " +
                                            " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";

                                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                    cmd1.Parameters.AddWithValue("@val1", boneMarrowAspirationNew.MarkerName);
                                    cmd1.Parameters.AddWithValue("@val2", boneMarrowAspirationNew.Clone);
                                    cmd1.Parameters.AddWithValue("@val3", boneMarrowAspirationNew.Results);
                                    cmd1.Parameters.AddWithValue("@val4", boneMarrowAspirationNew.Impressions);
                                    cmd1.Parameters.AddWithValue("@val5", Convert.ToInt32(dr1["bonemarrowaspirationid"].ToString()));
                                    cmd1.Parameters.AddWithValue("@val6", boneMarrowAspirationNew.MrdNo);
                                    cmd1.Parameters.AddWithValue("@val7", boneMarrowAspirationNew.PatientID);
                                    cmd1.ExecuteNonQuery();
                                }
                            }
                        }
                        insertedTestName = boneMarrowAspirationNew.ElementName;
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
            return insertedTestName;
        }
        #endregion

        #region insertBoneMarrowNew
        /// <summary>
        /// Table - insert BoneMarrowAspiration
        /// </summary>
        /// <param name="insuranceprofilelist"></param>
        [Route("api/Account/insertBoneMarrowNew")]
        [HttpPost]
        public string insertBoneMarrowNew(BoneMarrowAspirationNew boneMarrowAspirationNew)
        {
            string insertedTestName = "";
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and TestCode = '" + boneMarrowAspirationNew.TestCode + "' " +
                                     " and ElementId ='" + boneMarrowAspirationNew.ElementId + "' and PatientID='" + boneMarrowAspirationNew.PatientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL1 = "INSERT INTO  bonemarrowaspiration(MrdNo,TestCode,TestName,ElementId,ElementName,TemplateId,TemplateName,TemplateDescription,PatientID,CreatedDateTime,PriorityStatus) " +
                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11)";
                        // conn.Open();
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@val1", boneMarrowAspirationNew.MrdNo);
                        cmd1.Parameters.AddWithValue("@val2", boneMarrowAspirationNew.TestCode);
                        cmd1.Parameters.AddWithValue("@val3", boneMarrowAspirationNew.TestName);
                        cmd1.Parameters.AddWithValue("@val4", boneMarrowAspirationNew.ElementId);
                        cmd1.Parameters.AddWithValue("@val5", boneMarrowAspirationNew.ElementName);
                        cmd1.Parameters.AddWithValue("@val6", boneMarrowAspirationNew.TemplateId);
                        cmd1.Parameters.AddWithValue("@val7", boneMarrowAspirationNew.TemplateName);
                        cmd1.Parameters.AddWithValue("@val8", boneMarrowAspirationNew.TemplateDescription);
                        cmd1.Parameters.AddWithValue("@val9", boneMarrowAspirationNew.PatientID);
                        cmd1.Parameters.AddWithValue("@val10", DateTime.Now);
                        cmd1.Parameters.AddWithValue("@val11", boneMarrowAspirationNew.PriorityStatus);
                        cmd1.ExecuteNonQuery();
                        insertedTestName = boneMarrowAspirationNew.ElementName;
                    }
                    else
                    {
                        foreach (DataRow dr1 in dt.Rows)
                        {
                            if (dr1 != null)
                            {
                                string strSQL1 = "UPDATE bonemarrowaspiration SET TemplateDescription='" + boneMarrowAspirationNew.TemplateDescription + "' where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' " +
                                                 " and TestCode='" + boneMarrowAspirationNew.TestCode + "' and ElementId='" + boneMarrowAspirationNew.ElementId + "' and PatientID='" + boneMarrowAspirationNew.PatientID + "'";
                                // conn.Open();
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                cmd1.ExecuteNonQuery();

                            }
                        }
                        insertedTestName = boneMarrowAspirationNew.ElementName;
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
            return insertedTestName;
        }
        #endregion

        #region updateForInsertedBoneMarrow
        /// <summary>
        /// Table - insert BoneMarrowAspiration
        /// </summary>
        [Route("api/Account/updateForInsertedBoneMarrow")]
        [HttpPost]
        public void updateForInsertedBoneMarrow(string mrdNo, string testCode, string patientID)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                     " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                     " where vd.MrdNo = '" + mrdNo + "' and vd.TestCodeRef = '" + testCode + "' ";
                    MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                    MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                    DataSet Culds = new DataSet();
                    DataTable Culdt1 = new DataTable();
                    Culturedata.Fill(Culds);
                    Culdt1 = Culds.Tables[0];
                    if (Culdt1.Rows.Count > 0)
                    {
                        foreach (DataRow dr1 in Culdt1.Rows)
                        {
                            string query = "select * from  resultlabtest where MrdNo='" + mrdNo + "' and TestCode='" + testCode + "' and PatientID='" + dr1["RegID"].ToString() + "'";
                            MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                            MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                            DataSet inertds = new DataSet();
                            DataTable insertdt = new DataTable();
                            data.Fill(inertds);
                            insertdt = inertds.Tables[0];
                            if (insertdt.Rows.Count > 0)
                            {
                                string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr1["RegID"].ToString() + "' and MrdNo='" + dr1["MrdNo"].ToString() + "' and RegId='" + dr1["Id"].ToString() + "'";
                                MySqlCommand newcmd1 = new MySqlCommand(updateQuery, conn);
                                newcmd1.ExecuteNonQuery();
                            }
                            else
                            {
                                string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID) " +
                                                     " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                                MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                insertCmd.Parameters.AddWithValue("@val1", dr1["MrdNo"].ToString());
                                insertCmd.Parameters.AddWithValue("@val2", dr1["TestCode"].ToString());
                                insertCmd.Parameters.AddWithValue("@val3", dr1["TestName"].ToString());
                                insertCmd.Parameters.AddWithValue("@val4", dr1["Id"].ToString());
                                insertCmd.Parameters.AddWithValue("@val5", dr1["TestType"].ToString());
                                insertCmd.Parameters.AddWithValue("@val6", 1);
                                insertCmd.Parameters.AddWithValue("@val7", dr1["RegID"].ToString());
                                insertCmd.CommandType = CommandType.Text;
                                insertCmd.ExecuteNonQuery();
                            }
                            string selectQuery = "select * from  labresultverification where MrdNo='" + mrdNo + "' and TestCode='" + testCode + "' ";
                            MySqlDataAdapter updateData = new MySqlDataAdapter(selectQuery, conn);
                            MySqlCommandBuilder updateCmd = new MySqlCommandBuilder(updateData);
                            DataSet updateds = new DataSet();
                            DataTable updatedt = new DataTable();
                            updateData.Fill(updateds);
                            updatedt = updateds.Tables[0];
                            if (updatedt.Rows.Count > 0)
                            {
                                string updateQuery = "update  labresultverification set saveFlag=1 , PatientID='" + dr1["RegID"].ToString() + "' where MrdNo='" + dr1["MrdNo"].ToString() + "' and RegId='" + dr1["Id"].ToString() + "'";
                                MySqlCommand newcmd1 = new MySqlCommand(updateQuery, conn);
                                newcmd1.ExecuteNonQuery();
                            }
                        }
                    }
                    else
                    {
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region deleteBoneMarrowNew
        /// <summary>
        /// Table - insert BoneMarrowAspiration
        /// </summary>
        /// <param name="insuranceprofilelist"></param> 
        [Route("api/Account/deleteBoneMarrowNew")]
        [HttpPost]
        public void deleteBoneMarrowNew(BoneMarrowAspirationNew boneMarrowAspirationNew)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT bonemarrowaspirationid FROM  bonemarrowaspiration where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and TestCode = '" + boneMarrowAspirationNew.TestCode + "' and ElementId =" + boneMarrowAspirationNew.ElementId + "";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string strSQL1 = "delete from  bonemarrowaspiration where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and bonemarrowaspirationid=" + dt.Rows[0]["bonemarrowaspirationid"].ToString() + "";
                        // conn.Open();
                        MySqlCommand deletecmd = new MySqlCommand(strSQL1, conn);
                        deletecmd.CommandType = CommandType.Text;
                        deletecmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getPatientHistoryByRegId
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getPatientHistoryByRegId")]
        [HttpGet]
        public List<LabOrder> getPatientHistoryByRegId(string regID)
        {
            regID = regID.Substring(2, 3);
            int regIDValue = Convert.ToInt32(regID);


            List<LabOrder> labHistory = new List<LabOrder>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM LabOrder where RegID = '" + regIDValue + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrder labOrder = new LabOrder();
                            labOrder.CreateDate = Convert.ToDateTime(dr["CreateDate"]);

                            labOrder.MrdNo = dr["MrdNo"].ToString();
                            labHistory.Add(labOrder);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return labHistory;
            }
        }
        #endregion

        #region insertParentPaymentReceived
        /// <summary>
        /// table - parentpaymentreceived
        /// </summary>
        /// <param name="parentpaymentreceived"></param>
        [Route("api/Account/insertParentPaymentReceived")]
        [HttpPost]
        public void insertParentPaymentReceived(ParentPaymentReceived parentpaymentreceived)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strDate = parentpaymentreceived.strPaymentSchedule;

                    DateTime date = DateTime.ParseExact(strDate, "dd/MM/yyyy", null);
                    parentpaymentreceived.datePaymentSchedule = date;

                    string strSQL = "INSERT INTO  parentpaymentreceived(InvoiceNo,InvoiceDate,CreditInvoice,GroupName,Amount,ReceivedPayment,PendingAmount,Status,PendingNotification,PaymentSchedule) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", parentpaymentreceived.InvoiceNo);
                    cmd.Parameters.AddWithValue("@val2", parentpaymentreceived.InvoiceDate);
                    cmd.Parameters.AddWithValue("@val3", parentpaymentreceived.CreditInvoice);
                    cmd.Parameters.AddWithValue("@val4", parentpaymentreceived.GroupName);
                    cmd.Parameters.AddWithValue("@val5", parentpaymentreceived.Amount);
                    cmd.Parameters.AddWithValue("@val6", parentpaymentreceived.ReceivedPayment);
                    cmd.Parameters.AddWithValue("@val7", parentpaymentreceived.PendingAmount);
                    cmd.Parameters.AddWithValue("@val8", parentpaymentreceived.Status);
                    cmd.Parameters.AddWithValue("@val9", parentpaymentreceived.PendingNotification);
                    cmd.Parameters.AddWithValue("@val10", parentpaymentreceived.datePaymentSchedule);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region getAllfromParentPaymentReceived
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getAllfromParentPaymentReceived")]
        [HttpGet]
        public ParentPaymentReceived getAllfromParentPaymentReceived(string groupname)
        {
            ParentPaymentReceived paymentReceived = new ParentPaymentReceived();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  parentpaymentreceived where GroupName='" + groupname + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            paymentReceived.InvoiceId = (int)dr["InvoiceId"];
                            paymentReceived.InvoiceNo = dr["InvoiceNo"].ToString();
                            paymentReceived.InvoiceDate = Convert.ToDateTime(dr["InvoiceDate"]);
                            paymentReceived.CreditInvoice = dr["CreditInvoice"].ToString();
                            paymentReceived.GroupName = dr["GroupName"].ToString();
                            paymentReceived.Amount = (double)dr["Amount"];
                            paymentReceived.ReceivedPayment = (double)dr["ReceivedPayment"];
                            paymentReceived.PendingAmount = (double)dr["PendingAmount"];
                            paymentReceived.Status = dr["Status"].ToString();
                            paymentReceived.PendingNotification = dr["PendingNotification"].ToString();
                            paymentReceived.datePaymentSchedule = Convert.ToDateTime(dr["PaymentSchedule"]);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return paymentReceived;
            }
        }
        #endregion

        #region insertLabProfileOrTestList
        /// <summary>
        /// Table
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertLabProfileOrTestList")]
        [HttpPost]
        public void insertLabProfileOrTestList(CommonProfileTestDetails labProfileTestList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO commonprofiletestdetails(RegID,Description,Amount,MrdNo,PatientName,Code,NetAmount,Discount,Action) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", labProfileTestList.RegID);
                    cmd.Parameters.AddWithValue("@val2", labProfileTestList.Description);
                    cmd.Parameters.AddWithValue("@val3", labProfileTestList.Amount);
                    cmd.Parameters.AddWithValue("@val4", labProfileTestList.MrdNo);
                    cmd.Parameters.AddWithValue("@val5", labProfileTestList.PatientName);
                    cmd.Parameters.AddWithValue("@val6", labProfileTestList.Code);

                    if (labProfileTestList.NetAmount == "" || labProfileTestList.NetAmount == null)
                    {
                        cmd.Parameters.AddWithValue("@val7", 0);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@val7", labProfileTestList.NetAmount);
                    }
                    if (labProfileTestList.Discount == "" || labProfileTestList.Discount == null)
                    {
                        cmd.Parameters.AddWithValue("@val8", 0);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@val8", labProfileTestList.Discount);
                    }

                    cmd.Parameters.AddWithValue("@val9", labProfileTestList.Action);
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getProfileTestListByMrdNoLab
        /// <summary>
        /// Table - CommonProfileTestDetails
        /// </summary>
        /// Listed all values from CommonProfileTestDetails table
        /// <returns></returns>
        [Route("api/Account/getProfileTestListByMrdNoLab")]
        [HttpGet]
        public List<CommonProfileTestDetails> getProfileTestListByMrdNoLab(string mrdNo)
        {
            List<CommonProfileTestDetails> lisLabProfileTestDetails = new List<CommonProfileTestDetails>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT *,sum(NetAmount) as TotalAmount FROM   commonprofiletestdetails where MrdNo = '" + mrdNo + "'";
                    string strSQL = "create temporary table  TestInfo As" +
                                    " SELECT *,'0000000' TotalAmount FROM commonprofiletestdetails where MrdNo = '" + mrdNo + "'; " +
                                    " update TestInfo AS TI set TI.TotalAmount=( " +
                                    " SELECT sum(NetAmount) fROM   commonprofiletestdetails where MrdNo = '" + mrdNo + "'); " +
                                    " select * from TestInfo; " +
                                    " Drop table TestInfo;";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CommonProfileTestDetails labProfileTestList = new CommonProfileTestDetails();

                            labProfileTestList.RegID = (int)dr["RegID"];
                            labProfileTestList.Description = dr["Description"].ToString();
                            labProfileTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            labProfileTestList.PatientName = dr["PatientName"].ToString();
                            labProfileTestList.Code = dr["Code"].ToString();
                            labProfileTestList.MrdNo = mrdNo;
                            labProfileTestList.Discount = dr["Discount"].ToString();
                            labProfileTestList.NetAmount = dr["NetAmount"].ToString();
                            labProfileTestList.TotalAmount = dr["TotalAmount"].ToString();
                            lisLabProfileTestDetails.Add(labProfileTestList);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisLabProfileTestDetails;
            }
        }
        #endregion


        #region getProfileNameFromAdmin
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getProfileNameFromAdmin")]
        [HttpGet]
        public List<GroupProfileList> getProfileNameFromAdmin(string groupname)
        {
            List<GroupProfileList> getprofileDetails = new List<GroupProfileList>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "SELECT * FROM  groupprofilelist where GroupName = '" + groupname + "'";


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            GroupProfileList ProfileList = new GroupProfileList();


                            ProfileList.ProfileName = dr["ProfileName"].ToString();
                            ProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            getprofileDetails.Add(ProfileList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return getprofileDetails;
            }
        }
        #endregion


        #region getTestNameFromAdmin
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getTestNameFromAdmin")]
        [HttpGet]
        public List<GroupTestList> getTestNameFromAdmin(string groupname)
        {
            List<GroupTestList> lisTestDetails = new List<GroupTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "SELECT distinct TestName, TestCode FROM grouptestlist where GroupName = '" + groupname + "' UNION ALL SELECT distinct  ProfileName, ProfileCode FROM groupprofilelist  where GroupName = '" + groupname + "'";


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            GroupTestList TestList = new GroupTestList();
                            if (dr["TestName"].ToString() != null)
                            {
                                TestList.TestCode = dr["TestCode"].ToString();
                                TestList.TestName = dr["TestName"].ToString();
                            }
                            lisTestDetails.Add(TestList);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisTestDetails;
            }
        }
        #endregion


        #region getProfileNameFromAdminForInsurance
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getProfileNameFromAdminForInsurance")]
        [HttpGet]
        public List<InsuranceProfileList> getProfileNameFromAdminForInsurance(string insurancename)
        {
            List<InsuranceProfileList> getprofileDetails = new List<InsuranceProfileList>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "SELECT * FROM  insuranceprofilelist where InsuranceName = '" + insurancename + "'";


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InsuranceProfileList ProfileList = new InsuranceProfileList();


                            ProfileList.ProfileName = dr["ProfileName"].ToString();
                            ProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            getprofileDetails.Add(ProfileList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return getprofileDetails;
            }
        }
        #endregion


        #region getTestNameFromAdminforinsurance
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getTestNameFromAdminforinsurance")]
        [HttpGet]
        public List<InsuranceTestList> getTestNameFromAdminforinsurance(string insurancename)
        {
            List<InsuranceTestList> lisTestDetails = new List<InsuranceTestList>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "SELECT distinct TestName, TestCode FROM insurancetestlist where InsuranceName = '" + insurancename + "' UNION ALL SELECT distinct  ProfileName, ProfileCode FROM insuranceprofilelist where InsuranceName = '" + insurancename + "'";


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InsuranceTestList TestList = new InsuranceTestList();
                            if (dr["TestName"].ToString() != null)
                            {
                                TestList.TestCode = dr["TestCode"].ToString();
                                TestList.TestName = dr["TestName"].ToString();
                                lisTestDetails.Add(TestList);
                            }

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisTestDetails;
            }
        }
        #endregion



        #region getTestNameFromAdminforHospital
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getTestNameFromAdminforHospital")]
        [HttpGet]
        public List<InsuranceTestList> getTestNameFromAdminforHospital(string hospitalname)
        {
            List<InsuranceTestList> lisTestDetails = new List<InsuranceTestList>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "SELECT distinct TestName, TestCode FROM outofhospitaltestlist where HospitalName = '" + hospitalname + "' UNION ALL SELECT distinct  ProfileName, ProfileCode FROM outofhospitalprofilelist  where HospitalName = '" + hospitalname + "'";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            InsuranceTestList TestList = new InsuranceTestList();
                            if (dr["TestName"].ToString() != null)
                            {
                                TestList.TestCode = dr["TestCode"].ToString();
                                TestList.TestName = dr["TestName"].ToString();
                                lisTestDetails.Add(TestList);
                            }

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lisTestDetails;
            }
        }
        #endregion

        #region insertParentPaymentInsurance
        /// <summary>
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertParentPaymentInsurance")]
        [HttpPost]
        public void insertParentPaymentInsurance(ParentPaymentInsurance parentpaymentreceived)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strDate = parentpaymentreceived.strPaymentSchedule;
                    DateTime date = DateTime.ParseExact(strDate, "dd/MM/yyyy", null);
                    parentpaymentreceived.datePaymentSchedule = date;
                    string strSQL = "INSERT INTO  parentpaymentinsurance(InvoiceNo,InvoiceDate,CreditInvoice,InsuranceName,Amount,ReceivedPayment,PendingAmount,Status,PendingNotification,PaymentSchedule) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", parentpaymentreceived.InvoiceNo);
                    cmd.Parameters.AddWithValue("@val2", parentpaymentreceived.InvoiceDate);
                    cmd.Parameters.AddWithValue("@val3", parentpaymentreceived.CreditInvoice);
                    cmd.Parameters.AddWithValue("@val4", parentpaymentreceived.InsuranceName);
                    cmd.Parameters.AddWithValue("@val5", parentpaymentreceived.Amount);
                    cmd.Parameters.AddWithValue("@val6", parentpaymentreceived.ReceivedPayment);
                    cmd.Parameters.AddWithValue("@val7", parentpaymentreceived.PendingAmount);
                    cmd.Parameters.AddWithValue("@val8", parentpaymentreceived.Status);
                    cmd.Parameters.AddWithValue("@val9", parentpaymentreceived.PendingNotification);
                    cmd.Parameters.AddWithValue("@val10", parentpaymentreceived.datePaymentSchedule);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion


        #region insertParentPaymentHospital
        /// <summary>
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertParentPaymentHospital")]
        [HttpPost]
        public void insertParentPaymentHospital(ParentPaymentHospital parentpaymentreceived)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strDate = parentpaymentreceived.strPaymentSchedule;

                    DateTime date = DateTime.ParseExact(strDate, "dd/MM/yyyy", null);
                    parentpaymentreceived.datePaymentSchedule = date;

                    string strSQL = "INSERT INTO  parentpaymentHospital(InvoiceNo,InvoiceDate,CreditInvoice,HospitalName,Amount,ReceivedPayment,PendingAmount,Status,PendingNotification,PaymentSchedule) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", parentpaymentreceived.InvoiceNo);
                    cmd.Parameters.AddWithValue("@val2", parentpaymentreceived.InvoiceDate);
                    cmd.Parameters.AddWithValue("@val3", parentpaymentreceived.CreditInvoice);
                    cmd.Parameters.AddWithValue("@val4", parentpaymentreceived.HospitalName);
                    cmd.Parameters.AddWithValue("@val5", parentpaymentreceived.Amount);
                    cmd.Parameters.AddWithValue("@val6", parentpaymentreceived.ReceivedPayment);
                    cmd.Parameters.AddWithValue("@val7", parentpaymentreceived.PendingAmount);
                    cmd.Parameters.AddWithValue("@val8", parentpaymentreceived.Status);
                    cmd.Parameters.AddWithValue("@val9", parentpaymentreceived.PendingNotification);
                    cmd.Parameters.AddWithValue("@val10", parentpaymentreceived.datePaymentSchedule);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region insertTestMultipleComponents
        /// <summary>
        /// Table - insert testMultipleComponents
        /// </summary>
        /// <param name="testMultipleComponents"></param>
        [Route("api/Account/insertTestMultipleComponents")]
        [HttpPost]
        public void insertTestMultipleComponents(TestMultipleComponents testMultipleComponents)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  TestMultipleComponents(TestCode,ElementName,Color,Units,Comments,CriticalLow,CriticalHigh,ReferenceLow,ReferenceHigh,CommentsType,Methodology,PriorityStatus) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", testMultipleComponents.TestCode);
                    cmd.Parameters.AddWithValue("@val2", testMultipleComponents.ElementName);
                    cmd.Parameters.AddWithValue("@val3", testMultipleComponents.Color);
                    cmd.Parameters.AddWithValue("@val4", testMultipleComponents.Units);
                    cmd.Parameters.AddWithValue("@val5", testMultipleComponents.Comments);
                    cmd.Parameters.AddWithValue("@val6", testMultipleComponents.CriticalLow);
                    cmd.Parameters.AddWithValue("@val7", testMultipleComponents.CriticalHigh);
                    cmd.Parameters.AddWithValue("@val8", testMultipleComponents.ReferenceLow);
                    cmd.Parameters.AddWithValue("@val9", testMultipleComponents.ReferenceHigh);
                    cmd.Parameters.AddWithValue("@val10", testMultipleComponents.CommentsType);
                    cmd.Parameters.AddWithValue("@val11", testMultipleComponents.Methodology);
                    cmd.Parameters.AddWithValue("@val12", 0);

                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region getAllAgeRefferencesByTestCode
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getAllAgeRefferencesByTestCode")]
        [HttpGet]
        public List<Agewisereferencevalue> getAllAgeRefferencesByTestCode(string testCode, string dob, string age, string sex)
        {
            List<Agewisereferencevalue> allReferenceRanges = new List<Agewisereferencevalue>();
            DataTable dt = new DataTable();
            DataTable dtDefault = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";

                    strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= 0  and EndYear >= 200 and TestCode = '" + testCode + "'";
                    conn.Open();

                    MySqlDataAdapter mydataDefault = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmdDefault = new MySqlCommandBuilder(mydataDefault);
                    DataSet dsDefault = new DataSet();
                    mydataDefault.Fill(dsDefault);
                    dtDefault = dsDefault.Tables[0];

                    if (dtDefault.Rows.Count == 0)
                    {
                        if (Convert.ToInt32(age) >= 1)
                        {
                            strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "'";

                        }
                        else
                        {
                            DateTime dateOfBirth = Convert.ToDateTime(dob);
                            DateTime todayDate = DateTime.Now;
                            double daysDifferent = (todayDate - dateOfBirth).TotalDays;
                            if (daysDifferent >= 31)
                            {
                                double monthDifferent = daysDifferent / 31;
                                strSQL = "SELECT * FROM agewisereferencevalue where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "'";

                            }

                            else
                            {

                                strSQL = "SELECT * FROM agewisereferencevalue where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "'";
                            }
                        }


                        //conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count != 1)
                        {

                            if (Convert.ToInt32(age) >= 1)
                            {
                                strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "' and Sex='" + sex + "'";

                            }
                            else
                            {
                                DateTime dateOfBirth = Convert.ToDateTime(dob);
                                DateTime todayDate = DateTime.Now;
                                double daysDifferent = (todayDate - dateOfBirth).TotalDays;
                                if (daysDifferent >= 30)
                                {
                                    double monthDifferent = daysDifferent / 30;
                                    strSQL = "SELECT * FROM agewisereferencevalue where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "' and Sex='" + sex + "'";

                                }

                                else
                                {

                                    strSQL = "SELECT * FROM agewisereferencevalue where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "'and Sex='" + sex + "'";
                                }
                            }
                            DataTable dta = new DataTable();
                            MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
                            DataSet dsa = new DataSet();
                            mydataa.Fill(dsa);
                            dta = dsa.Tables[0];
                            foreach (DataRow dra in dta.Rows)
                            {
                                if (dra != null)
                                {
                                    Agewisereferencevalue agewiseReferenceValue1 = new Agewisereferencevalue();

                                    agewiseReferenceValue1.LowUpperReferenceValue = dra["LowUpperReferenceValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
                                    agewiseReferenceValue1.StartYear = dra["StartYear"].ToString();
                                    agewiseReferenceValue1.EndYear = dra["EndYear"].ToString();
                                    agewiseReferenceValue1.StartMonth = dra["StartMonth"].ToString();
                                    agewiseReferenceValue1.EndMonth = dra["EndMonth"].ToString();
                                    agewiseReferenceValue1.StartDay = dra["StartDay"].ToString();
                                    agewiseReferenceValue1.EndDay = dra["EndDay"].ToString();
                                    agewiseReferenceValue1.FreeText = dra["FreeText"].ToString();

                                    if (agewiseReferenceValue1.StartYear != null && agewiseReferenceValue1.EndYear != null)
                                    {

                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYear + "-" + agewiseReferenceValue1.EndYear;
                                    }
                                    else if (agewiseReferenceValue1.StartDay == null && agewiseReferenceValue1.EndDay == null)
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDay + "-" + agewiseReferenceValue1.EndDay;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonth + "-" + agewiseReferenceValue1.EndMonth;
                                    }
                                    allReferenceRanges.Clear();
                                    allReferenceRanges.Add(agewiseReferenceValue1);

                                }
                            }
                        }



                        else if (dt.Rows.Count == 1)
                        {
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    Agewisereferencevalue agewiseReferenceValue = new Agewisereferencevalue();

                                    agewiseReferenceValue.LowUpperReferenceValue = dr["LowUpperReferenceValue"].ToString();
                                    agewiseReferenceValue.DisplayText = dr["DisplayValue"].ToString();
                                    agewiseReferenceValue.StartYear = dr["StartYear"].ToString();
                                    agewiseReferenceValue.EndYear = dr["EndYear"].ToString();
                                    agewiseReferenceValue.StartMonth = dr["StartMonth"].ToString();
                                    agewiseReferenceValue.EndMonth = dr["EndMonth"].ToString();
                                    agewiseReferenceValue.StartDay = dr["StartDay"].ToString();
                                    agewiseReferenceValue.EndDay = dr["EndDay"].ToString();
                                    agewiseReferenceValue.FreeText = dr["FreeText"].ToString();

                                    if (agewiseReferenceValue.StartYear != null && agewiseReferenceValue.EndYear != null)
                                    {

                                        agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartYear + "-" + agewiseReferenceValue.EndYear;
                                    }
                                    else if (agewiseReferenceValue.StartDay == null && agewiseReferenceValue.EndDay == null)
                                    {
                                        agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartDay + "-" + agewiseReferenceValue.EndDay;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonth + "-" + agewiseReferenceValue.EndMonth;
                                    }

                                    allReferenceRanges.Add(agewiseReferenceValue);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (dtDefault.Rows.Count == 1)
                        {

                            foreach (DataRow dr in dtDefault.Rows)
                            {
                                Agewisereferencevalue agewiseReferenceValue = new Agewisereferencevalue();

                                agewiseReferenceValue.LowUpperReferenceValue = dr["LowUpperReferenceValue"].ToString();
                                agewiseReferenceValue.DisplayText = dr["DisplayValue"].ToString();
                                agewiseReferenceValue.StartYear = dr["StartYear"].ToString();
                                agewiseReferenceValue.EndYear = dr["EndYear"].ToString();
                                agewiseReferenceValue.StartMonth = dr["StartMonth"].ToString();
                                agewiseReferenceValue.EndMonth = dr["EndMonth"].ToString();
                                agewiseReferenceValue.StartDay = dr["StartDay"].ToString();
                                agewiseReferenceValue.EndDay = dr["EndDay"].ToString();
                                agewiseReferenceValue.FreeText = dr["FreeText"].ToString();

                                if (agewiseReferenceValue.StartYear != null && agewiseReferenceValue.EndYear != null)
                                {

                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartYear + "-" + agewiseReferenceValue.EndYear;
                                }
                                else if (agewiseReferenceValue.StartDay == null && agewiseReferenceValue.EndDay == null)
                                {
                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartDay + "-" + agewiseReferenceValue.EndDay;
                                }
                                else
                                {
                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonth + "-" + agewiseReferenceValue.EndMonth;
                                }

                                allReferenceRanges.Add(agewiseReferenceValue);
                            }

                        }

                        else if (dtDefault.Rows.Count != 1)
                        {

                            strSQL = "SELECT * FROM agewisereferencevalue where StartDay <= 0  and EndDay >= 200 and TestCode = '" + testCode + "'and Sex='" + sex + "'";
                            DataTable dta = new DataTable();
                            MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
                            DataSet dsa = new DataSet();
                            mydataa.Fill(dsa);
                            dta = dsa.Tables[0];
                            foreach (DataRow dra in dta.Rows)
                            {
                                if (dra != null)
                                {
                                    Agewisereferencevalue agewiseReferenceValue1 = new Agewisereferencevalue();

                                    agewiseReferenceValue1.LowUpperReferenceValue = dra["LowUpperReferenceValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
                                    agewiseReferenceValue1.StartYear = dra["StartYear"].ToString();
                                    agewiseReferenceValue1.EndYear = dra["EndYear"].ToString();
                                    agewiseReferenceValue1.StartMonth = dra["StartMonth"].ToString();
                                    agewiseReferenceValue1.EndMonth = dra["EndMonth"].ToString();
                                    agewiseReferenceValue1.StartDay = dra["StartDay"].ToString();
                                    agewiseReferenceValue1.EndDay = dra["EndDay"].ToString();
                                    agewiseReferenceValue1.FreeText = dra["FreeText"].ToString();
                                    if (agewiseReferenceValue1.StartYear != null && agewiseReferenceValue1.EndYear != null)
                                    {

                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYear + "-" + agewiseReferenceValue1.EndYear;
                                    }
                                    else if (agewiseReferenceValue1.StartDay == null && agewiseReferenceValue1.EndDay == null)
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDay + "-" + agewiseReferenceValue1.EndDay;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonth + "-" + agewiseReferenceValue1.EndMonth;
                                    }
                                    allReferenceRanges.Clear();
                                    allReferenceRanges.Add(agewiseReferenceValue1);

                                }
                            }
                        }
                    }


                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return allReferenceRanges;
            }
        }
        #endregion


        #region getAllfromParentPaymentInsurance
        /// <summary>
        /// Table -
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllfromParentPaymentInsurance")]
        [HttpGet]
        public ParentPaymentInsurance getAllfromParentPaymentInsurance(string Insurancename)
        {
            ParentPaymentInsurance paymentReceived = new ParentPaymentInsurance();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  parentpaymentinsurance where InsuranceName='" + Insurancename + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            paymentReceived.InvoiceId = (int)dr["InvoiceId"];
                            paymentReceived.InvoiceNo = dr["InvoiceNo"].ToString();
                            paymentReceived.InvoiceDate = Convert.ToDateTime(dr["InvoiceDate"]);
                            paymentReceived.CreditInvoice = dr["CreditInvoice"].ToString();
                            paymentReceived.InsuranceName = dr["InsuranceName"].ToString();
                            paymentReceived.Amount = (double)dr["Amount"];
                            paymentReceived.ReceivedPayment = (double)dr["ReceivedPayment"];
                            paymentReceived.PendingAmount = (double)dr["PendingAmount"];
                            paymentReceived.Status = dr["Status"].ToString();
                            paymentReceived.PendingNotification = dr["PendingNotification"].ToString();
                            paymentReceived.datePaymentSchedule = Convert.ToDateTime(dr["PaymentSchedule"]);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return paymentReceived;
            }
        }
        #endregion

        #region getAllfromParentPaymentHospital
        /// <summary>
        /// Table -
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllfromParentPaymentHospital")]
        [HttpGet]
        public ParentPaymentHospital getAllfromParentPaymentHospital(string Hospitalname)
        {
            ParentPaymentHospital paymentReceived = new ParentPaymentHospital();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  parentpaymenthospital where HospitalName='" + Hospitalname + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            paymentReceived.InvoiceId = (int)dr["InvoiceId"];
                            paymentReceived.InvoiceNo = dr["InvoiceNo"].ToString();
                            paymentReceived.InvoiceDate = Convert.ToDateTime(dr["InvoiceDate"]);
                            paymentReceived.CreditInvoice = dr["CreditInvoice"].ToString();
                            paymentReceived.HospitalName = dr["HospitalName"].ToString();
                            paymentReceived.Amount = (double)dr["Amount"];
                            paymentReceived.ReceivedPayment = (double)dr["ReceivedPayment"];
                            paymentReceived.PendingAmount = (double)dr["PendingAmount"];
                            paymentReceived.Status = dr["Status"].ToString();
                            paymentReceived.PendingNotification = dr["PendingNotification"].ToString();
                            paymentReceived.datePaymentSchedule = Convert.ToDateTime(dr["PaymentSchedule"]);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return paymentReceived;
            }
        }
        #endregion

        #region updateRegistrationDetails
        /// <summary>
        /// Table - patientregistration
        /// Edit and Update patientregistration details using reg ID from patientregistration table.
        /// </summary>
        /// <param name="patientRegistration"></param>
        [Route("api/Account/updateRegistrationDetails")]
        [HttpPost]
        public void updateRegistrationDetails(PatientRegistration patientRegistration)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE   patientregistration SET FirstName='" + patientRegistration.FirstName + "',LastName='" + patientRegistration.LastName + "',PhoneNumber='" + patientRegistration.PhoneNumber + "',Sex= '" + patientRegistration.Sex + "'where RegID='" + patientRegistration.RegID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region getReportByMrdNo
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportByMrdNo")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getReportByMrdNo(string mrdNo)
        {
            List<BoneMarrowAspirationNew> bonemarrowaspiration = new List<BoneMarrowAspirationNew>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + mrdNo + "' order by ElementId Asc";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            BoneMarrowAspirationNew bonemarrowaspirations = new BoneMarrowAspirationNew();
                            bonemarrowaspirations.MrdNo = dr["MrdNo"].ToString();
                            bonemarrowaspirations.TestCode = dr["TestCode"].ToString();
                            bonemarrowaspirations.TestName = dr["TestName"].ToString();
                            bonemarrowaspirations.ElementId = (int)dr["ElementId"];
                            bonemarrowaspirations.ElementName = dr["ElementName"].ToString();
                            bonemarrowaspirations.TemplateName = dr["TemplateName"].ToString();
                            bonemarrowaspirations.TemplateDescription = dr["TemplateDescription"].ToString();
                            bonemarrowaspiration.Add(bonemarrowaspirations);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return bonemarrowaspiration;
            }
        }
        #endregion


        #region getReportByMrdNoCommon
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportByMrdNoCommon")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getReportByMrdNoCommon(string mrdNo)
        {
            List<BoneMarrowAspirationNew> bonemarrowaspiration = new List<BoneMarrowAspirationNew>();
            DataTable dt = new DataTable();
            DataTable dt1 = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT Distinct(TestCode) FROM  bonemarrowaspiration where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //  bonemarrowaspirations.MrdNo = dr["MrdNo"].ToString();
                            var TestCode = dr["TestCode"].ToString();
                            var TestName = "";
                            //   bonemarrowaspirations.TestName = dr["TestName"].ToString();
                            string strSQL1 = "SELECT distinct bonemarrowaspirationid,ElementName,Status,TemplateDescription FROM  bonemarrowaspiration where TestCode='" + TestCode + "' and MrdNo='" + mrdNo + "' order by ElementId asc, bonemarrowaspirationid";

                            MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                            MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata1);
                            DataSet ds1 = new DataSet();
                            mydata1.Fill(ds1);
                            dt1 = ds1.Tables[0];
                            foreach (DataRow dr1 in dt1.Rows)
                            {
                                if (dr1 != null)
                                {
                                    if (dr1["ElementName"] != DBNull.Value)
                                    {

                                        string getname = "SELECT distinct TestName from  childtestlist where TestCode='" + TestCode + "'";

                                        MySqlDataAdapter getnameData = new MySqlDataAdapter(getname, conn);
                                        MySqlCommandBuilder getnamecmd = new MySqlCommandBuilder(getnameData);
                                        DataSet getnameds = new DataSet();
                                        DataTable getnamedt = new DataTable();
                                        getnameData.Fill(getnameds);
                                        getnamedt = getnameds.Tables[0];
                                        if (getnamedt.Rows[0]["TestName"] != null)
                                        {
                                            TestName = getnamedt.Rows[0]["TestName"].ToString();
                                        }
                                        BoneMarrowAspirationNew bonemarrowaspirations = new BoneMarrowAspirationNew();
                                        bonemarrowaspirations.bonemarrowaspirationid = Convert.ToInt32(dr1["bonemarrowaspirationid"].ToString());
                                        bonemarrowaspirations.TestName = TestName;
                                        bonemarrowaspirations.ElementName = dr1["ElementName"].ToString();
                                        bonemarrowaspirations.TemplateDescription = dr1["TemplateDescription"].ToString();
                                        bonemarrowaspirations.Status = Convert.ToInt32(dr1["Status"].ToString());
                                        bonemarrowaspirations.select = false;
                                        bonemarrowaspiration.Add(bonemarrowaspirations);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return bonemarrowaspiration;
            }
        }
        #endregion


        #region getReportByMrdNoTestCode
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportByMrdNoTestCode")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getReportByMrdNoTestCode(string mrdNo, string testCode)
        {
            List<BoneMarrowAspirationNew> bonemarrowaspiration = new List<BoneMarrowAspirationNew>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + mrdNo + "' and TestCode ='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            BoneMarrowAspirationNew bonemarrowaspirations = new BoneMarrowAspirationNew();

                            bonemarrowaspirations.MrdNo = dr["MrdNo"].ToString();
                            bonemarrowaspirations.TestCode = testCode;
                            bonemarrowaspirations.TestName = dr["TestName"].ToString();
                            bonemarrowaspirations.ElementId = Convert.ToInt32(dr["ElementId"]);
                            bonemarrowaspirations.ElementName = dr["ElementName"].ToString();
                            bonemarrowaspirations.TemplateName = dr["TemplateName"].ToString();
                            bonemarrowaspirations.TemplateDescription = dr["TemplateDescription"].ToString();
                            bonemarrowaspiration.Add(bonemarrowaspirations);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return bonemarrowaspiration;
            }
        }
        #endregion

        #region getReportForApprover
        /// <summary>

        /// <returns></returns>
        [Route("api/Account/getReportForApprover")]
        [HttpGet]
        public List<ResultLabTech> getReportForApprover(string mrdNo)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string crictical = "";
                    string preHistory = "";
                    string preHistorySql = "";
                    //string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1 and ProfilePriority=4";

                    string strSQL = "select distinct rt.ResultLabId,rt.RegId,rt.PatientID,rt.MrdNo,vd.TestType,rt.Result,rt.TestCode,rt.TestName,rt.DefaultValues,rt.CriticalValue,rt.Units,rt.Comment1, " +
                                    " rt.Comment2,rt.SpecialComments,rt.EndRange,rt.StartRange,rt.AdditionalFixedComments,rt.Methodology,rt.DisplayValueText,rt.SampleContainer,rt.FreeText, " +
                                    " rt.NormalValuesFiled,rt.Status,ct.CalculationPresent,cl.splcalculation,cl.CalculationType,test.Units as MultiUnits" +
                                    " ,vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID" +
                                    " from  resultlabtest rt " +
                                    " inner join viewlistdetails vd on vd.MrdNo = rt.MrdNo " +
                                    " inner join ChildTestList ct on rt.TestCode=ct.TestCode " +
                                    " left join  calculationfortestdetails cl on rt.TestCode=cl.TestCode and rt.TestName=cl.Elements and cl.splcalculation is not null " +
                                    " left join testmultiplecomponents test on rt.TestCode=test.TestCode and rt.TestName =test.ElementName and test.ElementName is not null " +
                                    " where vd.MrdNo = '" + mrdNo + "' and rt.confirmFlag = 1 and vd.TestName = rt.TestName " +
                                    " Order by vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID, " +
                                    " rt.ResultLabId,rt.RegId,rt.PatientID,rt.MrdNo,vd.TestType,rt.Result,rt.TestCode,rt.TestName,rt.DefaultValues" +
                                    " ,rt.CriticalValue,rt.Units,rt.Comment1,rt.Comment2,rt.SpecialComments,rt.EndRange,rt.StartRange, " +
                                    " rt.AdditionalFixedComments,rt.Methodology,rt.DisplayValueText,rt.SampleContainer,rt.FreeText," +
                                    " rt.NormalValuesFiled,rt.Status,ct.CalculationPresent,cl.splcalculation,cl.CalculationType,MultiUnits ";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            if (Convert.ToInt32(dr["TestType"].ToString()) == 2)
                            {

                                preHistorySql = "SELECT * FROM  bonemarrowaspiration where PatientID='" + (dr["PatientID"].ToString()) + "' and TestCode='" + dr["TestCode"].ToString() + "' and MrdNo!='" + dr["MrdNo"].ToString() + "'";
                            }
                            if (Convert.ToInt32(dr["TestType"].ToString()) == 3)
                            {

                                preHistorySql = "SELECT * FROM  culturetestresult where PatientID='" + (dr["PatientID"].ToString()) + "' and TestCode='" + dr["TestCode"].ToString() + "' and MrdNo!='" + dr["MrdNo"].ToString() + "'";
                            }
                            else if (Convert.ToInt32(dr["TestType"].ToString()) == 1)
                            {
                                preHistorySql = "SELECT Result FROM  labtesthistory where PatientID='" + (dr["PatientID"].ToString()) + "' and TestCode='" + dr["TestCode"].ToString() + "' and TestName='" + dr["TestName"].ToString() + "' " +
                                                                       " and MrdNo <>'" + mrdNo + "' ORDER BY CreateDate DESC,ResultLabId DESC LIMIT  1;";
                            }
                            else if (Convert.ToInt32(dr["TestType"].ToString()) == 4)
                            {
                                preHistorySql = "SELECT Result FROM  labtesthistory where PatientID='" + (dr["PatientID"].ToString()) + "' and TestCode='" + dr["TestCode"].ToString() + "' " +
                                                " and MrdNo <>'" + mrdNo + "' ORDER BY CreateDate DESC,ResultLabId DESC LIMIT  1";
                            }


                            string apprpregRefRange = "";
                            apprpregRefRange = GetPregRefRange(dr["TestCode"].ToString(), mrdNo);


                            MySqlDataAdapter preHistData = new MySqlDataAdapter(preHistorySql, conn);
                            MySqlCommandBuilder preHistCmd = new MySqlCommandBuilder(preHistData);
                            DataSet preHistDS = new DataSet();
                            preHistData.Fill(preHistDS);
                            DataTable preHistDT = new DataTable();
                            preHistDT = preHistDS.Tables[0];

                            if (preHistDT.Rows.Count > 0)
                            {
                                if ((Convert.ToInt32(dr["TestType"].ToString()) != 2) && (Convert.ToInt32(dr["TestType"].ToString()) != 3))
                                {
                                    if ((preHistDT.Rows[0]["Result"] != DBNull.Value))
                                    {
                                        preHistory = preHistDT.Rows[0]["Result"].ToString();
                                    }
                                }
                                else if ((Convert.ToInt32(dr["TestType"].ToString()) == 2)) { preHistory = "Yes"; }
                                else if ((Convert.ToInt32(dr["TestType"].ToString()) == 3)) { preHistory = "Yes"; }
                            }
                            else { preHistory = "-NA-"; }


                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.resultlabtestID = Convert.ToInt32(dr["ResultLabId"].ToString());
                            resultLabTech.RegId = Convert.ToInt32(dr["RegId"]);
                            resultLabTech.PatientID = (dr["PatientID"]).ToString();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.TestType = dr["TestType"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestCode"].ToString() + "-" + dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            if (dr["Units"] != DBNull.Value)
                            {
                                resultLabTech.Units = dr["Units"].ToString();
                            }
                            else if (dr["MultiUnits"] != DBNull.Value)
                            {
                                resultLabTech.Units = dr["MultiUnits"].ToString();
                            }
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            resultLabTech.Methodology = dr["Methodology"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
                            resultLabTech.FreeText = dr["FreeText"].ToString();
                            if (apprpregRefRange != "")
                            {
                                resultLabTech.NormalValuesFiled = apprpregRefRange;
                            }
                            else
                            {
                                if (dr["NormalValuesFiled"] != DBNull.Value)
                                {
                                    resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                                }
                                else
                                {
                                    resultLabTech.NormalValuesFiled = "";
                                }
                            }
                            resultLabTech.Status = (int)dr["Status"];
                            resultLabTech.CalculationPresent = dr["CalculationPresent"].ToString();
                            resultLabTech.Splcalculation = dr["splcalculation"].ToString();
                            resultLabTech.CalculationType = dr["CalculationType"].ToString();
                            resultLabTech.PreHistory = preHistory;
                            resultLabTech.PregRefRange = apprpregRefRange;


                            var normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "[a-zA-Z]");
                            var normalValuenew = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "[a-zA-Z]");

                            if (resultLabTech.NormalValuesFiled != null && resultLabTech.NormalValuesFiled != "" && resultLabTech.NormalValuesFiled != "undefined-undefined" && !normalValue)
                            {
                                if ((!normalValuenew) && (resultLabTech.TestType != "1"))
                                {
                                    double result = 0.0;
                                    string[] NormalValuesFiled = resultLabTech.NormalValuesFiled.Split('-');
                                    double low = Convert.ToDouble(NormalValuesFiled[0]);
                                    double high = Convert.ToDouble(NormalValuesFiled[1]);
                                    if ((resultLabTech.Result != "") || (!string.IsNullOrEmpty(Convert.ToString(resultLabTech.Result))))
                                    {
                                        var checkBool = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.Result, "|!#$%&/()=?»«@£§€{}.-;'<>_,");
                                        if (checkBool == true)
                                        {
                                            var checkResult = System.Text.RegularExpressions.Regex.Replace(resultLabTech.Result, @"[^a-zA-Z0-9_]+", string.Empty);
                                            checkResult = checkResult.Trim();
                                            result = Convert.ToDouble(checkResult);
                                        }
                                        else
                                        {
                                            result = Convert.ToDouble(resultLabTech.Result);
                                        }
                                    }
                                    else
                                    {
                                        result = 0.0;
                                    }
                                    if (result >= low && result <= high)
                                    {
                                        crictical = "true";
                                    }
                                    else
                                    {
                                        crictical = "false";
                                    }
                                }
                                else { crictical = "false"; }
                            }
                            resultLabTech.CricticalResult = crictical;
                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getReportForAmmend
        /// <summary>

        /// <returns></returns>
        [Route("api/Account/getReportForAmmend")]
        [HttpGet]
        public List<ResultLabTech> getReportForAmmend(string mrdNo)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string crictical = "";
                    //string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1 and ProfilePriority=4";
                    //string strSQL = "select distinct * from viewlistdetails vd inner join " +
                    //                "  resultlabtest rt on vd.MrdNo = rt.MrdNo where vd.MrdNo = '" + mrdNo + "' and vd.TestName = rt.TestName and rt.confirmFlag = 1 " +
                    //                " and rt.Status=1 Order by vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID ";
                    //new code added
                    string strSQL = "select distinct rt.ResultLabId,rt.RegId,rt.PatientID,rt.MrdNo,vd.TestType,rt.Result,rt.TestCode,rt.TestName,rt.DefaultValues,rt.CriticalValue,rt.Units,rt.Comment1, " +
                                    " rt.Comment2,rt.SpecialComments,rt.EndRange,rt.StartRange,rt.AdditionalFixedComments,rt.Methodology,rt.DisplayValueText,rt.SampleContainer,rt.FreeText, " +
                                    " rt.NormalValuesFiled,rt.Status,ct.CalculationPresent,cl.splcalculation,cl.CalculationType,test.Units as MultiUnits" +
                                    " ,vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID" +
                                    " from  resultlabtest rt " +
                                    " inner join viewlistdetails vd on vd.MrdNo = rt.MrdNo " +
                                    " inner join ChildTestList ct on rt.TestCode=ct.TestCode " +
                                    " left join  calculationfortestdetails cl on rt.TestCode=cl.TestCode and rt.TestName=cl.Elements and cl.splcalculation is not null " +
                                    " left join testmultiplecomponents test on rt.TestCode=test.TestCode and rt.TestName =test.ElementName and test.ElementName is not null " +
                                    " where vd.MrdNo = '" + mrdNo + "' and rt.confirmFlag = 1 and vd.TestName = rt.TestName " +
                                    " Order by vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID, " +
                                    " rt.ResultLabId,rt.RegId,rt.PatientID,rt.MrdNo,vd.TestType,rt.Result,rt.TestCode,rt.TestName,rt.DefaultValues" +
                                    " ,rt.CriticalValue,rt.Units,rt.Comment1,rt.Comment2,rt.SpecialComments,rt.EndRange,rt.StartRange, " +
                                    " rt.AdditionalFixedComments,rt.Methodology,rt.DisplayValueText,rt.SampleContainer,rt.FreeText," +
                                    " rt.NormalValuesFiled,rt.Status,ct.CalculationPresent,cl.splcalculation,cl.CalculationType,MultiUnits ";

                    //new code ended
                    //string strSQL = "select distinct rt.ResultLabId,rt.RegId,rt.PatientID,rt.MrdNo,vd.TestType,rt.Result,rt.TestCode,rt.TestName,rt.DefaultValues,rt.CriticalValue,rt.Units,rt.Comment1, " +
                    //                " rt.Comment2,rt.SpecialComments,rt.EndRange,rt.StartRange,rt.AdditionalFixedComments,rt.Methodology,rt.DisplayValueText,rt.SampleContainer,rt.FreeText, " +
                    //                " rt.NormalValuesFiled,rt.Status,ct.CalculationPresent,cl.splcalculation,cl.CalculationType, " +
                    //                " vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID" +
                    //                " from  resultlabtest rt " +
                    //                " inner join viewlistdetails vd on vd.MrdNo = rt.MrdNo " +
                    //                " inner join ChildTestList ct on rt.TestCode=ct.TestCode " +
                    //                " left join  calculationfortestdetails cl on rt.TestCode=cl.TestCode and cl.splcalculation is not null " +
                    //                " where vd.MrdNo ='" + mrdNo + "' and rt.confirmFlag = 1 and vd.TestName = rt.TestName " +
                    //                " Order by " +
                    //                " vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID, " +
                    //                " rt.ResultLabId,rt.RegId,rt.PatientID,rt.MrdNo,vd.TestType,rt.Result,rt.TestCode,rt.TestName," +
                    //                " rt.DefaultValues,rt.CriticalValue,rt.Units,rt.Comment1, rt.Comment2,rt.SpecialComments,rt.EndRange," +
                    //                " rt.StartRange,rt.AdditionalFixedComments,rt.Methodology,rt.DisplayValueText,rt.SampleContainer,rt.FreeText," +
                    //                " rt.NormalValuesFiled,rt.Status,ct.CalculationPresent,cl.splcalculation,cl.CalculationType";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.resultlabtestID = Convert.ToInt32(dr["ResultLabId"].ToString());
                            resultLabTech.RegId = Convert.ToInt32(dr["RegId"]);
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.TestType = dr["TestType"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestCode"].ToString() + "-" + " " + dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            resultLabTech.Methodology = dr["Methodology"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
                            resultLabTech.FreeText = dr["FreeText"].ToString();
                            resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                            resultLabTech.Status = (int)dr["Status"];

                            var normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "[a-zA-Z]");
                            var normalValuenew = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "[a-zA-Z]");

                            if (resultLabTech.NormalValuesFiled != null && resultLabTech.NormalValuesFiled != "" && resultLabTech.NormalValuesFiled != "undefined-undefined" && !normalValue)
                            {

                                if (!normalValuenew)
                                {
                                    double result = 0.0;
                                    string[] NormalValuesFiled = resultLabTech.NormalValuesFiled.Split('-');
                                    double low = Convert.ToDouble(NormalValuesFiled[0]);
                                    double high = Convert.ToDouble(NormalValuesFiled[1]);
                                    if ((resultLabTech.Result != "") || (!string.IsNullOrEmpty(Convert.ToString(resultLabTech.Result))))
                                    {
                                        result = Convert.ToDouble(resultLabTech.Result);
                                    }
                                    else
                                    {
                                        result = 0.0;
                                    }
                                    if (result >= low && result <= high)
                                    {
                                        crictical = "true";
                                    }
                                    else
                                    {
                                        crictical = "false";
                                    }

                                }


                            }

                            resultLabTech.CricticalResult = crictical;

                            lstResultLabTech.Add(resultLabTech);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getReportLabTestResultByMrdNo
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportLabTestResultByMrdNo")]
        [HttpGet]
        public List<ResultLabTech> getReportLabTestResultByMrdNo(string mrdNo)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string crictical = "";
                    // string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1 and Status=1";
                    string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.resultlabtestID = Convert.ToInt32(dr["ResultLabId"].ToString());
                            resultLabTech.RegId = Convert.ToInt32(dr["RegId"]);
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.TestType = dr["ProfilePriority"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            resultLabTech.Methodology = dr["Methodology"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
                            resultLabTech.FreeText = dr["FreeText"].ToString();
                            resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                            resultLabTech.Status = (int)dr["Status"];
                            resultLabTech.PatientID = (dr["PatientID"]).ToString();
                            // resultLabTech.CreateDate = Convert.ToDateTime(dr["CreateDate"].ToString());

                            var normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "^[a-zA-Z]+$");

                            if (resultLabTech.NormalValuesFiled != null && resultLabTech.NormalValuesFiled != "" && resultLabTech.NormalValuesFiled != "undefined-undefined" && !normalValue)
                            {
                                string[] NormalValuesFiled = resultLabTech.NormalValuesFiled.Split('-');
                                double low = Convert.ToDouble(NormalValuesFiled[0]);
                                double high = Convert.ToDouble(NormalValuesFiled[1]);
                                double result = Convert.ToDouble(resultLabTech.Result);
                                if (result >= low && result <= high)
                                {
                                    crictical = "true";
                                }
                                else
                                {
                                    crictical = "false";
                                }
                            }

                            resultLabTech.CricticalResult = crictical;

                            lstResultLabTech.Add(resultLabTech);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion


        #region getReportLabTestResultByTestCodeMrdNo
        /// <summary>
        /// Table - resultlabtest
        /// </summary>
        /// get   values from resultlabtest table
        /// <returns></returns>
        [Route("api/Account/getReportLabTestResultByTestCodeMrdNo")]
        [HttpGet]
        public List<ResultLabTech> getReportLabTestResultByTestCodeMrdNo(string mrdNo, string testCode)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and TestCode ='" + testCode + "'";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            resultLabTech.Methodology = dr["Methodology"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
                            lstResultLabTech.Add(resultLabTech);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getReportLabTestResultByTestCode
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportLabTestResultByTestCode")]
        [HttpGet]
        public List<ChildTestList> getReportLabTestResultByTestCode(string testcode)
        {
            List<ChildTestList> lstResultLabTech = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  childtestlist where TestCode='" + testcode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            ChildTestList resultLabTech = new ChildTestList();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.Outsourced = dr["Outsourced"].ToString();
                            resultLabTech.Methodology = dr["Methodology"].ToString();
                            resultLabTech.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            lstResultLabTech.Add(resultLabTech);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region insertbarCode
        /// <summary>
        /// Table - CommanSampleContainer
        /// </summary>
        /// Inserted the CommanSampleContainer table values.
        /// <param name="commonSampleContainer"></param>
        [Route("api/Account/insertbarCode")]
        [HttpPost]
        public void insertbarCode(BarCode barcode)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO  barcode(RegID,PatientName,MrdNo,BarCodeKey) VALUES(@val1,@val2,@val3,@val4)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", barcode.RegID);
                    cmd.Parameters.AddWithValue("@val2", barcode.PatientName);
                    cmd.Parameters.AddWithValue("@val3", barcode.MrdNo);
                    cmd.Parameters.AddWithValue("@val4", barcode.BarCodeKey);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion
        #region insertRateCard
        /// <summary>
        /// Table -  RateCard
        /// Inserted the RateCard table values.
        /// </summary>
        /// <param name="RateCard"></param>
        [Route("api/Account/insertRateCard")]
        [HttpPost]
        public void insertRateCard(RateCard rateCard)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string chkSql = "";
                    string updSQL = "";
                    var profile = "";
                    var test = "";
                    conn.Open();
                    if (rateCard.ProfileCode != "" && rateCard.TestCode == null)
                    {
                        chkSql = "select * from RateCard where ProfileCode='" + rateCard.ProfileCode + "'";
                        profile = "yes";
                        test = "no";
                    }
                    else if (rateCard.ProfileCode == null && rateCard.TestCode != "")
                    {
                        chkSql = "select * from RateCard where TestCode='" + rateCard.TestCode + "'";
                        profile = "no";
                        test = "yes";
                    }
                    MySqlDataAdapter sda = new MySqlDataAdapter(chkSql, conn);
                    MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    sda.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        updSQL = "update RateCard set ProfileCode=@val1,ProfileName=@val2,TestCode=@val3,TestName=@val4,Amount=@val5," +
                            " StartDate=@val6,EndDate=@val7,CreatorEmail=@val8,CreatorPhoneNo=@val9 where Id='" + dt.Rows[0]["Id"] + "' ";
                        MySqlCommand cmd = new MySqlCommand(updSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", rateCard.ProfileCode);
                        cmd.Parameters.AddWithValue("@val2", rateCard.ProfileName);
                        cmd.Parameters.AddWithValue("@val3", rateCard.TestCode);
                        cmd.Parameters.AddWithValue("@val4", rateCard.TestName);
                        cmd.Parameters.AddWithValue("@val5", rateCard.Amount);
                        cmd.Parameters.AddWithValue("@val6", rateCard.StartDate);
                        cmd.Parameters.AddWithValue("@val7", rateCard.EndDate);
                        cmd.Parameters.AddWithValue("@val8", rateCard.CreatorEmail);
                        cmd.Parameters.AddWithValue("@val9", rateCard.CreatorPhoneNo);
                        cmd.ExecuteNonQuery();

                        if (profile == "yes")
                        {
                            string updProfile = "update createprofile set Amount='" + rateCard.Amount + "' where ProfileCode='" + rateCard.ProfileCode + "'";
                            MySqlCommand procmd = new MySqlCommand(updProfile, conn);
                            procmd.ExecuteNonQuery();
                        }
                        if (test == "yes")
                        {
                            string updTest = "update ChildTestList set Amount='" + rateCard.Amount + "', AmountValidDate='" + rateCard.EndDate + "' where TestCode='" + rateCard.TestCode + "'";
                            MySqlCommand testcmd = new MySqlCommand(updTest, conn);
                            testcmd.ExecuteNonQuery();
                        }
                    }
                    else
                    {
                        updSQL = "INSERT INTO RateCard(ProfileCode,ProfileName,TestCode,TestName,Amount,StartDate,EndDate,CreatorEmail,CreatorPhoneNo) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9)";

                        MySqlCommand cmd = new MySqlCommand(updSQL, conn);

                        cmd.Parameters.AddWithValue("@val1", rateCard.ProfileCode);
                        cmd.Parameters.AddWithValue("@val2", rateCard.ProfileName);
                        cmd.Parameters.AddWithValue("@val3", rateCard.TestCode);
                        cmd.Parameters.AddWithValue("@val4", rateCard.TestName);
                        cmd.Parameters.AddWithValue("@val5", rateCard.Amount);
                        cmd.Parameters.AddWithValue("@val6", rateCard.StartDate);
                        cmd.Parameters.AddWithValue("@val7", rateCard.EndDate);
                        cmd.Parameters.AddWithValue("@val8", rateCard.CreatorEmail);
                        cmd.Parameters.AddWithValue("@val9", rateCard.CreatorPhoneNo);
                        cmd.ExecuteNonQuery();

                        if (profile == "yes")
                        {
                            string updProfile = "update createprofile set Amount='" + rateCard.Amount + "' where ProfileCode='" + rateCard.ProfileCode + "'";
                            MySqlCommand procmd = new MySqlCommand(updProfile, conn);
                            procmd.ExecuteNonQuery();
                        }
                        if (test == "yes")
                        {
                            string updTest = "update ChildTestList set Amount='" + rateCard.Amount + "', AmountValidDate='" + rateCard.EndDate + "' where TestCode='" + rateCard.TestCode + "'";
                            MySqlCommand testcmd = new MySqlCommand(updTest, conn);
                            testcmd.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region updateLabStatusInprogress
        /// <summary>
        /// Table - LaborderStatus
        ///updated the lab order status as 'Inprogress'
        /// </summary>
        /// <param name="LaborderStatus"></param>
        [Route("api/Account/updateLabStatusInprogress")]
        [HttpPost]
        public void updateLabStatusInprogress(string mrdNo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE LaborderStatus SET LabStatus='Inprogress' where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region updateLabStatusApproved
        /// <summary>
        /// Table - LaborderStatus
        ///updated the lab order status as 'Approved'
        /// </summary>
        /// <param name="LaborderStatus"></param>
        [Route("api/Account/updateLabStatusApproved")]
        [HttpPost]
        public void updateLabStatusApproved(string mrdNo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE LaborderStatus SET LabStatus='Approved' where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion




        #region updateReport
        /// <summary>
        /// Table - ResultLabTech
        ///updated the lab order status as 'Approved'
        /// </summary>
        /// <param name="Report"></param>
        [Route("api/Account/updateReport")]
        [HttpPost]
        //   public void updateReport(string mrdNo)
        //  public void updateReport(string mrdNo, string testCode, string comments, string result)
        public void updateReport(string test1, string test2, string test3, string test4)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    {
                        string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + test1 + "' && TestCode ='" + test2 + "'";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            string strSQL1 = "UPDATE resultlabtest SET Result = @Result, Comment1 = @Comment Where MrdNo='" + test1 + "' && TestCode ='" + test2 + "'";

                            MySqlCommand cmdedit = new MySqlCommand(strSQL1, conn);

                            cmdedit.Parameters.AddWithValue("@Result", test3);
                            cmdedit.Parameters.AddWithValue("@Comment", test4);

                            cmdedit.CommandType = CommandType.Text;


                            cmdedit.ExecuteNonQuery();

                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region getLabOrderByMrdNo
        /// <summary>
        /// Table - LabOrder
        /// </summary>
        /// get details from LabOrder table
        /// <returns></returns>
        [Route("api/Account/getLabOrderByMrdNo")]
        [HttpGet]
        public List<LabOrder> getLabOrderByMrdNo(string mrdNo)
        {
            List<LabOrder> lstlabOrder = new List<LabOrder>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT Age,Sex,HomeCollectChargeAmount,CollectAt,ReferredBy,PatientName,IsPregnancy,Trimester,ProviderName," +
                                    " ProviderHostName,pr.RegID,pr.ExternalID FROM  LabOrder lo inner join" +
                                    " patientregistration pr on  pr.RegID= lo.RegID  where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrder labOrder = new LabOrder();
                            //    labOrder.MrdNo = dr["MrdNo"].ToString();
                            labOrder.RegID = (dr["RegID"].ToString());
                            labOrder.PatientName = dr["PatientName"].ToString();
                            labOrder.ReferredBy = dr["ReferredBy"].ToString();
                            labOrder.CollectAt = dr["CollectAt"].ToString();
                            labOrder.HomeCollectChargeAmount = (double)dr["HomeCollectChargeAmount"];
                            labOrder.Age = dr["Age"].ToString();
                            labOrder.Sex = dr["Sex"].ToString();

                            labOrder.IsPregnancy = Convert.ToInt32(dr["IsPregnancy"].ToString());
                            labOrder.Trimester = dr["Age"].ToString();
                            labOrder.ProviderName = dr["ProviderName"].ToString();
                            labOrder.ProviderHostName = dr["ProviderHostName"].ToString();
                            labOrder.ExternalId = dr["ExternalID"].ToString();

                            lstlabOrder.Add(labOrder);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstlabOrder;
            }
        }
        #endregion

        #region updateDisbleStatusChildTestList
        /// <summary>
        /// Table - childtestlist
        /// updated the childtestlist active status as 0 for disable
        /// </summary>
        /// <param name="TestID"></param>
        /// <param name="activeStatus"></param>

        [Route("api/Account/updateDisbleStatusChildTestList")]
        [HttpPost]
        public void updateDisbleStatusChildTestList(string TestID, int activeStatus)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  childtestlist SET ActiveStatus='" + activeStatus + "'where TestID='" + TestID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region updateChildTestList
        /// <summary>
        /// Table - childtestlist
        /// updated the childtestlist details
        /// </summary>
        /// <param name="activeStatus"></param>

        [Route("api/Account/updateChildTestList")]
        [HttpPost]
        public void updateChildTestList(ChildTestList childTestList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  childtestlist SET TestName=@TestName,DisplayTestName=@DisplayName,DepartmentName=@DepartmentName,Amount=@Amount," +
                                    " AmountValidDate=@ValidDate,units=@units,TurnAroundTime=@TurnAroundTime,PatientPreparation=@PatientPreparation," +
                                    " ExpectedResultDate=@ExpectedResultDate,TestSchedule=@TestSchedule,CutoffTime=@cutOffTime, AdditionalFixedComments=@AdditionalFixedComments," +
                                    " TestInformation=@TestInformation , commonParagraph=@commonParagraph , NumericOrText=@NumericOrText , UrineCulture=@UrineCulture ," +
                                    " AlternativeSampleContainer=@AlternativeSample, TableRequiredPrint=@TableRequiredPrint,RequiredBiospyTestNumber=@RequiredBiospyTestNumber," +
                                    " Outsourced=@Outsourced, SampleContainer=@SampleContainer,Pregnancyrefrange=@Pregnancyrefrange,AgewiseReferenceRange=@AgewiseReferenceRange," +
                                    " AgewiseCriticalValue=@AgewiseCriticalValue,multiplecomponents=@multiplecomponents, CalculationPresent=@CalculationPresent,Methodology=@Methodology," +
                                    " BiospyAbbrevation=@BiospyAbbrevation where TestID='" + childTestList.TestID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("@TestName", childTestList.TestName);
                    cmd.Parameters.AddWithValue("@DisplayName", childTestList.DisplayName);
                    cmd.Parameters.AddWithValue("@commonParagraph", childTestList.commonParagraph);
                    cmd.Parameters.AddWithValue("@SampleContainer", childTestList.SampleContainer);
                    cmd.Parameters.AddWithValue("@NumericOrText", childTestList.NumericOrText);
                    cmd.Parameters.AddWithValue("@UrineCulture", childTestList.UrineCulture);
                    cmd.Parameters.AddWithValue("@TableRequiredPrint", childTestList.TableRequiredPrint);
                    cmd.Parameters.AddWithValue("@AlternativeSample", childTestList.AlternativeSample);

                    cmd.Parameters.AddWithValue("@DepartmentName", childTestList.DepartmentName);
                    cmd.Parameters.AddWithValue("@Amount", childTestList.Amount);
                    cmd.Parameters.AddWithValue("@ValidDate", childTestList.ValidDate);
                    cmd.Parameters.AddWithValue("@units", childTestList.units);
                    cmd.Parameters.AddWithValue("@TurnAroundTime", childTestList.TurnAroundTime);
                    cmd.Parameters.AddWithValue("@PatientPreparation", childTestList.PatientPreparation);
                    cmd.Parameters.AddWithValue("@ExpectedResultDate", childTestList.ExpectedResultDate);
                    cmd.Parameters.AddWithValue("@TestSchedule", childTestList.TestSchedule);
                    cmd.Parameters.AddWithValue("@cutOffTime", childTestList.cutOffTime);
                    cmd.Parameters.AddWithValue("@AdditionalFixedComments", childTestList.AdditionalFixedComments);
                    cmd.Parameters.AddWithValue("@TestInformation", childTestList.TestInformation);
                    cmd.Parameters.AddWithValue("@RequiredBiospyTestNumber", childTestList.RequiredBiospyTestNumber);
                    cmd.Parameters.AddWithValue("@Outsourced", childTestList.Outsourced);

                    cmd.Parameters.AddWithValue("@Pregnancyrefrange", childTestList.Pregnancyrefrange);
                    cmd.Parameters.AddWithValue("@AgewiseReferenceRange", childTestList.AgewiseReferenceRange);
                    cmd.Parameters.AddWithValue("@AgewiseCriticalValue", childTestList.AgewiseCriticalValue);
                    cmd.Parameters.AddWithValue("@multiplecomponents", childTestList.Multiplecomponents);
                    cmd.Parameters.AddWithValue("@CalculationPresent", childTestList.CalculationPresent);

                    cmd.Parameters.AddWithValue("@Methodology", childTestList.Methodology);
                    cmd.Parameters.AddWithValue("@BiospyAbbrevation", childTestList.BiospyAbbrevation);

                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region getallSampleMrdNoCount
        /// <summary>
        /// Table -
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getallSampleMrdNoCount")]
        [HttpGet]
        public int getallSampleMrdNoCount(string samplemrdno)
        {
            CountApprover countApprover = new CountApprover();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT Count(*) FROM  resultlabtest where MrdNo = '" + samplemrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            countApprover.Count = Convert.ToInt32(dr[0]);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return countApprover.Count;
            }
        }
        #endregion

        #region getallResult
        /// <summary>
        /// Table -
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getallResult")]
        [HttpGet]
        public List<ResultLabTech> getallResult(string mrdNo)
        {
            List<ResultLabTech> lstResult = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.resultlabtestID = (int)dr["ResultLabId"];
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            lstResult.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResult;
            }
        }
        #endregion


        #region updateFinalResult
        /// <summary>
        /// Table - childtestlist
        /// updated the childtestlist details
        /// </summary>
        /// <param name="activeStatus"></param>
        [Route("api/Account/updateFinalResult")]
        [HttpPost]
        public void updateFinalResult(ResultLabTech result)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  resultlabtest SET Result=@Result,Comment1=@Comment,Comment2=@Comment2 where ResultLabId='" + result.resultlabtestID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("@Result", result.Result);
                    cmd.Parameters.AddWithValue("@Comment", result.Comment);
                    cmd.Parameters.AddWithValue("@Comment2", result.Comment2);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region insertTestCalculation
        /// <summary>
        /// table - TestCalculation
        /// </summary>
        /// <param name="TestCalculation"></param>
        [Route("api/Account/insertTestCalculation")]
        [HttpPost]
        public void insertTestCalculation(TestCalculation testCalculation)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  testcalculation(TestCode,Calculation1,Calculation2,Calculation3,Calculation4,CalculationType) VALUES(@val1,@val2,@val3,@val4,@val5,@val6)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", testCalculation.TestCode);
                    cmd.Parameters.AddWithValue("@val2", testCalculation.Calculation1);
                    cmd.Parameters.AddWithValue("@val3", testCalculation.Calculation2);
                    cmd.Parameters.AddWithValue("@val4", testCalculation.Calculation3);
                    cmd.Parameters.AddWithValue("@val5", testCalculation.Calculation4);
                    cmd.Parameters.AddWithValue("@val6", testCalculation.CalculationType);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region getCalculationByTestCode
        /// <summary>
        /// Table - TestCalculation
        /// </summary>
        /// get details from TestCalculation table
        /// <returns></returns>
        [Route("api/Account/getCalculationByTestCode")]
        [HttpGet]
        public List<calculationForTestDetails> getCalculationByTestCode(string testCode)
        {
            List<calculationForTestDetails> lstTestCalculation = new List<calculationForTestDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * from   calculationfortestdetails where TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            calculationForTestDetails testCalculation = new calculationForTestDetails();
                            //    labOrder.MrdNo = dr["MrdNo"].ToString();
                            testCalculation.id = (int)dr["id"];
                            testCalculation.testCode = dr["TestCode"].ToString();
                            testCalculation.CalculationUnits = dr["units"].ToString();
                            testCalculation.FormulaLabel = dr["formulaLabel"].ToString();
                            testCalculation.splcalculation = dr["splcalculation"].ToString();
                            testCalculation.CalculationType = dr["CalculationType"].ToString();
                            testCalculation.CalculationCategory = dr["CalculationCategory"].ToString();
                            testCalculation.TestCodesCalculationPart = dr["TestCodesCalculationPart"].ToString();
                            testCalculation.NormalValues = dr["NormalValues"].ToString();
                            testCalculation.ElementName = dr["Elements"].ToString();
                            testCalculation.ElementsCalculationType = dr["ElementsCalculationType"].ToString();
                            lstTestCalculation.Add(testCalculation);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstTestCalculation;
            }
        }
        #endregion
        //getResultByTestCodeMrdNo

        #region getResultByTestCodeMrdNoCalculation
        /// <summary>
        /// Table - resultlabtest
        /// </summary>
        /// get pending amount values from resultlabtest table
        /// <returns></returns>
        [Route("api/Account/getResultByTestCodeMrdNoCalculation")]
        [HttpGet]
        public List<ResultLabTech> getResultByTestCodeMrdNoCalculation(string mrdNo, string testCode)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' && TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region insertAlternativesamplecontainer
        /// <summary>
        /// Table - Alternativesamplecontainer
        /// </summary>
        /// Inserted the Alternativesamplecontainer table values.
        /// <param name="Alternativesamplecontainer"></param>
        [Route("api/Account/insertAlternativesamplecontainer")]
        [HttpPost]
        public void insertAlternativesamplecontainer(Alternativesamplecontainer alternativesamplecontainer)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO Alternativesamplecontainer(AlternativeSampleName,TestCode) VALUES(@val1,@val2)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", alternativesamplecontainer.AlternativeSampleName);
                    cmd.Parameters.AddWithValue("@val2", alternativesamplecontainer.TestCode);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region insertCommonInstrumentReagent
        /// <summary>
        /// Table - CommonInstrumentReagent
        /// </summary>
        /// Inserted the CommonInstrumentReagent table values.
        /// <param name="CommonInstrumentReagent"></param>
        [Route("api/Account/insertCommonInstrumentReagent")]
        [HttpPost]
        public void insertCommonInstrumentReagent(CommonInstrumentReagent commonInstrumentReagent)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "INSERT INTO CommonInstrumentReagent(InstrumentReagentName) VALUES(@val1)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", commonInstrumentReagent.InstrumentReagentName);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getDuplicationCommonInstrumentReagent
        /// <summary>
        /// Table - CommonInstrumentReagent
        /// </summary>
        /// Listed all values from CommonInstrumentReagent table
        /// <returns></returns>
        [Route("api/Account/getDuplicationCommonInstrumentReagent")]
        [HttpGet]
        public int getDuplicationCommonInstrumentReagent(string instrumentReagent)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  CommonInstrumentReagent where InstrumentReagentName='" + instrumentReagent + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region getAllInstrumentReagent
        /// <summary>
        /// Table -
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllInstrumentReagent")]
        [HttpGet]
        public List<CommonInstrumentReagent> getAllInstrumentReagent()
        {
            List<CommonInstrumentReagent> lstCommonInstrumentReagent = new List<CommonInstrumentReagent>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  CommonInstrumentReagent ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CommonInstrumentReagent commonInstrumentReagent = new CommonInstrumentReagent();
                            commonInstrumentReagent.InstrumentReagentName = dr["InstrumentReagentName"].ToString();

                            lstCommonInstrumentReagent.Add(commonInstrumentReagent);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCommonInstrumentReagent;
            }
        }
        #endregion

        #region getLabOrderDetailsByRegId
        /// <summary>
        ///  Table - LabOrder
        ///  get LabOrder details from LabOrder table by regID
        /// </summary>
        /// <param name="regID"></param>
        /// <returns></returns>
        [Route("api/Account/getLabOrderDetailsByRegId")]
        [HttpGet]
        public List<LabOrder> getLabOrderDetailsByRegId(string regID)
        {

            List<LabOrder> labHistory = new List<LabOrder>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM LabOrder where RegID = '" + regID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrder labOrder = new LabOrder();
                            labOrder.CreateDate = Convert.ToDateTime(dr["CreateDate"]);
                            labOrder.PatientName = dr["PatientName"].ToString();
                            labOrder.MrdNo = dr["MrdNo"].ToString();
                            labOrder.RegID = dr["RegID"].ToString();

                            labHistory.Add(labOrder);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return labHistory;
            }
        }
        #endregion

        #region insertProfilelistForGrid
        /// <summary>
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertProfilelistForGrid")]
        [HttpPost]
        public void insertProfilelistForGrid(AddProfileGrid addprofilegrid)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string selectSQL = "SELECT * from gridprofilelist where MrdNo ='" + addprofilegrid.MrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(selectSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL = "INSERT INTO gridprofilelist(RegID,ProfileCode,ProfileName,Amount,MrdNo,Discount,NetAmount,ProfileID) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                        MySqlCommand insertCmd = new MySqlCommand(strSQL, conn);
                        insertCmd.Parameters.AddWithValue("@val1", addprofilegrid.RegID);
                        insertCmd.Parameters.AddWithValue("@val2", addprofilegrid.ProfileCode);
                        insertCmd.Parameters.AddWithValue("@val3", addprofilegrid.ProfileName);
                        insertCmd.Parameters.AddWithValue("@val4", addprofilegrid.Amount);
                        insertCmd.Parameters.AddWithValue("@val5", addprofilegrid.MrdNo);
                        insertCmd.Parameters.AddWithValue("@val6", addprofilegrid.Discount);
                        insertCmd.Parameters.AddWithValue("@val7", addprofilegrid.NetAmount);
                        insertCmd.Parameters.AddWithValue("@val8", addprofilegrid.ProfileID);
                        insertCmd.ExecuteNonQuery();
                    }
                    else
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            string chkSubProf = "SELECT * from profilewithinsubprofile where " +
                                                " (MainProfileCode ='" + addprofilegrid.ProfileCode + "' and SubProfileCode='" + dr["ProfileCode"].ToString() + "') or " +
                                                " (MainProfileCode ='" + dr["ProfileCode"].ToString() + "' and SubProfileCode='" + addprofilegrid.ProfileCode + "')";

                            MySqlDataAdapter chkdata = new MySqlDataAdapter(chkSubProf, conn);
                            MySqlCommandBuilder chkcmd = new MySqlCommandBuilder(chkdata);
                            DataSet chkds = new DataSet();
                            DataTable chkdt = new DataTable();
                            chkdata.Fill(chkds);
                            chkdt = chkds.Tables[0];
                            if (chkdt.Rows.Count == 0)
                            {
                                string chkSQL = "SELECT * from gridprofilelist where MrdNo ='" + addprofilegrid.MrdNo + "' and ProfileCode='" + addprofilegrid.ProfileCode + "'";
                                MySqlDataAdapter chlddata = new MySqlDataAdapter(chkSQL, conn);
                                MySqlCommandBuilder chldcmd = new MySqlCommandBuilder(chlddata);
                                DataSet chldds = new DataSet();
                                DataTable chlddt = new DataTable();
                                chlddata.Fill(chldds);
                                chlddt = chldds.Tables[0];
                                if (chlddt.Rows.Count == 0)
                                {
                                    string strSQL = "INSERT INTO gridprofilelist(RegID,ProfileCode,ProfileName,Amount,MrdNo,Discount,NetAmount,ProfileID) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(strSQL, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", addprofilegrid.RegID);
                                    insertCmd.Parameters.AddWithValue("@val2", addprofilegrid.ProfileCode);
                                    insertCmd.Parameters.AddWithValue("@val3", addprofilegrid.ProfileName);
                                    insertCmd.Parameters.AddWithValue("@val4", addprofilegrid.Amount);
                                    insertCmd.Parameters.AddWithValue("@val5", addprofilegrid.MrdNo);
                                    insertCmd.Parameters.AddWithValue("@val6", addprofilegrid.Discount);
                                    insertCmd.Parameters.AddWithValue("@val7", addprofilegrid.NetAmount);
                                    insertCmd.Parameters.AddWithValue("@val8", addprofilegrid.ProfileID);
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                            else
                            {

                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion
        #region getProfileListForGrid
        /// <summary>
        /// Modified by nandhini on 31/07/2018 to avoid the duplicate values in profile list.
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getProfileListForGrid")]
        [HttpGet]
        public List<AddProfileGrid> getProfileListForGrid(string mrdno)
        {
            List<AddProfileGrid> lstprofile = new List<AddProfileGrid>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    //string strSQL = "SELECT * FROM  gridprofilelist where MrdNo ='" + mrdno + "'";
                    string strSQL = "SELECT distinct ID,RegID, ProfileID, ProfileCode, ProfileName, Amount, MrdNo, Discount, NetAmount FROM  gridprofilelist where MrdNo ='" + mrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            AddProfileGrid profile = new AddProfileGrid();
                            profile.ID = (int)dr["ID"];
                            profile.ProfileID = (int)dr["ProfileID"];
                            profile.ProfileCode = dr["ProfileCode"].ToString();
                            profile.MrdNo = dr["MrdNo"].ToString();
                            profile.Discount = dr["Discount"].ToString();
                            profile.NetAmount = dr["NetAmount"].ToString();
                            profile.ProfileName = dr["ProfileName"].ToString();
                            profile.Amount = Convert.ToDouble((dr["Amount"]));
                            lstprofile.Add(profile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstprofile;
            }
        }
        #endregion

        #region getSubprofilecodewithprofilecode
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getSubprofilecodewithprofilecode")]
        [HttpGet]
        public List<ProfileWithinProfile> getSubprofilecodewithprofilecode(string profilecode)
        {
            List<ProfileWithinProfile> lstprofile = new List<ProfileWithinProfile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  profilewithinsubprofile where MainProfileCode ='" + profilecode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ProfileWithinProfile profile = new ProfileWithinProfile();
                            profile.ID = (int)dr["ID"];
                            profile.MainProfileCode = dr["MainProfileCode"].ToString();
                            // profile.SubProfileId = (int)dr["SubProfileId"];
                            // profile.SubProfileName = dr["SubProfileName"].ToString();
                            profile.SubProfileCode = dr["SubProfileCode"].ToString();
                            lstprofile.Add(profile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstprofile;
            }
        }
        #endregion

        #region checktestwithInProfile
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/checktestwithInProfile")]
        [HttpPost]
        public void checktestwithInProfile(subprofile Subprofile)
        {
            string bioSpyNumber = "";
            //  List<subprofile> retBioNo = new List<subprofile>();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    strSQL = "SELECT * FROM  profilewithintest where ProfileCode ='" + Subprofile.MainProfileCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string sQLForAbbrv = "select BiospyAbbrevation,RequiredBiospyTestNumber from childtestlist where TestCode='" + dr["TestCode"].ToString() + "'";
                                MySqlDataAdapter abbrData = new MySqlDataAdapter(sQLForAbbrv, conn);
                                MySqlCommandBuilder abbrCmd = new MySqlCommandBuilder(abbrData);
                                DataSet abbrDS = new DataSet();
                                DataTable abbrDT = new DataTable();
                                abbrData.Fill(abbrDS);
                                abbrDT = abbrDS.Tables[0];
                                if (abbrDT.Rows.Count > 0)
                                {
                                    subprofile subTestList = new subprofile();
                                    int year = Convert.ToInt32(DateTime.Parse(DateTime.Now.ToString()).Year.ToString());

                                    var BiospyAbbrev = "";
                                    if ((abbrDT.Rows[0]["BiospyAbbrevation"] != DBNull.Value) &&
                                        (abbrDT.Rows[0]["RequiredBiospyTestNumber"].ToString() == "Yes"))
                                    {
                                        BiospyAbbrev = abbrDT.Rows[0]["BiospyAbbrevation"].ToString();

                                        strSQL = "SELECT * FROM biospydetails where MrdNo = '" + Subprofile.MrdNo + "' and BiospyAbbrev = '" + BiospyAbbrev + "'";
                                        MySqlDataAdapter abbData = new MySqlDataAdapter(strSQL, conn);
                                        MySqlCommandBuilder abbCmd = new MySqlCommandBuilder(abbData);
                                        DataSet abbDs = new DataSet();
                                        DataTable abbDt = new DataTable();
                                        abbData.Fill(abbDs);
                                        abbDt = abbDs.Tables[0];
                                        if (abbDt.Rows.Count == 0)
                                        {

                                            if (Subprofile.GroupName != null)
                                            {
                                                #region forbiospyBilling in Group Mode
                                                if (Subprofile.GroupName.Contains("_Camp"))
                                                {
                                                    var insGroupName = Subprofile.GroupName;

                                                    string chkGrpSql = "select * from biospydetails where BillMode='" + insGroupName + "' ";
                                                    MySqlDataAdapter sda = new MySqlDataAdapter(chkGrpSql, conn);
                                                    MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                                                    DataSet sDS = new DataSet();
                                                    DataTable sDT = new DataTable();
                                                    sda.Fill(sDS);
                                                    sDT = sDS.Tables[0];
                                                    string chkstrSQL = "";
                                                    if (sDT.Rows.Count > 0)
                                                    {
                                                        chkstrSQL = "SELECT ByspyNo  FROM biospydetails where BiospyAbbrev = '" + BiospyAbbrev + "' and " +
                                                              " BillMode='" + insGroupName + "' and PatientName!='' and MrdNo!='' order by RegID desc limit 1";
                                                    }
                                                    else
                                                    {
                                                        chkstrSQL = "SELECT ByspyNo  FROM biospydetails where BiospyAbbrev = '" + BiospyAbbrev + "' order by RegID desc limit 1";
                                                    }
                                                    MySqlDataAdapter chkData = new MySqlDataAdapter(chkstrSQL, conn);
                                                    MySqlCommandBuilder chkCmd = new MySqlCommandBuilder(chkData);
                                                    DataSet chkDs = new DataSet();
                                                    DataTable chkDt = new DataTable();
                                                    chkData.Fill(chkDs);
                                                    chkDt = chkDs.Tables[0];
                                                    if (chkDt.Rows.Count > 0)
                                                    {
                                                        int chkCount = 1;
                                                        var mrdNo = Subprofile.MrdNo.ToString();
                                                        var testCode = dr["TestCode"].ToString();
                                                        var patientName = Subprofile.PatientName.ToString();

                                                        string chkGrp = "select * from biospydetails where BillMode='" + insGroupName + "' ";
                                                        MySqlDataAdapter grpSda = new MySqlDataAdapter(chkGrp, conn);
                                                        MySqlCommandBuilder chkScmd = new MySqlCommandBuilder(grpSda);
                                                        DataSet grpDS = new DataSet();
                                                        DataTable grpDT = new DataTable();
                                                        grpSda.Fill(grpDS);
                                                        grpDT = grpDS.Tables[0];
                                                        if (grpDT.Rows.Count > 0)
                                                        {
                                                            string lastId = "SELECT *  FROM biospydetails where BiospyAbbrev = '" + BiospyAbbrev + "' and " +
                                    " BillMode='" + insGroupName + "' and PatientName='' and MrdNo='' order by RegID asc limit 1 ";
                                                            MySqlDataAdapter upSda = new MySqlDataAdapter(lastId, conn);
                                                            MySqlCommandBuilder upScmd = new MySqlCommandBuilder(upSda);
                                                            DataSet upSDS = new DataSet();
                                                            DataTable upSDT = new DataTable();
                                                            upSda.Fill(upSDS);
                                                            upSDT = upSDS.Tables[0];
                                                            if (upSDT.Rows.Count > 0)
                                                            {
                                                                foreach (DataRow upDr in upSDT.Rows)
                                                                {
                                                                    if (upDr != null)
                                                                    {
                                                                        string upPatMrdSql = "update biospydetails set MrdNo='" + mrdNo + "', PatientName='" + patientName + "', TestCode='" + dr["TestCode"].ToString() + "' where RegID=" + upDr["RegID"] + " ";
                                                                        MySqlCommand updCmd = new MySqlCommand(upPatMrdSql, conn);
                                                                        updCmd.CommandType = CommandType.Text;
                                                                        updCmd.ExecuteNonQuery();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            for (int i = chkCount; i <= Convert.ToInt32(Subprofile.GroupCount); i++)
                                                            {
                                                                var instdbioSpy = "";
                                                                if (i > 1)
                                                                {
                                                                    instdbioSpy = bioSpyNumber;
                                                                    mrdNo = "";
                                                                    testCode = "";
                                                                    patientName = "";
                                                                }
                                                                else
                                                                {
                                                                    instdbioSpy = chkDt.Rows[0]["ByspyNo"].ToString();
                                                                }
                                                                var bioNo1 = instdbioSpy.IndexOf('-');
                                                                var bioNo2 = instdbioSpy.LastIndexOf('-');
                                                                int bioautouniqNum = Convert.ToInt32(instdbioSpy.Substring(bioNo2 + 1, 4));
                                                                if (bioautouniqNum < year)
                                                                {
                                                                    bioSpyNumber = BiospyAbbrev + "-" + 1 + "-" + year;
                                                                }
                                                                else
                                                                {
                                                                    instdbioSpy = instdbioSpy.Split('-')[1];
                                                                    instdbioSpy = instdbioSpy.Split('-')[0];
                                                                    bioSpyNumber = BiospyAbbrev + "-" + (Convert.ToInt32(instdbioSpy) + 1) + "-" + year;
                                                                }
                                                                string newinsSQL = "INSERT INTO  biospydetails " + " (BiospyAbbrev,ByspyNo,PatientName,PatientRegNo,MrdNo,TestCode,BillMode) " +
                                                  " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";

                                                                MySqlCommand inscmd = new MySqlCommand(newinsSQL, conn);
                                                                inscmd.Parameters.AddWithValue("@val1", BiospyAbbrev);
                                                                inscmd.Parameters.AddWithValue("@val2", bioSpyNumber);
                                                                inscmd.Parameters.AddWithValue("@val3", patientName);
                                                                inscmd.Parameters.AddWithValue("@val4", 0);
                                                                inscmd.Parameters.AddWithValue("@val5", mrdNo);
                                                                inscmd.Parameters.AddWithValue("@val6", testCode);
                                                                inscmd.Parameters.AddWithValue("@val7", insGroupName);
                                                                inscmd.CommandType = CommandType.Text;
                                                                inscmd.ExecuteNonQuery();
                                                            }
                                                        }
                                                    }
                                                }
                                                #endregion forbiospyBilling in Group Mode
                                            }
                                            else
                                            {
                                                #region forbiospyBillingother than Group

                                                string maxSQL = "SELECT ByspyNo FROM biospydetails where BiospyAbbrev = '" + BiospyAbbrev + "' " +
                                                                " order by RegID desc limit 1";
                                                MySqlDataAdapter maxData = new MySqlDataAdapter(maxSQL, conn);
                                                MySqlCommandBuilder maxCmd = new MySqlCommandBuilder(maxData);
                                                DataSet maxDs = new DataSet();
                                                DataTable maxDt = new DataTable();
                                                maxData.Fill(maxDs);
                                                maxDt = maxDs.Tables[0];
                                                if (maxDt.Rows.Count > 0)
                                                {
                                                    bioSpyNumber = maxDt.Rows[0]["ByspyNo"].ToString();
                                                    var n1 = bioSpyNumber.IndexOf('-');
                                                    var n2 = bioSpyNumber.LastIndexOf('-');
                                                    int autouniqNum = Convert.ToInt32(bioSpyNumber.Substring(n2 + 1, 4));
                                                    if (autouniqNum < year)
                                                    {
                                                        bioSpyNumber = BiospyAbbrev + "-" + 1 + "-" + year;
                                                    }
                                                    else
                                                    {
                                                        bioSpyNumber = bioSpyNumber.Split('-')[1];
                                                        bioSpyNumber = bioSpyNumber.Split('-')[0];
                                                        bioSpyNumber = BiospyAbbrev + "-" + (Convert.ToInt32(bioSpyNumber) + 1) + "-" + year;
                                                    }

                                                    string insSQL =
                                                    "INSERT INTO  biospydetails " +
                                                    " (BiospyAbbrev,ByspyNo,PatientName,PatientRegNo,MrdNo,TestCode) " +
                                                    " VALUES(@val1,@val2,@val3,@val4,@val5,@val6)";

                                                    MySqlCommand insCmd = new MySqlCommand(insSQL, conn);
                                                    insCmd.Parameters.AddWithValue("@val1", BiospyAbbrev);
                                                    insCmd.Parameters.AddWithValue("@val2", bioSpyNumber);
                                                    insCmd.Parameters.AddWithValue("@val3", Subprofile.PatientName.ToString());
                                                    insCmd.Parameters.AddWithValue("@val4", 0);
                                                    insCmd.Parameters.AddWithValue("@val5", Subprofile.MrdNo.ToString());
                                                    insCmd.Parameters.AddWithValue("@val6", dr["TestCode"].ToString());

                                                    insCmd.CommandType = CommandType.Text;
                                                    insCmd.ExecuteNonQuery();
                                                }
                                                else
                                                {
                                                    //bioSpyNumber = "0";
                                                    bioSpyNumber = BiospyAbbrev + "-" + 1 + "-" + year;

                                                    string insSQL =
                                                   "INSERT INTO  biospydetails " +
                                                   " (BiospyAbbrev,ByspyNo,PatientName,PatientRegNo,MrdNo,TestCode) " +
                                                   " VALUES(@val1,@val2,@val3,@val4,@val5,@val6)";

                                                    MySqlCommand insCmd = new MySqlCommand(insSQL, conn);
                                                    insCmd.Parameters.AddWithValue("@val1", BiospyAbbrev);
                                                    insCmd.Parameters.AddWithValue("@val2", bioSpyNumber);
                                                    insCmd.Parameters.AddWithValue("@val3", Subprofile.PatientName.ToString());
                                                    insCmd.Parameters.AddWithValue("@val4", 0);
                                                    insCmd.Parameters.AddWithValue("@val5", Subprofile.MrdNo.ToString());
                                                    insCmd.Parameters.AddWithValue("@val6", dr["TestCode"].ToString());

                                                    insCmd.CommandType = CommandType.Text;
                                                    insCmd.ExecuteNonQuery();
                                                }

                                                #endregion forbiospyBillingother than Group 
                                            }
                                        }
                                    }
                                    else { BiospyAbbrev = ""; }
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertSubProfile
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertSubProfile")]
        [HttpPost]
        public void insertSubProfile(subprofile Subprofile)
        {
            string bioSpyNumber = "";
            //  List<subprofile> retBioNo = new List<subprofile>();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";

                    strSQL = "SELECT * FROM  profilewithintest where ProfileCode ='" + Subprofile.SubProfileCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string sQLForAbbrv = "select BiospyAbbrevation from childtestlist where TestCode='" + dr["TestCode"].ToString() + "'";
                                MySqlDataAdapter abbrData = new MySqlDataAdapter(sQLForAbbrv, conn);
                                MySqlCommandBuilder abbrCmd = new MySqlCommandBuilder(abbrData);
                                DataSet abbrDS = new DataSet();
                                DataTable abbrDT = new DataTable();
                                abbrData.Fill(abbrDS);
                                abbrDT = abbrDS.Tables[0];
                                if (abbrDT.Rows.Count > 0)
                                {
                                    subprofile subTestList = new subprofile();
                                    int year = Convert.ToInt32(DateTime.Parse(DateTime.Now.ToString()).Year.ToString());

                                    var BiospyAbbrev = "";
                                    if (abbrDT.Rows[0]["BiospyAbbrevation"] != DBNull.Value)
                                    {
                                        BiospyAbbrev = abbrDT.Rows[0]["BiospyAbbrevation"].ToString();

                                        strSQL = "SELECT * FROM biospydetails where MrdNo = '" + Subprofile.MrdNo + "' and BiospyAbbrev = '" + BiospyAbbrev + "'";
                                        MySqlDataAdapter abbData = new MySqlDataAdapter(strSQL, conn);
                                        MySqlCommandBuilder abbCmd = new MySqlCommandBuilder(abbData);
                                        DataSet abbDs = new DataSet();
                                        DataTable abbDt = new DataTable();
                                        abbData.Fill(abbDs);
                                        abbDt = abbDs.Tables[0];
                                        if (abbDt.Rows.Count == 0)
                                        {
                                            string maxSQL = "SELECT ByspyNo FROM biospydetails where BiospyAbbrev = '" + BiospyAbbrev + "' order by RegID desc limit 1";
                                            MySqlDataAdapter maxData = new MySqlDataAdapter(maxSQL, conn);
                                            MySqlCommandBuilder maxCmd = new MySqlCommandBuilder(maxData);
                                            DataSet maxDs = new DataSet();
                                            DataTable maxDt = new DataTable();
                                            maxData.Fill(maxDs);
                                            maxDt = maxDs.Tables[0];
                                            if (maxDt.Rows.Count > 0)
                                            {
                                                bioSpyNumber = maxDt.Rows[0]["ByspyNo"].ToString();
                                                var n1 = bioSpyNumber.IndexOf('-');
                                                var n2 = bioSpyNumber.LastIndexOf('-');
                                                int autouniqNum = Convert.ToInt32(bioSpyNumber.Substring(n2 + 1, bioSpyNumber.Length));
                                                if (autouniqNum < year)
                                                {
                                                    bioSpyNumber = BiospyAbbrev + "-" + 1 + "-" + year;
                                                }
                                                else
                                                {
                                                    bioSpyNumber = BiospyAbbrev + "-" + (Convert.ToInt32(bioSpyNumber.Substring(n1 + 1, n2)) + 1) + "-" + year;
                                                }

                                                string insSQL =
                                                "INSERT INTO  biospydetails " +
                                                " (BiospyAbbrev,ByspyNo,PatientName,PatientRegNo,MrdNo,TestCode) " +
                                                " VALUES(@val1,@val2,@val3,@val4,@val5,@val6)";

                                                MySqlCommand insCmd = new MySqlCommand(insSQL, conn);
                                                insCmd.Parameters.AddWithValue("@val1", BiospyAbbrev);
                                                insCmd.Parameters.AddWithValue("@val2", bioSpyNumber);
                                                insCmd.Parameters.AddWithValue("@val3", Subprofile.PatientName.ToString());
                                                insCmd.Parameters.AddWithValue("@val4", 0);
                                                insCmd.Parameters.AddWithValue("@val5", Subprofile.MrdNo.ToString());
                                                insCmd.Parameters.AddWithValue("@val6", dr["TestCode"].ToString());

                                                insCmd.CommandType = CommandType.Text;
                                                insCmd.ExecuteNonQuery();
                                            }
                                            else
                                            {
                                                //bioSpyNumber = "0";
                                                bioSpyNumber = BiospyAbbrev + "-" + 1 + "-" + year;
                                                string insSQL =
                                             "INSERT INTO  biospydetails " +
                                             " (BiospyAbbrev,ByspyNo,PatientName,PatientRegNo,MrdNo,TestCode) " +
                                             " VALUES(@val1,@val2,@val3,@val4,@val5,@val6)";

                                                MySqlCommand insCmd = new MySqlCommand(insSQL, conn);
                                                insCmd.Parameters.AddWithValue("@val1", BiospyAbbrev);
                                                insCmd.Parameters.AddWithValue("@val2", bioSpyNumber);
                                                insCmd.Parameters.AddWithValue("@val3", Subprofile.PatientName.ToString());
                                                insCmd.Parameters.AddWithValue("@val4", 0);
                                                insCmd.Parameters.AddWithValue("@val5", Subprofile.MrdNo.ToString());
                                                insCmd.Parameters.AddWithValue("@val6", dr["TestCode"].ToString());

                                                insCmd.CommandType = CommandType.Text;
                                                insCmd.ExecuteNonQuery();
                                            }
                                            //subTestList.BioAbbrev = BiospyAbbrev;
                                            //subTestList.BiospyNo = bioSpyNumber;
                                            //subTestList.TestCode = dr["TestCode"].ToString();
                                            //retBioNo.Add(subTestList);
                                        }
                                    }
                                    else { BiospyAbbrev = ""; }
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region applyDiscountForAll
        /// <summary>
        [Route("api/Account/applyDiscountForAll")]
        [HttpPost]
        public void applyDiscountForAll(string dicAmount)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from gridprofilelist";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                var netAmount = (Convert.ToDouble(dr["Amount"])) * (Convert.ToDouble(dicAmount) / 100);
                                netAmount = Convert.ToDouble(dr["Amount"]) - netAmount;
                                string updateSQL = "UPDATE  gridprofilelist SET Discount='" + dicAmount + "',NetAmount='" + netAmount + "' where ID='" + dr["ID"] + "'";
                                MySqlCommand updatecmd = new MySqlCommand(updateSQL, conn);
                                updatecmd.CommandType = CommandType.Text;
                                updatecmd.ExecuteNonQuery();
                            }
                        }
                    }
                    /// to apply discount for all test

                    string testSelectSQL = "select * from gridtestlist";
                    MySqlDataAdapter myTestdata = new MySqlDataAdapter(testSelectSQL, conn);
                    MySqlCommandBuilder testCmd = new MySqlCommandBuilder(myTestdata);
                    DataSet tstDS = new DataSet();
                    DataTable tstDT = new DataTable();
                    myTestdata.Fill(tstDS);
                    tstDT = tstDS.Tables[0];
                    if (tstDT.Rows.Count > 0)
                    {
                        foreach (DataRow dr in tstDT.Rows)
                        {
                            if (dr != null)
                            {
                                var netAmount = (Convert.ToDouble(dr["Amount"])) * (Convert.ToDouble(dicAmount) / 100);
                                netAmount = Convert.ToDouble(dr["Amount"]) - netAmount;
                                string updateSQL = "UPDATE  gridtestlist SET Discount='" + dicAmount + "',NetAmount='" + netAmount + "' where ID='" + dr["ID"] + "'";
                                MySqlCommand updatecmd = new MySqlCommand(updateSQL, conn);
                                updatecmd.CommandType = CommandType.Text;
                                updatecmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region UpdateProfilegrid
        /// <summary>
        [Route("api/Account/UpdateProfilegrid")]
        [HttpPost]
        public void UpdateProfilegrid(AddProfileGrid addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  gridprofilelist SET Discount=@Discount,NetAmount=@NetAmount where ID = '" + addprofile.ID + "' && MrdNo ='" + addprofile.MrdNo + "' && ProfileCode ='" + addprofile.ProfileCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("@Discount", addprofile.Discount);
                    cmd.Parameters.AddWithValue("@NetAmount", addprofile.NetAmount);

                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion
        #region getTotalprofileAmount
        /// <summary>
        ///
        ///
        /// </summary>
        /// <returns></returns>

        [Route("api/Account/getTotalprofileAmount")]
        [HttpGet]
        public int getTotalprofileAmount(string mrdno)
        {
            int amt = 0;
            DataTable dt = new DataTable();
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            string strSQL = "SELECT SUM(NetAmount) FROM  gridprofilelist where MrdNo ='" + mrdno + "'";
            conn.Open();
            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
            DataSet ds = new DataSet();
            mydata.Fill(ds);
            dt = ds.Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0] != DBNull.Value)
                {
                    amt = Convert.ToInt32(dr[0]);
                }
                else
                {
                    amt = 0;
                }
            }
            conn.Close();
            return amt;
        }


        #endregion

        #region getTotalOtherTestAmount
        /// <summary>
        ///
        ///
        /// </summary>
        /// <returns></returns>

        [Route("api/Account/getTotalOtherTestAmount")]
        [HttpGet]
        public int getTotalOtherTestAmount(string mrdno)
        {
            int amt = 0;
            DataTable dt = new DataTable();
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            string strSQL = "SELECT SUM(OthAmount) FROM  othertestdetails where MrdNo ='" + mrdno + "'";
            conn.Open();
            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
            DataSet ds = new DataSet();
            mydata.Fill(ds);
            dt = ds.Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0] != DBNull.Value)
                {
                    amt = Convert.ToInt32(dr[0]);
                }
                else
                {
                    amt = 0;
                }
            }
            conn.Close();
            return amt;
        }


        #endregion

        #region getOthTestDetails
        /// <summary>
        ///
        ///
        /// </summary>
        /// <returns></returns>

        [Route("api/Account/getOthTestDetails")]
        [HttpGet]
        public List<AddOtherTest> getOthTestDetails(string mrdno)
        {
            List<AddOtherTest> addtestgrid = new List<AddOtherTest>();
            //int amt = 0;
            DataTable dt = new DataTable();
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            string strSQL = "SELECT * FROM  othertestdetails where MrdNo ='" + mrdno + "'";
            conn.Open();
            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
            DataSet ds = new DataSet();
            mydata.Fill(ds);
            dt = ds.Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (dr != null)
                {
                    AddOtherTest profile = new AddOtherTest();
                    profile.OthTestId = (int)dr["OthTestId"];
                    profile.RegID = (int)dr["RegID"];
                    profile.TestCode = dr["OthTestCode"].ToString();
                    profile.MrdNo = dr["MrdNo"].ToString();
                    profile.TestName = dr["OthTestName"].ToString();
                    profile.Amount = Convert.ToDouble((dr["OthAmount"]));
                    //profile.Discount = dr["Discount"].ToString();
                    //profile.NetAmount = dr["NetAmount"].ToString();
                    addtestgrid.Add(profile);
                }
                //else
                //{
                //    amt = 0;
                //}
            }
            conn.Close();
            return addtestgrid;
        }


        #endregion
        #region insertOtherTestForGrid
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertOtherTestForGrid")]
        [HttpPost]
        public void insertOtherTestForGrid(AddOtherTest addtestgrid)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string selectSQL = "SELECT * from othertestdetails where MrdNo ='" + addtestgrid.MrdNo + "' and OthTestCode='" + addtestgrid.TestCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(selectSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    if ((dt.Rows.Count == 0) && (addtestgrid.InsertFlag == 1))
                    {
                        string strSQL = "INSERT INTO othertestdetails(RegID,MrdNo,OthTestCode,OthTestName,OthAmount) VALUES(@val1,@val2,@val3,@val4,@val5)";
                        MySqlCommand Insertcmd = new MySqlCommand(strSQL, conn);
                        Insertcmd.Parameters.AddWithValue("@val1", addtestgrid.RegID);
                        Insertcmd.Parameters.AddWithValue("@val2", addtestgrid.MrdNo);
                        Insertcmd.Parameters.AddWithValue("@val3", addtestgrid.TestCode);
                        Insertcmd.Parameters.AddWithValue("@val4", addtestgrid.TestName);
                        Insertcmd.Parameters.AddWithValue("@val5", addtestgrid.Amount);
                        Insertcmd.ExecuteNonQuery();
                    }
                    else if ((addtestgrid.InsertFlag == 2))
                    {
                        string strSQL = "delete FROM  othertestdetails where OthTestCode = '" + addtestgrid.TestCode + "' and MrdNo = '" + addtestgrid.MrdNo + "'";
                        MySqlCommand deleteCmd = new MySqlCommand(strSQL, conn);
                        deleteCmd.CommandType = CommandType.Text;
                        deleteCmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertTestlistForGrid
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertTestlistForGrid")]
        [HttpPost]
        public void insertTestlistForGrid(AddTestGrid addtestgrid)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string selectSQL = "SELECT * from gridtestlist where MrdNo ='" + addtestgrid.MrdNo + "' and TestCode='" + addtestgrid.TestCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(selectSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    // foreach (DataRow dr in dt.Rows)
                    // {
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL = "INSERT INTO gridtestlist(RegID,TestCode,TestName,Amount,MrdNo,Discount,NetAmount) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                        MySqlCommand Insertcmd = new MySqlCommand(strSQL, conn);
                        Insertcmd.Parameters.AddWithValue("@val1", addtestgrid.RegID);
                        Insertcmd.Parameters.AddWithValue("@val2", addtestgrid.TestCode);
                        Insertcmd.Parameters.AddWithValue("@val3", addtestgrid.TestName);
                        Insertcmd.Parameters.AddWithValue("@val4", addtestgrid.Amount);
                        Insertcmd.Parameters.AddWithValue("@val5", addtestgrid.MrdNo);
                        Insertcmd.Parameters.AddWithValue("@val6", addtestgrid.Discount);
                        Insertcmd.Parameters.AddWithValue("@val7", addtestgrid.NetAmount);
                        Insertcmd.ExecuteNonQuery();
                    }
                    // } 
                    else
                    {
                        string updateSQL = "update gridtestlist set Amount=" + addtestgrid.Amount + ",Discount=" + addtestgrid.Discount + ",NetAmount=" + addtestgrid.NetAmount + "" +
                                        " where RegID=" + addtestgrid.RegID + " and ID=" + dt.Rows[0]["ID"] + "";
                        MySqlCommand updatecmd = new MySqlCommand(updateSQL, conn);
                        updatecmd.CommandType = CommandType.Text;
                        updatecmd.ExecuteNonQuery();
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getTestListForGrid
        /// <summary>
        /// Modified by nandhini on 31/07/2018 to avoid the duplicate values in test list.
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getTestListForGrid")]
        [HttpGet]
        public List<AddTestGrid> getTestListForGrid(string mrdno)
        {
            List<AddTestGrid> lstprofile = new List<AddTestGrid>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    //string strSQL = "SELECT * FROM  gridtestlist where MrdNo ='" + mrdno + "'";
                    string strSQL = "SELECT distinct ID,RegID, TestCode, TestName, Amount, MrdNo,Discount, NetAmount FROM  gridtestlist where MrdNo ='" + mrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            AddTestGrid test = new AddTestGrid();
                            test.ID = (int)dr["ID"];
                            test.TestCode = dr["TestCode"].ToString();

                            string sQLForAbbrv = "select BiospyAbbrevation,RequiredBiospyTestNumber from childtestlist where TestCode='" + dr["TestCode"].ToString() + "'";
                            MySqlDataAdapter abbrData = new MySqlDataAdapter(sQLForAbbrv, conn);
                            MySqlCommandBuilder abbrCmd = new MySqlCommandBuilder(abbrData);
                            DataSet abbrDS = new DataSet();
                            DataTable abbrDT = new DataTable();
                            abbrData.Fill(abbrDS);
                            abbrDT = abbrDS.Tables[0];
                            if (abbrDT.Rows.Count > 0)
                            {
                                if (abbrDT.Rows[0]["BiospyAbbrevation"] != DBNull.Value)
                                {
                                    test.BiospyAbbrev = abbrDT.Rows[0]["BiospyAbbrevation"].ToString();
                                }
                                else { test.BiospyAbbrev = "null"; }
                                if (abbrDT.Rows[0]["RequiredBiospyTestNumber"] != DBNull.Value)
                                {
                                    test.BiospyFlag = abbrDT.Rows[0]["RequiredBiospyTestNumber"].ToString();
                                }
                                else { test.BiospyFlag = "null"; }
                            }
                            test.MrdNo = dr["MrdNo"].ToString();
                            test.Discount = dr["Discount"].ToString();
                            test.NetAmount = dr["NetAmount"].ToString();
                            test.TestName = dr["TestName"].ToString();
                            test.Amount = Convert.ToDouble((dr["Amount"]));
                            lstprofile.Add(test);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstprofile;
            }
        }
        #endregion

        #region UpdateTestgrid
        /// <summary>
        /// Table - childtestlist
        /// updated the childtestlist details
        /// </summary>
        /// <param name="activeStatus"></param>

        [Route("api/Account/UpdateTestgrid")]
        [HttpPost]
        public void UpdateTestgrid(AddTestGrid addTest)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  gridtestlist SET Discount=@Discount,NetAmount=@NetAmount where ID = '" + addTest.ID + "' && MrdNo ='" + addTest.MrdNo + "' && TestCode ='" + addTest.TestCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("@Discount", addTest.Discount);
                    cmd.Parameters.AddWithValue("@NetAmount", addTest.NetAmount);

                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion
        #region getTotalTestAmount
        /// <summary>
        ///
        ///
        /// </summary>
        /// <returns></returns>

        [Route("api/Account/getTotalTestAmount")]
        [HttpGet]
        public int getTotalTestAmount(string mrdno)
        {
            int amt = 0;
            DataTable dt = new DataTable();
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            string strSQL = "SELECT SUM(NetAmount) FROM  gridtestlist where MrdNo ='" + mrdno + "'";
            conn.Open();
            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
            DataSet ds = new DataSet();
            mydata.Fill(ds);
            dt = ds.Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0] != DBNull.Value)
                {
                    amt = Convert.ToInt32(dr[0]);
                }
                else
                {
                    amt = 0;
                }
            }
            conn.Close();
            return amt;
        }


        #endregion

        #region getTotalPendingAmountInfo
        /// <summary>
        ///
        ///
        /// </summary>
        /// <returns></returns>

        [Route("api/Account/getTotalPendingAmountInfo")]
        [HttpGet]
        public int getTotalPendingAmountInfo(string mrdno)
        {
            int amt = 0;
            DataTable dt = new DataTable();
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            //string strSQL = "SELECT SUM(NetAmount) FROM  gridtestlist where MrdNo ='" + mrdno + "'";
            string strSQL = "select sum(Amount)from( " +
                            " SELECT sum(NetAmount) as Amount FROM  gridprofilelist where MrdNo = '" + mrdno + "' " +
                            " union " +
                            " select sum(NetAmount) as Amount from  gridtestlist where MrdNo = '" + mrdno + "' " +
                            " union" +
                            " SELECT sum(OthAmount) as Amount FROM  othertestdetails where MrdNo = '" + mrdno + "' " +
                            " ) as total";
            conn.Open();
            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
            DataSet ds = new DataSet();
            mydata.Fill(ds);
            dt = ds.Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0] != DBNull.Value)
                {
                    amt = Convert.ToInt32(dr[0]);
                }
                else
                {
                    amt = 0;
                }
            }
            conn.Close();
            return amt;
        }


        #endregion


        #region getAllRegistrationDetailsforCustomerView
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllRegistrationDetailsforCustomerView")]
        [HttpGet]
        public List<PatientAllLabStatusInfo> getAllRegistrationDetailsforCustomerView()
        {
            List<PatientAllLabStatusInfo> lstpatientAllLabStatusInfo = new List<PatientAllLabStatusInfo>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    // string strSQL = "SELECT * FROM  patientregistration";
                    conn.Open();
                    string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                    " B.PatientName,(select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                    " ABS(DAY(CURDATE()) - DAY(A.LabOrderDate)) as DayCount,ps.LastPrintDate,ps.PrintCount,ps.LastEmailDate,ps.EmailCount,inv.InvoiceNo, inv.InvoiceDate  " +
                                    " FROM laborderstatus as A inner join  laborder as B on A.MrdNo = B.MrdNo left join  resultlabtest rt on rt.MrdNo = B.MrdNo " +
                                    " left join printsummary ps on rt.MrdNo = ps.MrdNo and A.RegID = ps.PatientID" +
                                    " left join Invoice inv on rt.MrdNo = inv.MrdNo and A.RegID = inv.RegID " +
                                    " where A.LabStatus in (1,2,3) and(cast(A.LabOrderDate as date) <= (CURDATE()) " +
                                    " and cast(A.LabOrderDate as date) >= (DATE_SUB(CURDATE(), INTERVAL 4 DAY))) " +
                                    " group by A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                    " A.LaborderStatusId,B.PatientName,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                    " pendingApproval,DayCount,ps.LastPrintDate,ps.PrintCount,ps.LastEmailDate,ps.EmailCount,inv.InvoiceNo, inv.InvoiceDate" +
                                    " order by A.LaborderStatusId,A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate," +
                                    " A.ApproveStatus,A.DenyStatus,B.PatientName,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                    " pendingApproval,DayCount,ps.LastPrintDate,ps.PrintCount,ps.LastEmailDate,ps.EmailCount,inv.InvoiceNo, inv.InvoiceDate ";

                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();

                            patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            //laborder table
                            //patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();
                            patientAllLabStatusInfo.CreateDate = "";
                            patientAllLabStatusInfo.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                patientAllLabStatusInfo.FinalStatus = "";
                            }
                            else
                            {
                                patientAllLabStatusInfo.FinalStatus = dr["FinalStatus"].ToString();
                            }
                            if (dr["LastPrintDate"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.LastPrintDate = dr["LastPrintDate"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.LastPrintDate = "";
                            }
                            if (dr["PrintCount"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.PrintCount = dr["PrintCount"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.PrintCount = "";
                            }
                            if (dr["LastEmailDate"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.LastEmailDate = dr["LastEmailDate"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.LastEmailDate = "";
                            }
                            if (dr["EmailCount"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.EmailCount = dr["EmailCount"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.EmailCount = "";
                            }

                            if (dr["InvoiceNo"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.InvoiceNo = dr["InvoiceNo"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.InvoiceNo = "";
                            }
                            if (dr["InvoiceDate"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.InvoiceDate = dr["InvoiceDate"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.InvoiceDate = "";
                            }
                            lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstpatientAllLabStatusInfo;
            }
        }
        #endregion

        #region getAllDetailsforCustomerViewBYDAte
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllDetailsforCustomerViewBYDAte")]
        [HttpGet]
        public List<PatientAllLabStatusInfo> getAllDetailsforCustomerViewBYDAte(string from, string to)
        {
            List<PatientAllLabStatusInfo> lstpatientAllLabStatusInfo = new List<PatientAllLabStatusInfo>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    // string from = fromdate.ToString("yyyy-mm-dd hh:mm");
                    // string to = toDate.ToString("yyyy-mm-dd hh:mm");
                    // string strSQL = "SELECT * FROM  patientregistration";
                    conn.Open();
                    string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                    " B.PatientName,(select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                    " ABS(DAY(CURDATE()) - DAY(A.LabOrderDate)) as DayCount,ps.LastPrintDate,ps.PrintCount,ps.LastEmailDate,ps.EmailCount  " +
                                    " FROM laborderstatus as A inner join  laborder as B on A.MrdNo = B.MrdNo left join  resultlabtest rt on rt.MrdNo = B.MrdNo " +
                                    " left join printsummary ps on rt.MrdNo = ps.MrdNo and A.RegID = ps.PatientID" +
                                    " where A.LabStatus in (1,2,3) and A.LabOrderDate Between '" + from + "' and '" + to + "' " +
                                    " group by A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                    " A.LaborderStatusId,B.PatientName,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                    " pendingApproval,DayCount,ps.LastPrintDate,ps.PrintCount,ps.LastEmailDate,ps.EmailCount" +
                                    " order by A.LaborderStatusId,A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate," +
                                    " A.ApproveStatus,A.DenyStatus,B.PatientName,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                    " pendingApproval,DayCount,ps.LastPrintDate,ps.PrintCount,ps.LastEmailDate,ps.EmailCount ";

                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();

                            patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            //laborder table
                            //patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();
                            patientAllLabStatusInfo.CreateDate = "";
                            patientAllLabStatusInfo.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                patientAllLabStatusInfo.FinalStatus = "";
                            }
                            else
                            {
                                patientAllLabStatusInfo.FinalStatus = dr["FinalStatus"].ToString();
                            }
                            if (dr["LastPrintDate"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.LastPrintDate = dr["LastPrintDate"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.LastPrintDate = "";
                            }
                            if (dr["PrintCount"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.PrintCount = dr["PrintCount"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.PrintCount = "";
                            }
                            if (dr["LastEmailDate"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.LastEmailDate = dr["LastEmailDate"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.LastEmailDate = "";
                            }
                            if (dr["EmailCount"] != DBNull.Value)
                            {
                                patientAllLabStatusInfo.EmailCount = dr["EmailCount"].ToString();
                            }
                            else
                            {
                                patientAllLabStatusInfo.EmailCount = "";
                            }

                            lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstpatientAllLabStatusInfo;
            }
        }
        #endregion

        #region TruncateGridProfileList
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name="childTestList"></param>
        [Route("api/Account/TruncateGridProfileList")]
        [HttpPost]
        public void TruncateGridProfileList()
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "truncate  gridprofilelist";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region TruncateGridTestList
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/TruncateGridTestList")]
        [HttpPost]
        public void TruncateGridTestList()
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "truncate  gridtestlist";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region TruncateOthertest
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name="childTestList"></param>
        [Route("api/Account/TruncateOthertest")]
        [HttpPost]
        public void TruncateOthertest()
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "truncate  othertestdetails";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region getAlternativesamplecontainerByTestCode
        /// <summary>
        /// Table -
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAlternativesamplecontainerByTestCode")]
        [HttpGet]
        public List<Alternativesamplecontainer> getAlternativesamplecontainerByTestCode(string testCode)
        {
            List<Alternativesamplecontainer> lstAlternativesamplecontainer = new List<Alternativesamplecontainer>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  Alternativesamplecontainer where TestCode='" + testCode + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Alternativesamplecontainer alternativesamplecontainer = new Alternativesamplecontainer();
                            alternativesamplecontainer.AlternativeSampleContainerId = (int)dr["AlternativeSampleContainerId"];
                            alternativesamplecontainer.AlternativeSampleName = dr["AlternativeSampleName"].ToString();
                            alternativesamplecontainer.TestCode = dr["TestCode"].ToString();
                            lstAlternativesamplecontainer.Add(alternativesamplecontainer);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstAlternativesamplecontainer;
            }
        }
        #endregion


        #region getTestDetailsByProfileIDLabTech
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from childtestlist table
        /// <returns></returns>
        [Route("api/Account/getTestDetailsByProfileIDLabTech")]
        [HttpGet]
        public List<LabTechTestListByProfile> getTestDetailsByProfileIDLabTech(string profileID, string mrdNo)
        {
            List<LabTechTestListByProfile> lstchildTest = new List<LabTechTestListByProfile>();
            DataTable dt = new DataTable();
            int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where ProfileID='" + profileID + "' order by ProfilePriority asc";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            LabTechTestListByProfile childTestDetails = new LabTechTestListByProfile();
                            childTestDetails.Sno = i;

                            //  SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                            string mrdNoLocal = mrdNo;
                            string testcodeLocal = dr["TestCode"].ToString();
                            DataTable dts = new DataTable();
                            // int i = 1;
                            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                            {

                                //string strSQL = "SELECT * FROM childtestlist INNER JOIN labProfilelist ON childtestlist.ProfileID = labProfilelist.ProfileID where labProfilelist.MrdNo = '"+ mrdNo + "'";

                                string strSQLs = "SELECT * FROM SampleCollecter where MrdNo = '" + mrdNoLocal + "' and TestCode='" + testcodeLocal + "'";



                                conns.Open();
                                MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                                MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                                DataSet dss = new DataSet();
                                mydatas.Fill(dss);
                                dts = dss.Tables[0];
                                foreach (DataRow drs in dts.Rows)
                                {
                                    if (drs != null)
                                    {
                                        childTestDetails.SampleStatus = (int)drs["SampleStatus"];
                                        childTestDetails.SampleName = drs["sampleName"].ToString();

                                    }
                                }
                            }
                            childTestDetails.MrdNo = mrdNo;
                            childTestDetails.TestID = Convert.ToInt32(dr["TestID"]);
                            childTestDetails.ProfileID = Convert.ToInt32(dr["ProfileID"]);
                            childTestDetails.TestName = dr["TestName"].ToString();
                            childTestDetails.TestCode = dr["TestCode"].ToString();
                            childTestDetails.Methodology = dr["Methodology"].ToString();
                            childTestDetails.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestDetails.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestDetails.SampleContainer = dr["SampleContainer"].ToString();
                            childTestDetails.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestDetails.DefaultValues = dr["DefaultValues"].ToString();
                            childTestDetails.GenderMale = dr["GenderMale"].ToString();
                            childTestDetails.GenderFemale = dr["GenderFemale"].ToString();
                            childTestDetails.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestDetails.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestDetails.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestDetails.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestDetails.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestDetails.AgewiseReferenceRange = dr["AgewiseReferenceRange"].ToString();
                            childTestDetails.units = dr["units"].ToString();
                            childTestDetails.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestDetails.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestDetails.RequiredSamples = dr["RequiredSamples"].ToString();
                            childTestDetails.PatientPreparation = dr["PatientPreparation"].ToString();
                            childTestDetails.ExpectedResultDate = dr["ExpectedResultDate"].ToString();
                            childTestDetails.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestDetails.Finaloutput = dr["Finaloutput"].ToString();
                            childTestDetails.TestbasedDiscount = dr["TestbasedDiscount"].ToString();
                            childTestDetails.Outsourced = dr["Outsourced"].ToString();
                            childTestDetails.CreateDate = dr["CreateDate"].ToString();
                            childTestDetails.commonParagraph = dr["commonParagraph"].ToString();
                            childTestDetails.Multiplecomponents = dr["Multiplecomponents"].ToString();
                            childTestDetails.UrineCulture = dr["UrineCulture"].ToString();
                            childTestDetails.CalculationPresent = dr["CalculationPresent"].ToString();

                            childTestDetails.ProfilePriority = Convert.ToInt32(dr["ProfilePriority"]);
                            i++;

                            lstchildTest.Add(childTestDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstchildTest;
            }
        }
        #endregion


        #region getPatientBioDetailsByRegId
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getPatientBioDetailsByRegId")]
        [HttpGet]
        public List<BioInfoLabView> getPatientBioDetailsByRegId(string regID)
        {
            List<BioInfoLabView> bioInfoLabView = new List<BioInfoLabView>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT lo.*,do.EmailId FROM LabOrder lo left join doctor do on lo.ReferredBy=do.DoctorName where lo.MrdNo = '" + regID + "'";

                    //  string strSQL = "SELECT * FROM patientregistration where RegID = '" + regIDValue + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            BioInfoLabView lab = new BioInfoLabView();
                            lab.RegID = (dr["RegID"]).ToString();
                            lab.IsPregnancy = Convert.ToInt32(dr["IsPregnancy"]);
                            lab.LMP = dr["LMP"].ToString();
                            lab.Trimester = dr["Trimester"].ToString();
                            lab.DocEmail = dr["EmailId"].ToString();
                            lab.ProviderName = dr["ProviderName"].ToString();
                            DataTable dta = new DataTable();
                            string strSQL1 = "SELECT * FROM patientregistration where RegID = '" + lab.RegID + "'";
                            MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL1, conn);
                            MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
                            DataSet dsa = new DataSet();
                            mydataa.Fill(dsa);
                            dta = dsa.Tables[0];
                            foreach (DataRow dra in dta.Rows)
                            {
                                if (dra != null)
                                {
                                    lab.Title = dra["Title"].ToString();
                                    lab.FirstName = dra["FirstName"].ToString();
                                    lab.LastName = dra["LastName"].ToString();
                                    lab.Age = dra["Age"].ToString();
                                    lab.Sex = dra["Sex"].ToString();
                                    lab.DOB = dra["DOB"].ToString();
                                    lab.SpecialComments = dra["SpecialComments"].ToString();
                                    lab.PatientID = dra["RegID"].ToString();
                                    lab.ExternalID = dra["ExternalID"].ToString();
                                    lab.PatEmail = dra["ContactEmail"].ToString();
                                }
                            }
                            bioInfoLabView.Add(lab);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return bioInfoLabView;
            }
        }
        #endregion

        #region getBoneMarrowResultByMrdNoandTestCode
        /// <summary>
        /// get all details from bonemarrowaspiration table using mrdNo and TestCode for Customer View Page to generate Report
        /// Table - bonemarrowaspiration
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getBoneMarrowResultByMrdNoandTestCode")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getBoneMarrowResultByMrdNoandTestCode(string mrdNo, string TestCode)
        {
            List<BoneMarrowAspirationNew> bonemarrowaspiration = new List<BoneMarrowAspirationNew>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select bm.*,bsp.ByspyNo from bonemarrowaspiration bm inner join biospydetails bsp on bm.MrdNo=bsp.MrdNo " +
                                    " and bm.TestCode=bsp.TestCode where bm.MrdNo='" + mrdNo + "'AND bm.TestCode='" + TestCode + "' order by ElementId";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            BoneMarrowAspirationNew bonemarrowaspirations = new BoneMarrowAspirationNew();
                            bonemarrowaspirations.bonemarrowaspirationid = (int)dr["bonemarrowaspirationid"];
                            bonemarrowaspirations.MrdNo = dr["MrdNo"].ToString();
                            bonemarrowaspirations.TestCode = dr["TestCode"].ToString();
                            bonemarrowaspirations.TestName = dr["TestName"].ToString();
                            bonemarrowaspirations.ElementId = (int)dr["ElementId"];
                            bonemarrowaspirations.ElementName = dr["ElementName"].ToString();
                            bonemarrowaspirations.TemplateId = (int)dr["TemplateId"];
                            bonemarrowaspirations.TemplateName = dr["TemplateName"].ToString();
                            bonemarrowaspirations.TemplateDescription = dr["TemplateDescription"].ToString();
                            bonemarrowaspirations.ByspyNo = dr["ByspyNo"].ToString();
                            bonemarrowaspiration.Add(bonemarrowaspirations);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return bonemarrowaspiration;
            }
        }
        #endregion


        #region getReportLabTestResultByMrdNoView
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportLabTestResultByMrdNoView")]
        [HttpGet]
        public List<ResultLabTech> getReportLabTestResultByMrdNoView(string mrdNo, string testCode)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' AND TestCode='" + testCode + "' order by ProfilePriority asc";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            resultLabTech.FreeText = dr["FreeText"].ToString();
                            resultLabTech.ProfilePriority = (int)dr["ProfilePriority"];
                            resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();


                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion


        #region getReportBoneMarrowByMrdNoView
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportBoneMarrowByMrdNoView")]
        [HttpGet]
        public int getReportBoneMarrowByMrdNoView(string mrdNo, string testCode)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + mrdNo + "' AND TestCode='" + testCode + "' order by ElementId Asc ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;
                    //foreach (DataRow dr in dt.Rows)
                    //{
                    //    if (dr != null)
                    //    {
                    //        ResultLabTech resultLabTech = new ResultLabTech();
                    //        resultLabTech.MrdNo = dr["MrdNo"].ToString();
                    //        resultLabTech.Result = dr["Result"].ToString();
                    //        resultLabTech.TestName = dr["TestName"].ToString();
                    //        resultLabTech.TestCode = dr["TestCode"].ToString();
                    //        resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                    //        resultLabTech.Units = dr["Units"].ToString();
                    //        resultLabTech.Comment = dr["Comment1"].ToString();
                    //        resultLabTech.Comment2 = dr["Comment2"].ToString();
                    //        lstResultLabTech.Add(resultLabTech);
                    //    }
                    //}
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region getReportBoneMarrowByMrdNoTestCodeEditView
        /// <summary>       
        /// <returns></returns>
        [Route("api/Account/getReportBoneMarrowByMrdNoTestCodeEditView")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getReportBoneMarrowByMrdNoTestCodeEditView(string mrdNo, string testCode)
        {
            {
                List<BoneMarrowAspirationNew> bonemarrowaspiration = new List<BoneMarrowAspirationNew>();
                DataTable dt = new DataTable();
                using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                {
                    try
                    {
                        string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + mrdNo + "' AND TestCode='" + testCode + "' order by ElementId";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                BoneMarrowAspirationNew bonemarrowaspirations = new BoneMarrowAspirationNew();
                                bonemarrowaspirations.MrdNo = dr["MrdNo"].ToString();
                                bonemarrowaspirations.TestCode = dr["TestCode"].ToString();
                                bonemarrowaspirations.ElementId = (int)dr["ElementId"];
                                bonemarrowaspirations.TemplateId = (int)dr["TemplateId"];
                                bonemarrowaspirations.ElementName = dr["ElementName"].ToString();
                                bonemarrowaspirations.TemplateName = dr["TemplateName"].ToString();
                                bonemarrowaspirations.TemplateDescription = dr["TemplateDescription"].ToString();
                                bonemarrowaspirations.PriorityStatus = dr["PriorityStatus"].ToString();
                                bonemarrowaspiration.Add(bonemarrowaspirations);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.Write(ex);
                    }
                    return bonemarrowaspiration;
                }
            }
        }
        #endregion

        #region updateBoneMarrowNew
        /// <summary>
        /// Table - insert BoneMarrowAspiration
        /// </summary>
        /// <param name="insuranceprofilelist"></param>
        [Route("api/Account/updateBoneMarrowNew")]
        [HttpPost]
        public void updateBoneMarrowNew(BoneMarrowAspirationNew boneMarrowAspirationNew)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  bonemarrowaspiration SET TemplateDescription='" + boneMarrowAspirationNew.TemplateDescription + "' where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' && TestCode='" + boneMarrowAspirationNew.TestCode + "'&& ElementId='" + boneMarrowAspirationNew.ElementId + "' ";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.ExecuteNonQuery();


                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getSampleListByMrdNoProfile
        /// <summary>
        /// Table - LabTestList,childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getSampleListByMrdNoProfile")]
        [HttpGet]
        public List<SampleContainersByMrdNo> getSampleListByMrdNoProfile(int profileID, string mrdNo)
        {
            List<SampleContainersByMrdNo> lstSampleDetails = new List<SampleContainersByMrdNo>();
            DataTable dt = new DataTable();
            //int i = 1;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT* FROM  ChildTestList where ProfileID = '" + profileID + "' order by ProfilePriority asc";

                    //string strSQL = "SELECT* FROM  ChildTestList where ProfileID = '" + profileID + "' order by ProfilePriority,ProfilePriority asc";


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //new
                            //   SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();

                            string testcodeLocal = dr["TestCode"].ToString();
                            DataTable dts = new DataTable();
                            // int i = 1;
                            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                            {

                                //string strSQL = "SELECT * FROM childtestlist INNER JOIN labProfilelist ON childtestlist.ProfileID = labProfilelist.ProfileID where labProfilelist.MrdNo = '"+ mrdNo + "'";

                                string strSQLs = "SELECT * FROM SampleCollecter where MrdNo = '" + mrdNo + "' and TestCode='" + testcodeLocal + "'";



                                conns.Open();
                                MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                                MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                                DataSet dss = new DataSet();
                                mydatas.Fill(dss);
                                dts = dss.Tables[0];
                                if (dts.Rows.Count > 0)
                                {
                                    foreach (DataRow drs in dts.Rows)
                                    {
                                        if (drs != null)
                                        {
                                            SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                                            sampleContainer.SampleStatus = (int)drs["SampleStatus"];
                                            sampleContainer.SampleContainer = drs["SampleName"].ToString();
                                            sampleContainer.TestCode = drs["TestCode"].ToString();
                                            sampleContainer.TestID = (int)drs["TestID"];
                                            sampleContainer.ProfileID = (int)drs["ProfileID"];
                                            sampleContainer.ProfileName = drs["ProfileName"].ToString();
                                            sampleContainer.TestName = drs["TestName"].ToString();
                                            sampleContainer.Dynamic = "";
                                            sampleContainer.ProfilePriority = (int)drs["ProfilePriority"];
                                            //if (sampleContainer.SampleStatus != 1)
                                            //{
                                            DataTable dt2 = new DataTable();
                                            string strSQL2 = "SELECT * FROM  Alternativesamplecontainer where TestCode='" + testcodeLocal + "' ";
                                            // conn.Open();
                                            MySqlDataAdapter mydata2 = new MySqlDataAdapter(strSQL2, conn);
                                            MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata2);
                                            DataSet ds2 = new DataSet();
                                            mydata2.Fill(ds2);
                                            dt2 = ds2.Tables[0];
                                            if (dt2.Rows.Count != 0)
                                            {
                                                foreach (DataRow dr2 in dt2.Rows)
                                                {
                                                    if (dr2 != null)
                                                    {

                                                        sampleContainer.AlternativeSampleName = dr2["AlternativeSampleName"].ToString(); sampleContainer.AlternativeSampleAvailable = "Yes";

                                                    }
                                                }

                                            }
                                            else
                                            {
                                                sampleContainer.AlternativeSampleAvailable = "No";
                                            }
                                            lstSampleDetails.Add(sampleContainer);
                                        }



                                    }

                                }
                                else
                                {
                                    SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                                    sampleContainer.MrdNo = mrdNo;
                                    sampleContainer.TestID = (int)dr["TestID"];
                                    sampleContainer.TestCode = dr["TestCode"].ToString();
                                    sampleContainer.TestName = dr["TestName"].ToString();
                                    sampleContainer.SampleContainer = dr["SampleContainer"].ToString();
                                    sampleContainer.ProfileID = (int)dr["ProfileID"];
                                    sampleContainer.AlternativeSampleAvailable = dr["AlternativeSampleContainer"].ToString();
                                    sampleContainer.ProfilePriority = (int)dr["ProfilePriority"];

                                    if (sampleContainer.AlternativeSampleAvailable == "Yes")
                                    {
                                        DataTable dt2 = new DataTable();
                                        string strSQL2 = "SELECT * FROM  Alternativesamplecontainer where TestCode='" + testcodeLocal + "' ";
                                        MySqlDataAdapter mydata2 = new MySqlDataAdapter(strSQL2, conn);
                                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata2);
                                        DataSet ds2 = new DataSet();
                                        mydata2.Fill(ds2);
                                        dt2 = ds2.Tables[0];
                                        foreach (DataRow dr2 in dt2.Rows)
                                        {
                                            if (dr2 != null)
                                            {
                                                sampleContainer.AlternativeSampleName = dr2["AlternativeSampleName"].ToString();
                                            }
                                        }
                                    }
                                    sampleContainer.Dynamic = "";
                                    sampleContainer.SampleStatus = 0;
                                    lstSampleDetails.Add(sampleContainer);

                                }

                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstSampleDetails;
            }
        }
        #endregion


        #region getTestMultipleComponents
        /// <summary>
        /// Table - testmultiplecomponents
        /// </summary>
        /// Listed all values from testmultiplecomponents table by using TestCode
        /// <returns></returns>
        [Route("api/Account/getTestMultipleComponents")]
        [HttpGet]
        public List<TestMultipleComponents> getTestMultipleComponents(string TestCode)
        {
            List<TestMultipleComponents> lstMultipleComponents = new List<TestMultipleComponents>();
            DataTable dt = new DataTable();
            //int i = 1;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                    {
                        string strSQLs = "SELECT * FROM testmultiplecomponents where TestCode='" + TestCode + "' order by PriorityStatus";
                        conns.Open();
                        MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                        MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                        DataSet ds = new DataSet();
                        mydatas.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow drs in dt.Rows)
                            {
                                if (drs != null)
                                {
                                    TestMultipleComponents MultipleComponents = new TestMultipleComponents();
                                    MultipleComponents.TestMultipleComponentsID = (int)drs["TestMultipleComponentsID"];
                                    MultipleComponents.TestCode = drs["TestCode"].ToString();
                                    MultipleComponents.ElementName = drs["ElementName"].ToString();
                                    MultipleComponents.Color = drs["Color"].ToString();
                                    MultipleComponents.Units = drs["Units"].ToString();
                                    MultipleComponents.Comments = drs["Comments"].ToString();
                                    MultipleComponents.CriticalLow = drs["CriticalLow"].ToString();
                                    MultipleComponents.CriticalHigh = drs["CriticalHigh"].ToString();
                                    MultipleComponents.ReferenceHigh = drs["ReferenceLow"].ToString();
                                    MultipleComponents.ReferenceLow = drs["ReferenceHigh"].ToString();
                                    MultipleComponents.Methodology = drs["Methodology"].ToString();
                                    MultipleComponents.CommentsType = drs["CommentsType"].ToString();
                                    MultipleComponents.PriorityStatus = Convert.ToInt32(drs["PriorityStatus"].ToString());
                                    lstMultipleComponents.Add(MultipleComponents);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstMultipleComponents;
            }
        }
        #endregion


        #region updateMultipleComponent
        /// <summary>
        ///  Table - Update testmultiplecomponents
        /// </summary>
        /// <param name="testMultipleComponents"></param>
        [Route("api/Account/updateMultipleComponent")]
        [HttpPost]
        public void updateMultipleComponent(TestMultipleComponents testMultipleComponents)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    if (testMultipleComponents.Flag == 1)
                    {
                        //string strSQL = "UPDATE  testmultiplecomponents SET Color='" + testMultipleComponents.Color + "',Units='" + testMultipleComponents.Units + "',ElementName='" + testMultipleComponents.ElementName + "',Comments='" + testMultipleComponents.Comments + "' where TestMultipleComponentsID='" + testMultipleComponents.TestMultipleComponentsID + "' && TestCode='" + testMultipleComponents.TestCode + "'";
                        string strSQL = "UPDATE  testmultiplecomponents SET Methodology='" + testMultipleComponents.Methodology + "',Units='" + testMultipleComponents.Units + "',ElementName='" + testMultipleComponents.ElementName + "',CommentsType='" + testMultipleComponents.CommentsType + "',PriorityStatus='" + testMultipleComponents.PriorityStatus + "' where TestMultipleComponentsID='" + testMultipleComponents.TestMultipleComponentsID + "' && TestCode='" + testMultipleComponents.TestCode + "'";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.ExecuteNonQuery();

                        if (testMultipleComponents.ElementName != testMultipleComponents.ElementMatch)
                        {
                            strSQL = "";
                            strSQL = "UPDATE  agewisecricticalreference SET  ElementName='" + testMultipleComponents.ElementName + "' where ElementName='" + testMultipleComponents.ElementMatch + "' && TestCode='" + testMultipleComponents.TestCode + "'";
                            cmd = new MySqlCommand(strSQL, conn);
                            cmd.ExecuteNonQuery();
                            strSQL = "";
                            strSQL = "UPDATE  agewisereferencevalue SET  ElementName='" + testMultipleComponents.ElementName + "' where ElementName='" + testMultipleComponents.ElementMatch + "' && TestCode='" + testMultipleComponents.TestCode + "'";
                            cmd = new MySqlCommand(strSQL, conn);
                            cmd.ExecuteNonQuery();
                        }
                    }
                    else if (testMultipleComponents.Flag == 2)
                    {
                        string strSQL = "delete from testmultiplecomponents where TestMultipleComponentsID='" + testMultipleComponents.TestMultipleComponentsID + "' ";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region getAllRole
        /// <summary>
        /// Table : role
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllRole")]
        [HttpPost]
        public List<Role> getAllRole()
        {
            List<Role> lstRole = new List<Role>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM Role where Status<>0";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Role roledetails = new Role();
                            roledetails.Id = (int)dr["Id"];
                            roledetails.RoleName = dr["RoleName"].ToString();
                            lstRole.Add(roledetails);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstRole;
            }
        }
        #endregion


        #region updateRoleName
        /// <summary>
        /// Table -
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/updateRoleName")]
        [HttpPost]
        public string updateRoleName(Role roledetials)
        {
            var status = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();

                    if (Convert.ToInt32(roledetials.Flag) == 1)
                    {
                        string selSQL = "select * from role where RoleName='" + roledetials.RoleName + "' ";
                        MySqlDataAdapter sda = new MySqlDataAdapter(selSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(sda);
                        DataSet ds = new DataSet();
                        DataTable dt = new DataTable();
                        if (dt.Rows.Count > 0)
                        {
                            status = "Exists";
                        }
                        else
                        {
                            string insSQL = "insert into role(RoleName,Status)values(@val1,@val2)";
                            MySqlCommand inscmd = new MySqlCommand(insSQL, conn);
                            inscmd.Parameters.AddWithValue("@val1", roledetials.RoleName);
                            inscmd.Parameters.AddWithValue("@val2", 1);
                            inscmd.CommandType = CommandType.Text;
                            inscmd.ExecuteNonQuery();
                            status = "Success";
                        }
                    }
                    else if (Convert.ToInt32(roledetials.Flag) == 2)
                    {
                        //string strSQL = "UPDATE  role SET RoleName='" + roledetials.RoleName + "' where Id='" + roledetials.Id + "'";
                        string strSQL = "delete from  role where Id='" + roledetials.Id + "'";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                        status = "Success";
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
            return status;
        }

        #endregion

        #region updateLoginDetails
        /// <summary>
        /// Table -
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/updateLoginDetails")]
        [HttpPost]
        public void updateLoginDetails(Login logindetials)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (logindetials.Flag == 1)
                    {
                        strSQL = "UPDATE  login SET Password='" + logindetials.Password + "' where Id='" + logindetials.Id + "'";
                    }
                    else if (logindetials.Flag == 2)
                    {
                        strSQL = "delete from login where Id='" + logindetials.Id + "'";
                    }
                   else if (logindetials.Flag == 3)
                    {
                        strSQL = "UPDATE  login SET Password='" + logindetials.Password + "',ConfirmPassword='" + logindetials.ConfirmPassword + "' where UserName='" + logindetials.UserName + "'"+"and Id<>0";
                    }
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                    //  string strSQL1 = "UPDATE  login SET  ConfirmPassword='" + logindetials.ConfirmPassword + "' where Id='" + logindetials.Id + "'";

                    ////  conn.Open();
                    //  MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                    //  cmd1.CommandType = CommandType.Text;
                    //  cmd1.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region getPragancyReferancyRange
        /// <summary>
        /// Table - pregnancyreferencerange
        /// </summary>
        /// Listed all Details from pregnancyreferencerange table by using TestCode
        [Route("api/Account/getPragancyReferancyRange")]
        [HttpGet]
        public List<PragancyReferancyRange> getPragancyReferancyRange(string TestCode)
        {
            List<PragancyReferancyRange> lstPragancyReferancy = new List<PragancyReferancyRange>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQLs = "SELECT * FROM pregnancyreferencerange where TestCode='" + TestCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conn);
                    MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                    DataSet ds = new DataSet();
                    mydatas.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow drs in dt.Rows)
                        {
                            if (drs != null)
                            {
                                PragancyReferancyRange PragancyReferancy = new PragancyReferancyRange();
                                PragancyReferancy.PregnancyId = (int)drs["PregnancyId"];
                                PragancyReferancy.TestCode = drs["TestCode"].ToString();
                                PragancyReferancy.Parameter = drs["Parameter"].ToString();
                                PragancyReferancy.FirstTrimester = drs["FirstTrimester"].ToString();
                                PragancyReferancy.SecondTrimester = drs["SecondTrimester"].ToString();
                                PragancyReferancy.ThirdTrimester = drs["ThirdTrimester"].ToString();
                                lstPragancyReferancy.Add(PragancyReferancy);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstPragancyReferancy;
            }
        }
        #endregion

        #region updatePragancyReferancy
        /// <summary>
        ///  Table - Update pregnancyreferencerange
        /// </summary>
        /// <param name="pragancyReferancy"></param>
        [Route("api/Account/updatePragancyReferancy")]
        [HttpPost]
        public void updatePragancyReferancy(PragancyReferancyRange pragancyReferancy)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (pragancyReferancy.Flag == 1)
                    {
                        strSQL = "UPDATE  pregnancyreferencerange SET FirstTrimester='" + pragancyReferancy.FirstTrimester + "',SecondTrimester='" + pragancyReferancy.SecondTrimester + "',ThirdTrimester='" + pragancyReferancy.ThirdTrimester + "' where PregnancyId='" + pragancyReferancy.PregnancyId + "' && TestCode='" + pragancyReferancy.TestCode + "'";
                    }
                    else if (pragancyReferancy.Flag == 2)
                    {
                        strSQL = "Delete from  pregnancyreferencerange where PregnancyId='" + pragancyReferancy.PregnancyId + "' && TestCode='" + pragancyReferancy.TestCode + "'";
                    }
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAgewisecricticalreference
        /// <summary>
        /// Table - agewisecricticalreference
        /// </summary>
        /// Listed all Details from agewisecricticalreference table by using TestCode
        ///<param name="TestCode"></param>
        [Route("api/Account/getAgewisecricticalreference")]
        [HttpGet]
        public List<AgewiseCricticalReferences> getAgewisecricticalreference(string TestCode)
        {
            List<AgewiseCricticalReferences> lstAgewiseCricticalReferences = new List<AgewiseCricticalReferences>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQLs = "SELECT * FROM agewisecricticalreference where TestCode='" + TestCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conn);
                    MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                    DataSet ds = new DataSet();
                    mydatas.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow drs in dt.Rows)
                        {
                            if (drs != null)
                            {
                                AgewiseCricticalReferences agewiseCricticalReferences = new AgewiseCricticalReferences();
                                agewiseCricticalReferences.AgewiseCricticalValueID = (int)drs["AgewiseCricticalValueID"];
                                agewiseCricticalReferences.TestCode = drs["TestCode"].ToString();
                                agewiseCricticalReferences.TestName = drs["TestName"].ToString();
                                agewiseCricticalReferences.StartDayCrictical = drs["StartDay"].ToString();
                                agewiseCricticalReferences.EndDayCrictical = drs["EndDay"].ToString();
                                agewiseCricticalReferences.StartMonthCrictical = drs["StartMonth"].ToString();
                                agewiseCricticalReferences.EndMonthCrictical = drs["EndMonth"].ToString();
                                agewiseCricticalReferences.StartYearCrictical = drs["StartYear"].ToString();
                                agewiseCricticalReferences.EndYearCrictical = drs["EndYear"].ToString();
                                agewiseCricticalReferences.LowUpperCricticalValue = drs["LowUpperCricticalValue"].ToString();

                                agewiseCricticalReferences.FreeText = drs["FreeText"].ToString();
                                agewiseCricticalReferences.DisplayText = drs["DisplayValue"].ToString();
                                agewiseCricticalReferences.Units = drs["Units"].ToString();
                                agewiseCricticalReferences.ElementName = drs["ElementName"].ToString();
                                agewiseCricticalReferences.Sex = drs["Sex"].ToString();

                                string[] lowHighValue = agewiseCricticalReferences.LowUpperCricticalValue.Split('-');
                                agewiseCricticalReferences.LowCricticalValue = lowHighValue[0];
                                agewiseCricticalReferences.UpperCricticalValue = lowHighValue[1];
                                lstAgewiseCricticalReferences.Add(agewiseCricticalReferences);
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstAgewiseCricticalReferences;
            }
        }
        #endregion



        #region updateAgewisecricticalreference
        /// <summary>
        /// Table - agewisecricticalreference
        /// Update the details to agewisecricticalreference table by using TestCode and AgewiseCricticalValueID.
        /// </summary>
        ///<param name="agewiseCricticalReferences"
        [Route("api/Account/updateAgewisecricticalreference")]
        [HttpPost]
        public void updateAgewisecricticalreference(AgewiseCricticalReferences agewiseCricticalReferences)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    if (agewiseCricticalReferences.Flag == 1)
                    {
                        //string strSQL = "UPDATE  agewisecricticalreference SET 
                        //    StartDay=" + (string.IsNullOrEmpty(agewiseCricticalReferences.StartDayCrictical) ? "null" : agewiseCricticalReferences.StartDayCrictical) + ",
                        //    EndDay=" + (string.IsNullOrEmpty(agewiseCricticalReferences.EndDayCrictical) ? "null" : agewiseCricticalReferences.EndDayCrictical) + ",
                        //StartMonth=" + (string.IsNullOrEmpty(agewiseCricticalReferences.StartMonthCrictical) ? "null" : agewiseCricticalReferences.StartMonthCrictical) + ",
                        //EndMonth=" + (string.IsNullOrEmpty(agewiseCricticalReferences.EndMonthCrictical) ? "null" : agewiseCricticalReferences.EndMonthCrictical) + ",
                        //StartYear=" + (string.IsNullOrEmpty(agewiseCricticalReferences.StartYearCrictical) ? "null" : agewiseCricticalReferences.StartYearCrictical) + ",
                        //EndYear=" + (string.IsNullOrEmpty(agewiseCricticalReferences.EndYearCrictical) ? "null" : agewiseCricticalReferences.EndYearCrictical) + ",
                        //LowUpperCricticalValue='" + agewiseCricticalReferences.LowUpperCricticalValue + "',Sex='" + agewiseCricticalReferences.Sex + "',
                        //ElementName='" + agewiseCricticalReferences.ElementName + "',FreeText='" + agewiseCricticalReferences.FreeText + "',
                        //DisplayValue='" + agewiseCricticalReferences.DisplayText + "' 
                        //where AgewiseCricticalValueID='" + agewiseCricticalReferences.AgewiseCricticalValueID + "' AND TestCode='" + agewiseCricticalReferences.TestCode + "'";                   

                        string strSQL = "UPDATE  agewisecricticalreference SET StartDay=" + agewiseCricticalReferences.StartDayCrictical + ", " +
                                  " EndDay=" + agewiseCricticalReferences.EndDayCrictical + ", " +
                                  " StartMonth=0, " +
                                  " EndMonth=0, " +
                                  " StartYear=" + agewiseCricticalReferences.StartYearCrictical + ", " +
                                  " EndYear=" + agewiseCricticalReferences.EndYearCrictical + ", " +
                                  " ElementName = '" + agewiseCricticalReferences.ElementName + "', " +
                                  " LowUpperCricticalValue='" + agewiseCricticalReferences.LowUpperCricticalValue + "',Sex='" + agewiseCricticalReferences.Sex + "', " +
                                  " FreeText='" + agewiseCricticalReferences.FreeText + "',DisplayValue='" + agewiseCricticalReferences.DisplayText + "' " +
                                  " where AgewiseCricticalValueID='" + agewiseCricticalReferences.AgewiseCricticalValueID + "' && TestCode='" + agewiseCricticalReferences.TestCode + "'";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else if (agewiseCricticalReferences.Flag == 2)
                    {
                        string strSQL = "delete from  agewisecricticalreference " +
                                " where AgewiseCricticalValueID='" + agewiseCricticalReferences.AgewiseCricticalValueID + "' && TestCode='" + agewiseCricticalReferences.TestCode + "'";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getAgewiseReferenceValue
        /// <summary>
        /// Table - agewisereferencevalue
        /// </summary>
        /// Listed all Details from agewisereferencevalue table by using TestCode
        ///<param name="TestCode"></param>
        [Route("api/Account/getAgewiseReferenceValue")]
        [HttpGet]
        public List<Agewisereferencevalue> getAgewiseReferenceValue(string TestCode)
        {
            List<Agewisereferencevalue> lstAgewiseReferenceValue = new List<Agewisereferencevalue>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQLs = "SELECT * FROM agewisereferencevalue where TestCode='" + TestCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conn);
                    MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                    DataSet ds = new DataSet();
                    mydatas.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow drs in dt.Rows)
                        {
                            if (drs != null)
                            {
                                Agewisereferencevalue agewiseReferenceValue = new Agewisereferencevalue();
                                agewiseReferenceValue.AgewiseReferenceValueID = (int)drs["AgewiseReferenceValueID"];
                                agewiseReferenceValue.TestCode = drs["TestCode"].ToString();
                                agewiseReferenceValue.TestName = drs["TestName"].ToString();
                                agewiseReferenceValue.ElementName = drs["ElementName"].ToString();
                                agewiseReferenceValue.StartDay = drs["StartDay"].ToString();
                                agewiseReferenceValue.EndDay = drs["EndDay"].ToString();
                                agewiseReferenceValue.StartMonth = drs["StartMonth"].ToString();
                                agewiseReferenceValue.EndMonth = drs["EndMonth"].ToString();
                                agewiseReferenceValue.StartYear = drs["StartYear"].ToString();
                                agewiseReferenceValue.EndYear = drs["EndYear"].ToString();
                                agewiseReferenceValue.LowUpperReferenceValue = drs["LowUpperReferenceValue"].ToString();
                                agewiseReferenceValue.Sex = drs["Sex"].ToString();
                                agewiseReferenceValue.FreeText = drs["FreeText"].ToString();
                                agewiseReferenceValue.DisplayText = drs["DisplayValue"].ToString();
                                string[] lowHighValue = agewiseReferenceValue.LowUpperReferenceValue.Split('-');
                                agewiseReferenceValue.LowReferenceValue = lowHighValue[0];
                                agewiseReferenceValue.UpperReferenceValue = lowHighValue[1];
                                lstAgewiseReferenceValue.Add(agewiseReferenceValue);
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstAgewiseReferenceValue;
            }
        }
        #endregion

        #region updateAgewiseReferenceValue
        /// <summary>
        /// Table - agewisereferencevalue
        /// Update the details to agewisereferencevalue table by using TestCode and AgewiseReferenceValueID.
        /// </summary>
        ///<param name="agewisereferencevalue"
        [Route("api/Account/updateAgewiseReferenceValue")]
        [HttpPost]
        public void updateAgewiseReferenceValue(Agewisereferencevalue agewisereferencevalue)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "UPDATE  agewisereferencevalue SET StartDay=" + (string.IsNullOrEmpty(agewisereferencevalue.StartDay) ? "null" : agewisereferencevalue.StartDay) + ", " +
                    //                " EndDay=" + (string.IsNullOrEmpty(agewisereferencevalue.EndDay) ? "null" : agewisereferencevalue.EndDay) + ", " +
                    //                " StartMonth=" + (string.IsNullOrEmpty(agewisereferencevalue.StartMonth) ? "null" : agewisereferencevalue.StartMonth) + ", " +
                    //                " EndMonth=" + (string.IsNullOrEmpty(agewisereferencevalue.EndMonth) ? "null" : agewisereferencevalue.EndMonth) + ", " +
                    //                " StartYear=" + (string.IsNullOrEmpty(agewisereferencevalue.StartYear) ? "null" : agewisereferencevalue.StartYear) + ", " +
                    //                " EndYear=" + (string.IsNullOrEmpty(agewisereferencevalue.EndYear) ? "null" : agewisereferencevalue.EndYear) + ", " +
                    //                " LowUpperReferenceValue='" + agewisereferencevalue.LowUpperReferenceValue + "',Sex='" + agewisereferencevalue.Sex + "', " +
                    //                " FreeText='" + agewisereferencevalue.FreeText + "',DisplayValue='" + agewisereferencevalue.DisplayText + "' " +
                    //                " where AgewiseReferenceValueID='" + agewisereferencevalue.AgewiseReferenceValueID + "' && TestCode='" + agewisereferencevalue.TestCode + "'";
                    string strSQL = "UPDATE  agewisereferencevalue SET StartDay=" + agewisereferencevalue.StartDay + ", " +
                                    " EndDay=" + agewisereferencevalue.EndDay + ", " +
                                    " StartMonth=0, " +
                                    " EndMonth=0, " +
                                    " StartYear=" + agewisereferencevalue.StartYear + ", " +
                                    " EndYear=" + agewisereferencevalue.EndYear + ", " +
                                    " LowUpperReferenceValue='" + agewisereferencevalue.LowUpperReferenceValue + "',Sex='" + agewisereferencevalue.Sex + "', " +
                                    " FreeText='" + agewisereferencevalue.FreeText + "',DisplayValue='" + agewisereferencevalue.DisplayText + "' " +
                                    " where AgewiseReferenceValueID='" + agewisereferencevalue.AgewiseReferenceValueID + "' && TestCode='" + agewisereferencevalue.TestCode + "'";

                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region deleteAgewiseReferenceValue
        /// <summary>
        /// Table - agewisereferencevalue
        /// Update the details to agewisereferencevalue table by using AgewiseReferenceValueID.
        /// </summary>
        ///<param name="agewisereferencevalue"
        [Route("api/Account/deleteAgewiseReferenceValue")]
        [HttpPost]
        public void deleteAgewiseReferenceValue(int AgewiseReferenceValueID, string TestCode)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "delete from  agewisereferencevalue " +
                                    " where AgewiseReferenceValueID='" + AgewiseReferenceValueID + "' && TestCode='" + TestCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertCalculationForTestDetails
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertCalculationForTestDetails")]
        [HttpPost]
        public void insertCalculationForTestDetails(calculationForTestDetails calculationfortestdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  calculationForTestDetails(testCode,splcalculation,units,FormulaLabel,CalculationType,TestCodesCalculationPart,Elements,CalculationCategory,NormalValues,ElementsCalculationType) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";
                    conn.Open();

                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", calculationfortestdetails.testCode);
                    cmd.Parameters.AddWithValue("@val2", calculationfortestdetails.splcalculation);
                    cmd.Parameters.AddWithValue("@val3", calculationfortestdetails.CalculationUnits);
                    cmd.Parameters.AddWithValue("@val4", calculationfortestdetails.FormulaLabel);
                    cmd.Parameters.AddWithValue("@val5", calculationfortestdetails.CalculationType);
                    cmd.Parameters.AddWithValue("@val6", calculationfortestdetails.TestCodesCalculationPart);
                    cmd.Parameters.AddWithValue("@val7", calculationfortestdetails.ElementName);
                    cmd.Parameters.AddWithValue("@val8", calculationfortestdetails.CalculationCategory);
                    cmd.Parameters.AddWithValue("@val9", calculationfortestdetails.NormalValues);
                    cmd.Parameters.AddWithValue("@val10", calculationfortestdetails.ElementsCalculationType);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertAgewiseSexReferenceValue
        /// <summary>
        /// table - agewisesexreferencevalue
        /// </summary>
        /// <param name="agewiseSexReferencevalue"></param>
        [Route("api/Account/insertAgewiseSexReferenceValue")]
        [HttpPost]
        public void insertAgewiseSexReferenceValue(AgewiseSexReferencevalue agewiseSexReferencevalue)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO agewisesexreferencevalue(TestCode,TestName,StartDay,EndDay,StartMonth,EndMonth,StartYear,EndYear,LowUpperSexReferenceValue,FreeText,Units,DisplayValue,ElementName) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", agewiseSexReferencevalue.TestCode);
                    cmd.Parameters.AddWithValue("@val2", agewiseSexReferencevalue.TestName);
                    cmd.Parameters.AddWithValue("@val3", agewiseSexReferencevalue.StartDay);
                    cmd.Parameters.AddWithValue("@val4", agewiseSexReferencevalue.EndDay);
                    cmd.Parameters.AddWithValue("@val5", agewiseSexReferencevalue.StartMonth);
                    cmd.Parameters.AddWithValue("@val6", agewiseSexReferencevalue.EndMonth);
                    cmd.Parameters.AddWithValue("@val7", agewiseSexReferencevalue.StartYear);
                    cmd.Parameters.AddWithValue("@val8", agewiseSexReferencevalue.EndYear);
                    cmd.Parameters.AddWithValue("@val9", agewiseSexReferencevalue.LowUpperSexReferenceValue);
                    cmd.Parameters.AddWithValue("@val10", agewiseSexReferencevalue.FreeText);
                    cmd.Parameters.AddWithValue("@val11", agewiseSexReferencevalue.Units);
                    cmd.Parameters.AddWithValue("@val12", agewiseSexReferencevalue.DisplayText);
                    cmd.Parameters.AddWithValue("@val13", agewiseSexReferencevalue.ElementName);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion



        #region UploadImageFiles
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/UploadImageFiles")]
        [System.Web.Http.AcceptVerbs("GET", "POST")]

        [System.Web.Http.HttpPost]
        //[HttpPost]
        public List<ImageforTest> UploadImageFiles()
        //public string UploadImageFiles()
        {
            List<ImageforTest> lstImageforTest = new List<ImageforTest>();
            int iUploadedCnt = 0;
            try
            {
                // DEFINE THE PATH WHERE WE WANT TO SAVE THE FILES.
                string physicalGrandparentPath = "";
                //physicalGrandparentPath = @"D:/pathosite/LabTestImage/";
                //physicalGrandparentPath = @"C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/patho/LabTestImage/";
                physicalGrandparentPath = System.Configuration.ConfigurationManager.AppSettings["attTableViewPath"];
                System.Web.HttpFileCollection hfc = System.Web.HttpContext.Current.Request.Files;

                // CHECK THE FILE COUNT.
                for (int iCnt = 1; iCnt <= hfc.Count - 1; iCnt++)
                {
                    System.Web.HttpPostedFile hpf = hfc[iCnt];

                    if (hpf.ContentLength > 0)
                    {

                        // CHECK IF THE SELECTED FILE(S) ALREADY EXISTS IN FOLDER. (AVOID DUPLICATE)
                        if (!File.Exists(physicalGrandparentPath + Path.GetFileName(hpf.FileName)))
                        {
                            ImageforTest imageDetails = new ImageforTest();
                            // SAVE THE FILES IN THE FOLDER.
                            hpf.SaveAs(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                            iUploadedCnt = iUploadedCnt + 1;
                            imageDetails.iUploadedCnt = iUploadedCnt + 1;
                            imageDetails.ImagePath = physicalGrandparentPath + Path.GetFileName(hpf.FileName);
                            imageDetails.ImageName = Path.GetFileName(hpf.FileName);
                            imageDetails.UploadStatus = "1";
                            lstImageforTest.Add(imageDetails);
                        }
                        else
                        {
                            File.Delete(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                            hpf.SaveAs(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                            ImageforTest imageDetails = new ImageforTest();
                            iUploadedCnt = iUploadedCnt + 1;
                            imageDetails.iUploadedCnt = iUploadedCnt + 1;
                            imageDetails.ImagePath = physicalGrandparentPath + Path.GetFileName(hpf.FileName);
                            imageDetails.ImageName = Path.GetFileName(hpf.FileName);
                            imageDetails.UploadStatus = "1";
                            lstImageforTest.Add(imageDetails);
                        }
                    }
                }


                //var httpRequest = HttpContext.Current.Request;
                //if (httpRequest.Files.Count > 0)
                //{
                //    var docfiles = new List<string>();
                //    foreach (string file in httpRequest.Files)
                //    {
                //        var postedFile = httpRequest.Files[file];
                //        var filePath = (physicalGrandparentPath + Path.GetFileName(postedFile.FileName));
                //        postedFile.SaveAs(filePath);
                //        docfiles.Add(filePath);
                //    }
                //}
            }
            catch (Exception ex)
            {
                ImageforTest imageDetails = new ImageforTest();
                imageDetails.TestName = ex.Message;
                lstImageforTest.Add(imageDetails);
            }
            //return lstImageforTest;
            // RETURN A MESSAGE (OPTIONAL).
            if (iUploadedCnt > 0)
            {
                return lstImageforTest;
            }
            else
            {
                return lstImageforTest;
            }
        }
        #endregion


        #region insertImageforTest
        /// <summary>
        /// Table - imagefortest
        /// </summary>
        ///<param name="imageforTestdetails"></param>
        [Route("api/Account/insertImageforTest")]
        [HttpPost]
        public void insertImageforTest(ImageforTest imageforTestdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  imagefortest(TestCode,RegID,MrdNo,ImageByte,ImageName,ImagePath,UploadStatus,TestName) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", imageforTestdetails.TestCode);
                    cmd.Parameters.AddWithValue("@val2", imageforTestdetails.RegID);
                    cmd.Parameters.AddWithValue("@val3", imageforTestdetails.MrdNo);
                    cmd.Parameters.AddWithValue("@val4", imageforTestdetails.ImageByte);
                    cmd.Parameters.AddWithValue("@val5", imageforTestdetails.ImageName);
                    cmd.Parameters.AddWithValue("@val6", imageforTestdetails.ImagePath);
                    cmd.Parameters.AddWithValue("@val7", imageforTestdetails.UploadStatus);
                    cmd.Parameters.AddWithValue("@val8", imageforTestdetails.TestName);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region
        /// <summary>
        /// Table - imagefortest
        /// </summary>
        /// <param name="TestCode"></param>
        /// <returns></returns>
        [Route("api/Account/getAllImagebyTest")]
        [HttpGet]
        public List<ImageforTest> getAllImagebyTest(string TestCode)
        {
            List<ImageforTest> lstImageforTest = new List<ImageforTest>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  imagefortest where TestCode = '" + TestCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ImageforTest imageTest = new ImageforTest();
                            imageTest.ImageId = (int)dr["ImageId"];
                            imageTest.TestCode = dr["TestCode"].ToString();
                            //imageTest.RegID = (int)dr["RegID"];
                            //imageTest.MrdNo = dr["MrdNo"].ToString();
                            //imageTest.ImageByte = Convert.ToByte(dr["ImageByte"]);
                            imageTest.ImageName = dr["ImageName"].ToString();
                            imageTest.ImagePath = dr["ImagePath"].ToString();
                            //imageTest.UploadStatus = dr["UploadStatus"].ToString();
                            imageTest.TestName = dr["TestName"].ToString();
                            lstImageforTest.Add(imageTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstImageforTest;
            }
        }
        #endregion


        #region
        /// <summary>
        /// Table - imagefortest
        /// </summary>
        /// <param name="TestCode"></param>
        /// <returns></returns>
        [Route("api/Account/deleteImagebyTestCode")]
        [HttpPost]
        public void deleteImagebyTestCode(string testCode, string imageName)
        {


            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "delete FROM  imagefortest where TestCode = '" + testCode + "' and ImageName = '" + imageName + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
        }
        #endregion


        #region getAllReferredByDoctorUsingProviderName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllReferredByDoctorUsingProviderName")]
        [HttpGet]
        public List<LabOrder> getAllReferredByDoctorUsingProviderName(string providername)
        {

            List<LabOrder> lstrefDoctor = new List<LabOrder>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  laborder where ProviderName = '" + providername + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrder refDoctor = new LabOrder();
                            refDoctor.ReferredBy = dr["ReferredBy"].ToString();
                            lstrefDoctor.Add(refDoctor);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstrefDoctor;
            }
        }
        #endregion


        #region getTodaypatientDetailsByDoctorName
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getTodaypatientDetailsByDoctorName")]
        [HttpGet]
        public List<LabOrder> getTodaypatientDetailsByDoctorName(string docname)
        {

            string todaydate = DateTime.Now.Date.ToString("yyyy-MM-dd");

            // string test = todaydate.ToShortDateString();
            List<LabOrder> lstrefDoctor = new List<LabOrder>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  laborder where ReferredBy = '" + docname + "' AND date(CreateDate) = '" + todaydate + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrder refDoctor = new LabOrder();
                            refDoctor.Amount = (double)dr["Amount"];
                            refDoctor.ReferredBy = dr["ReferredBy"].ToString();
                            refDoctor.PatientName = dr["PatientName"].ToString();
                            refDoctor.MrdNo = dr["MrdNo"].ToString();
                            lstrefDoctor.Add(refDoctor);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstrefDoctor;
            }
        }
        #endregion


        #region getReportLabTestResultByMrdNoViewClaculation
        /// <summary>
        /// Table - resultlabtest
        /// </summary>
        /// get pending amount values from resultlabtest table
        /// <returns></returns>
        [Route("api/Account/getReportLabTestResultByMrdNoViewClaculation")]
        [HttpGet]
        public List<ResultLabTech> getReportLabTestResultByMrdNoViewClaculation(string mrdNo)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and TestCode IS NULL";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            resultLabTech.ActualValue = dr["ActualValue"].ToString();
                            resultLabTech.CalculationFormula = dr["CalculationFormula"].ToString();
                            resultLabTech.CalculationInformation = dr["CalculationInformation"].ToString();
                            resultLabTech.CalculationUnits = dr["CalculationUnits"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getTestMultipleComponentsforLabView
        /// <summary>
        /// Table - testmultiplecomponents
        /// </summary>
        /// Listed all values from testmultiplecomponents table by using TestCode
        /// <returns></returns>
        [Route("api/Account/getTestMultipleComponentsforLabView")]
        [HttpGet]
        public List<TestMultipleComponents> getTestMultipleComponentsforLabView(string TestCode)
        {
            List<TestMultipleComponents> lstMultipleComponents = new List<TestMultipleComponents>();
            DataTable dt = new DataTable();
            //int i = 1;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                    {
                        string strSQLs = "SELECT * FROM testmultiplecomponents where TestCode='" + TestCode + "' Order by PriorityStatus asc";
                        conns.Open();
                        MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                        MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                        DataSet ds = new DataSet();
                        mydatas.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow drs in dt.Rows)
                            {
                                if (drs != null)
                                {
                                    TestMultipleComponents MultipleComponents = new TestMultipleComponents();
                                    MultipleComponents.TestMultipleComponentsID = (int)drs["TestMultipleComponentsID"];
                                    MultipleComponents.TestCode = drs["TestCode"].ToString();
                                    MultipleComponents.ElementName = drs["ElementName"].ToString();
                                    MultipleComponents.Color = drs["Color"].ToString();
                                    MultipleComponents.Units = drs["Units"].ToString();
                                    MultipleComponents.Comments = drs["Comments"].ToString();
                                    MultipleComponents.CriticalLow = drs["CriticalLow"].ToString();
                                    MultipleComponents.CriticalHigh = drs["CriticalHigh"].ToString();
                                    MultipleComponents.ReferenceHigh = drs["ReferenceLow"].ToString();
                                    MultipleComponents.ReferenceLow = drs["ReferenceHigh"].ToString();
                                    MultipleComponents.PriorityStatus = Convert.ToInt32(drs["PriorityStatus"]);
                                    MultipleComponents.Methodology = drs["Methodology"].ToString();

                                    lstMultipleComponents.Add(MultipleComponents);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstMultipleComponents;
            }
        }
        #endregion


        #region getCalculationByTestCodeandElement
        /// <summary>
        /// Table - calculationfortestdetails
        /// </summary>
        /// get details from calculationfortestdetails table by testCode and ElementName
        /// <returns></returns>
        [Route("api/Account/getCalculationByTestCodeandElement")]
        [HttpGet]
        public List<calculationForTestDetails> getCalculationByTestCodeandElement(string testCode, string ElementName)
        {
            List<calculationForTestDetails> lstTestCalculation = new List<calculationForTestDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from   calculationfortestdetails where testCode='" + testCode + "' AND Elements='" + ElementName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            calculationForTestDetails testCalculation = new calculationForTestDetails();
                            testCalculation.testCode = dr["TestCode"].ToString();
                            testCalculation.CalculationUnits = dr["units"].ToString();
                            testCalculation.FormulaLabel = dr["formulaLabel"].ToString();
                            testCalculation.splcalculation = dr["splcalculation"].ToString();
                            testCalculation.CalculationType = dr["CalculationType"].ToString();
                            testCalculation.TestCodesCalculationPart = dr["TestCodesCalculationPart"].ToString();
                            testCalculation.ElementName = dr["Elements"].ToString();
                            testCalculation.CalculationCategory = dr["CalculationCategory"].ToString();
                            testCalculation.NormalValues = dr["NormalValues"].ToString();
                            testCalculation.ElementsCalculationType = dr["ElementsCalculationType"].ToString();
                            lstTestCalculation.Add(testCalculation);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstTestCalculation;
            }
        }
        #endregion


        #region getsignUpDetailswithSignature
        /// <summary>
        /// Table - login
        /// to get User Signature
        /// </summary>
        /// <param name="userName"></param>
        [Route("api/Account/getsignUpDetailswithSignature")]
        [HttpGet]
        public Login getsignUpDetailswithSignature(string userName)
        {
            Login loginDetails = new Login();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from  login where UserName='" + userName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            loginDetails.SignatureImagePath = dr["SignatureImagePath"].ToString();
                            loginDetails.Role = dr["Role"].ToString();
                            loginDetails.SignatureImageName = dr["SignatureImageName"].ToString();
                            loginDetails.RoleId = (int)dr["RoleId"];
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return loginDetails;
            }
        }
        #endregion

        #region insertMultipleComponentswithCalculation
        /// <summary>
        /// table - multiplecomponentwithcalculation
        /// </summary>
        /// <param name="multiplecomponentwithcalculation"></param>
        [Route("api/Account/insertMultipleComponentswithCalculation")]
        [HttpPost]
        public void insertMultipleComponentswithCalculation(MultipleComponentswithCalculation multipleComponentsCalculation)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  multiplecomponentwithcalculation Where MrdNo='" + multipleComponentsCalculation.MrdNo + "' && TestCode ='" + multipleComponentsCalculation.TestCode + "' && ElementName='" + multipleComponentsCalculation.ElementName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string strSQL1 = "UPDATE  multiplecomponentwithcalculation SET Result=@Result,Notes=@Notes,Comments=@Comments Where MrdNo='" + multipleComponentsCalculation.MrdNo + "' AND TestCode ='" + multipleComponentsCalculation.TestCode + "' AND ElementName='" + multipleComponentsCalculation.ElementName + "'";
                        //  conn.Open();
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@Result", multipleComponentsCalculation.Result);
                        cmd1.Parameters.AddWithValue("@Comments", multipleComponentsCalculation.Comments);
                        cmd1.Parameters.AddWithValue("@Notes", multipleComponentsCalculation.Notes);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        string strSQL1 = "INSERT INTO  multiplecomponentwithcalculation(MrdNo,TestCode,TestName,ElementName,Calculation,Result,Notes,Comments,ActualValue,NormalValues,Units,DisplayValue,CreateDate,RegId,PriorityStatus,Methodology,FreeText,NormalValuesFiled) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16,@val17,@val18)";
                        //conn.Open();
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@val1", multipleComponentsCalculation.MrdNo);
                        cmd1.Parameters.AddWithValue("@val2", multipleComponentsCalculation.TestCode);
                        cmd1.Parameters.AddWithValue("@val3", multipleComponentsCalculation.TestName);
                        cmd1.Parameters.AddWithValue("@val4", multipleComponentsCalculation.ElementName);
                        cmd1.Parameters.AddWithValue("@val5", multipleComponentsCalculation.Calculation);
                        cmd1.Parameters.AddWithValue("@val6", multipleComponentsCalculation.Result);
                        cmd1.Parameters.AddWithValue("@val7", multipleComponentsCalculation.Notes);
                        cmd1.Parameters.AddWithValue("@val8", multipleComponentsCalculation.Comments);
                        cmd1.Parameters.AddWithValue("@val9", multipleComponentsCalculation.ActualValue);
                        cmd1.Parameters.AddWithValue("@val10", multipleComponentsCalculation.NormalValues);
                        cmd1.Parameters.AddWithValue("@val11", multipleComponentsCalculation.Units);
                        cmd1.Parameters.AddWithValue("@val12", multipleComponentsCalculation.DisplayValue);
                        cmd1.Parameters.AddWithValue("@val13", DateTime.Now);
                        cmd1.Parameters.AddWithValue("@val14", multipleComponentsCalculation.RegId);
                        cmd1.Parameters.AddWithValue("@val15", multipleComponentsCalculation.PriorityStatus);
                        cmd1.Parameters.AddWithValue("@val16", multipleComponentsCalculation.Methodology);
                        cmd1.Parameters.AddWithValue("@val17", multipleComponentsCalculation.FreeText);
                        cmd1.Parameters.AddWithValue("@val18", multipleComponentsCalculation.NormalValuesFiled);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region UpdateMultipleComponentsResult
        /// <summary>
        /// table - multiplecomponentwithcalculation
        /// </summary>
        /// <param name="multiplecomponentwithcalculation"></param>
        [Route("api/Account/UpdateMultipleComponentsResult")]
        [HttpPost]
        public void UpdateMultipleComponentsResult(MultipleComponentswithCalculation multipleComponentsCalculation)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + multipleComponentsCalculation.MrdNo + "' && ResultLabId ='" + multipleComponentsCalculation.ComponentId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string strSQL1 = "UPDATE  resultlabtest SET Result=@Result,Comment1=@Comments Where MrdNo='" + multipleComponentsCalculation.MrdNo + "' && ResultLabId ='" + multipleComponentsCalculation.ComponentId + "'";
                        //  conn.Open();
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@Result", multipleComponentsCalculation.Result);
                        cmd1.Parameters.AddWithValue("@Comments", multipleComponentsCalculation.Comments);
                        //cmd1.Parameters.AddWithValue("@Notes", multipleComponentsCalculation.Notes);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                    //else
                    //{
                    //    string strSQL1 = "INSERT INTO  multiplecomponentwithcalculation(MrdNo,TestCode,TestName,ElementName,Calculation,Result,Notes,Comments,ActualValue,NormalValues,Units,DisplayValue,CreateDate,RegId,PriorityStatus,Methodology,FreeText,NormalValuesFiled) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14,@val15,@val16,@val17,@val18)";
                    //    //conn.Open();
                    //    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                    //    cmd1.Parameters.AddWithValue("@val1", multipleComponentsCalculation.MrdNo);
                    //    cmd1.Parameters.AddWithValue("@val2", multipleComponentsCalculation.TestCode);
                    //    cmd1.Parameters.AddWithValue("@val3", multipleComponentsCalculation.TestName);
                    //    cmd1.Parameters.AddWithValue("@val4", multipleComponentsCalculation.ElementName);
                    //    cmd1.Parameters.AddWithValue("@val5", multipleComponentsCalculation.Calculation);
                    //    cmd1.Parameters.AddWithValue("@val6", multipleComponentsCalculation.Result);
                    //    cmd1.Parameters.AddWithValue("@val7", multipleComponentsCalculation.Notes);
                    //    cmd1.Parameters.AddWithValue("@val8", multipleComponentsCalculation.Comments);
                    //    cmd1.Parameters.AddWithValue("@val9", multipleComponentsCalculation.ActualValue);
                    //    cmd1.Parameters.AddWithValue("@val10", multipleComponentsCalculation.NormalValues);
                    //    cmd1.Parameters.AddWithValue("@val11", multipleComponentsCalculation.Units);
                    //    cmd1.Parameters.AddWithValue("@val12", multipleComponentsCalculation.DisplayValue);
                    //    cmd1.Parameters.AddWithValue("@val13", DateTime.Now);
                    //    cmd1.Parameters.AddWithValue("@val14", multipleComponentsCalculation.RegId);
                    //    cmd1.Parameters.AddWithValue("@val15", multipleComponentsCalculation.PriorityStatus);
                    //    cmd1.Parameters.AddWithValue("@val16", multipleComponentsCalculation.Methodology);
                    //    cmd1.Parameters.AddWithValue("@val17", multipleComponentsCalculation.FreeText);
                    //    cmd1.Parameters.AddWithValue("@val18", multipleComponentsCalculation.NormalValuesFiled);
                    //    cmd1.CommandType = CommandType.Text;
                    //    cmd1.ExecuteNonQuery();
                    //}
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region getgroupcount
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getgroupcount")]
        [HttpGet]
        public string getgroupcount(string ProviderHostName, string groupName)
        {
            string result = "";
            int labcount = 0;
            int groupCount = 0;
            //LabOrder labcount = new LabOrder();
            DataTable dt = new DataTable();
            DataTable dt1 = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT count(*) FROM  laborder where ProviderName = '" + groupName + "' AND ProviderHostName = '" + ProviderHostName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            labcount = Convert.ToInt32(dr[0]);
                        }
                    }

                    string strSQL1 = "SELECT * FROM  groupmaster where GroupName ='" + groupName + "'";
                    // conn.Open();
                    MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata1);
                    DataSet ds1 = new DataSet();
                    mydata1.Fill(ds1);
                    dt1 = ds1.Tables[0];
                    foreach (DataRow dr1 in dt1.Rows)
                    {
                        if (dr1 != null)
                        {

                            groupCount = Convert.ToInt32(dr1["NoOfPerson"]);
                        }
                    }

                    if (labcount >= groupCount)
                    {
                        result = "false";

                    }
                    else
                    {
                        result = "true";
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return result;
            }
        }
        #endregion



        #region getgroupcountRemain
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getgroupcountRemain")]
        [HttpGet]
        public int getgroupcountRemain(string ProviderHostName, string groupName)
        {
            int result = 0;
            int labcount = 0;
            int groupCount = 0;
            //LabOrder labcount = new LabOrder();
            DataTable dt = new DataTable();
            DataTable dt1 = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT count(*) FROM  laborder where ProviderName = '" + groupName + "' AND ProviderHostName = '" + ProviderHostName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            labcount = Convert.ToInt32(dr[0]);
                        }
                    }

                    string strSQL1 = "SELECT * FROM  groupmaster where GroupName ='" + groupName + "'";
                    // conn.Open();
                    MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata1);
                    DataSet ds1 = new DataSet();
                    mydata1.Fill(ds1);
                    dt1 = ds1.Tables[0];
                    foreach (DataRow dr1 in dt1.Rows)
                    {
                        if (dr1 != null)
                        {

                            groupCount = Convert.ToInt32(dr1["NoOfPerson"]);
                        }
                    }

                    result = groupCount - labcount;
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return result;
            }
        }
        #endregion


        #region getgroupcountFilterByRegId
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getgroupcountFilterByRegId")]
        [HttpGet]
        public int getgroupcountFilterByRegId(string RegID, string ProviderHostName)
        {
            int labcount = 0;
            //LabOrder labcount = new LabOrder();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT count(*) FROM  laborder   where  ProviderName = 'Group' AND ProviderHostName = '" + ProviderHostName + "'";
                    string strSQL = "SELECT count(*) FROM  laborder  where ProviderName = 'Group' AND ProviderHostName = '" + ProviderHostName + "' AND RegID = '" + RegID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            labcount = Convert.ToInt32(dr[0]);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return labcount;
            }
        }
        #endregion


        #region getAllAgeRefferencesByTestCodeMultipleComponents
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// Listed all values from LabTestList,childtestlist table by MrdNo
        /// <returns></returns>
        [Route("api/Account/getAllAgeRefferencesByTestCodeMultipleComponents")]
        [HttpGet]
        public List<Agewisereferencevalue> getAllAgeRefferencesByTestCodeMultipleComponents(string testCode, string elementName, string dob, string age, string sex)
        {
            List<Agewisereferencevalue> allReferenceRanges = new List<Agewisereferencevalue>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    DataTable dtDefault = new DataTable();
                    strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= 0  and EndYear >= 200 and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";
                    conn.Open();
                    MySqlDataAdapter mydataDefault = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmdDefault = new MySqlCommandBuilder(mydataDefault);
                    DataSet dsDefault = new DataSet();
                    mydataDefault.Fill(dsDefault);
                    dtDefault = dsDefault.Tables[0];
                    if (dtDefault.Rows.Count == 0)
                    {

                        if (Convert.ToInt32(age) >= 1)
                        {
                            strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";
                        }
                        else
                        {
                            DateTime dateOfBirth = Convert.ToDateTime(dob);
                            DateTime todayDate = DateTime.Now;
                            double daysDifferent = (todayDate - dateOfBirth).TotalDays;
                            if (daysDifferent >= 31)
                            {
                                double monthDifferent = daysDifferent / 31;
                                strSQL = "SELECT * FROM agewisereferencevalue where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";

                            }

                            else
                            {

                                strSQL = "SELECT * FROM agewisereferencevalue where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";
                            }
                        }


                        //conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count != 1)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {

                                    if (Convert.ToInt32(age) >= 1)
                                    {
                                        strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "' and Sex='" + sex + "' and ElementName ='" + elementName + "'";

                                    }
                                    else
                                    {
                                        DateTime dateOfBirth = Convert.ToDateTime(dob);
                                        DateTime todayDate = DateTime.Now;
                                        double daysDifferent = (todayDate - dateOfBirth).TotalDays;
                                        if (daysDifferent >= 31)
                                        {
                                            double monthDifferent = daysDifferent / 31;
                                            strSQL = "SELECT * FROM agewisereferencevalue where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "' and Sex='" + sex + " and ElementName ='" + elementName + "'";

                                        }

                                        else
                                        {

                                            strSQL = "SELECT * FROM agewisereferencevalue where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "'and Sex='" + sex + "' and ElementName ='" + elementName + "'";
                                        }
                                    }
                                    DataTable dta = new DataTable();
                                    MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL, conn);
                                    MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
                                    DataSet dsa = new DataSet();
                                    mydataa.Fill(dsa);
                                    dta = dsa.Tables[0];
                                    foreach (DataRow dra in dta.Rows)
                                    {
                                        if (dra != null)
                                        {
                                            Agewisereferencevalue agewiseReferenceValue1 = new Agewisereferencevalue();

                                            agewiseReferenceValue1.LowUpperReferenceValue = dra["LowUpperReferenceValue"].ToString();
                                            agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
                                            agewiseReferenceValue1.FreeText = dra["FreeText"].ToString();
                                            agewiseReferenceValue1.StartYear = dra["StartYear"].ToString();
                                            agewiseReferenceValue1.EndYear = dra["EndYear"].ToString();
                                            agewiseReferenceValue1.StartMonth = dra["StartMonth"].ToString();
                                            agewiseReferenceValue1.EndMonth = dra["EndMonth"].ToString();
                                            agewiseReferenceValue1.StartDay = dra["StartDay"].ToString();
                                            agewiseReferenceValue1.EndDay = dra["EndDay"].ToString();

                                            if (agewiseReferenceValue1.StartYear != null && agewiseReferenceValue1.EndYear != null)
                                            {

                                                agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYear + "-" + agewiseReferenceValue1.EndYear;
                                            }
                                            else if (agewiseReferenceValue1.StartDay == null && agewiseReferenceValue1.EndDay == null)
                                            {
                                                agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDay + "-" + agewiseReferenceValue1.EndDay;
                                            }
                                            else
                                            {
                                                agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonth + "-" + agewiseReferenceValue1.EndMonth;
                                            }
                                            allReferenceRanges.Clear();
                                            allReferenceRanges.Add(agewiseReferenceValue1);

                                        }
                                    }
                                }

                            }
                        }
                        else if (dt.Rows.Count == 1)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                Agewisereferencevalue agewiseReferenceValue = new Agewisereferencevalue();

                                agewiseReferenceValue.LowUpperReferenceValue = dr["LowUpperReferenceValue"].ToString();
                                agewiseReferenceValue.DisplayText = dr["DisplayValue"].ToString();
                                agewiseReferenceValue.FreeText = dr["FreeText"].ToString();
                                agewiseReferenceValue.StartYear = dr["StartYear"].ToString();
                                agewiseReferenceValue.EndYear = dr["EndYear"].ToString();
                                agewiseReferenceValue.StartMonth = dr["StartMonth"].ToString();
                                agewiseReferenceValue.EndMonth = dr["EndMonth"].ToString();
                                agewiseReferenceValue.StartDay = dr["StartDay"].ToString();
                                agewiseReferenceValue.EndDay = dr["EndDay"].ToString();

                                if (agewiseReferenceValue.StartYear != null && agewiseReferenceValue.EndYear != null)
                                {

                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartYear + "-" + agewiseReferenceValue.EndYear;
                                }
                                else if (agewiseReferenceValue.StartDay == null && agewiseReferenceValue.EndDay == null)
                                {
                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartDay + "-" + agewiseReferenceValue.EndDay;
                                }
                                else
                                {
                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonth + "-" + agewiseReferenceValue.EndMonth;
                                }

                                allReferenceRanges.Add(agewiseReferenceValue);
                            }
                        }
                    }
                    else
                    {
                        if (dtDefault.Rows.Count == 1)
                        {
                            foreach (DataRow dr in dtDefault.Rows)
                            {
                                Agewisereferencevalue agewiseReferenceValue = new Agewisereferencevalue();

                                agewiseReferenceValue.LowUpperReferenceValue = dr["LowUpperReferenceValue"].ToString();
                                agewiseReferenceValue.DisplayText = dr["DisplayValue"].ToString();
                                agewiseReferenceValue.StartYear = dr["StartYear"].ToString();
                                agewiseReferenceValue.FreeText = dr["FreeText"].ToString();
                                agewiseReferenceValue.EndYear = dr["EndYear"].ToString();
                                agewiseReferenceValue.StartMonth = dr["StartMonth"].ToString();
                                agewiseReferenceValue.EndMonth = dr["EndMonth"].ToString();
                                agewiseReferenceValue.StartDay = dr["StartDay"].ToString();
                                agewiseReferenceValue.EndDay = dr["EndDay"].ToString();

                                if (agewiseReferenceValue.StartYear != null && agewiseReferenceValue.EndYear != null)
                                {

                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartYear + "-" + agewiseReferenceValue.EndYear;
                                }
                                else if (agewiseReferenceValue.StartDay == null && agewiseReferenceValue.EndDay == null)
                                {
                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartDay + "-" + agewiseReferenceValue.EndDay;
                                }
                                else
                                {
                                    agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonth + "-" + agewiseReferenceValue.EndMonth;
                                }

                                allReferenceRanges.Add(agewiseReferenceValue);
                            }

                        }
                        else if (dtDefault.Rows.Count == 2)
                        {
                            strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= 0  and EndYear >= 200 and TestCode = '" + testCode + "' and Sex='" + sex + "' and ElementName ='" + elementName + "'";
                            DataTable dta = new DataTable();
                            MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
                            DataSet dsa = new DataSet();
                            mydataa.Fill(dsa);
                            dta = dsa.Tables[0];
                            foreach (DataRow dra in dta.Rows)
                            {
                                if (dra != null)
                                {
                                    Agewisereferencevalue agewiseReferenceValue1 = new Agewisereferencevalue();

                                    agewiseReferenceValue1.LowUpperReferenceValue = dra["LowUpperReferenceValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
                                    agewiseReferenceValue1.FreeText = dra["FreeText"].ToString();
                                    agewiseReferenceValue1.StartYear = dra["StartYear"].ToString();
                                    agewiseReferenceValue1.EndYear = dra["EndYear"].ToString();
                                    agewiseReferenceValue1.StartMonth = dra["StartMonth"].ToString();
                                    agewiseReferenceValue1.EndMonth = dra["EndMonth"].ToString();
                                    agewiseReferenceValue1.StartDay = dra["StartDay"].ToString();
                                    agewiseReferenceValue1.EndDay = dra["EndDay"].ToString();

                                    if (agewiseReferenceValue1.StartYear != null && agewiseReferenceValue1.EndYear != null)
                                    {

                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYear + "-" + agewiseReferenceValue1.EndYear;
                                    }
                                    else if (agewiseReferenceValue1.StartDay == null && agewiseReferenceValue1.EndDay == null)
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDay + "-" + agewiseReferenceValue1.EndDay;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonth + "-" + agewiseReferenceValue1.EndMonth;
                                    }
                                    allReferenceRanges.Clear();
                                    allReferenceRanges.Add(agewiseReferenceValue1);

                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return allReferenceRanges;
            }
        }
        #endregion


        //#region getAllAgeCriticalByTestCodeMultipleComponents
        ///// <summary>
        ///// Table - childtestlist
        ///// </summary>
        ///// Listed all values from LabTestList,childtestlist table by MrdNo
        ///// <returns></returns>
        //[Route("api/Account/getAllAgeCriticalByTestCodeMultipleComponents")]
        //[HttpGet]
        //public List<AgewiseCricticalReferences> getAllAgeCriticalByTestCodeMultipleComponents(string testCode, string elementName, string dob, string age, string sex)
        //{
        //    List<AgewiseCricticalReferences> allReferenceRanges = new List<AgewiseCricticalReferences>();
        //    DataTable dt = new DataTable();
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {
        //            string strSQL = "";
        //            DataTable dtDefault = new DataTable();
        //            strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= 0  and EndYear >= 200 and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";
        //            conn.Open();
        //            MySqlDataAdapter mydataDefault = new MySqlDataAdapter(strSQL, conn);
        //            MySqlCommandBuilder cmdDefault = new MySqlCommandBuilder(mydataDefault);
        //            DataSet dsDefault = new DataSet();
        //            mydataDefault.Fill(dsDefault);
        //            dtDefault = dsDefault.Tables[0];
        //            if (dtDefault.Rows.Count == 0)
        //            {

        //                if (Convert.ToInt32(age) >= 1)
        //                {
        //                    strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";
        //                }
        //                else
        //                {
        //                    DateTime dateOfBirth = Convert.ToDateTime(dob);
        //                    DateTime todayDate = DateTime.Now;
        //                    double daysDifferent = (todayDate - dateOfBirth).TotalDays;
        //                    if (daysDifferent >= 31)
        //                    {
        //                        double monthDifferent = daysDifferent / 31;
        //                        strSQL = "SELECT * FROM agewisereferencevalue where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";

        //                    }

        //                    else
        //                    {

        //                        strSQL = "SELECT * FROM agewisereferencevalue where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "' and ElementName ='" + elementName + "'";
        //                    }
        //                }


        //                //conn.Open();
        //                MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
        //                MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
        //                DataSet ds = new DataSet();
        //                mydata.Fill(ds);
        //                dt = ds.Tables[0];
        //                if (dt.Rows.Count != 1)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        if (dr != null)
        //                        {

        //                            if (Convert.ToInt32(age) >= 1)
        //                            {
        //                                strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "' and Sex='" + sex + "' and ElementName ='" + elementName + "'";

        //                            }
        //                            else
        //                            {
        //                                DateTime dateOfBirth = Convert.ToDateTime(dob);
        //                                DateTime todayDate = DateTime.Now;
        //                                double daysDifferent = (todayDate - dateOfBirth).TotalDays;
        //                                if (daysDifferent >= 31)
        //                                {
        //                                    double monthDifferent = daysDifferent / 31;
        //                                    strSQL = "SELECT * FROM agewisereferencevalue where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "' and Sex='" + sex + " and ElementName ='" + elementName + "'";

        //                                }

        //                                else
        //                                {

        //                                    strSQL = "SELECT * FROM agewisereferencevalue where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "'and Sex='" + sex + "' and ElementName ='" + elementName + "'";
        //                                }
        //                            }
        //                            DataTable dta = new DataTable();
        //                            MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL, conn);
        //                            MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
        //                            DataSet dsa = new DataSet();
        //                            mydataa.Fill(dsa);
        //                            dta = dsa.Tables[0];
        //                            foreach (DataRow dra in dta.Rows)
        //                            {
        //                                if (dra != null)
        //                                {
        //                                    AgewiseCricticalReferences agewiseCricticalReferences1 = new AgewiseCricticalReferences();

        //                                    agewiseCricticalReferences1.LowUpperCricticalValue = dra["LowUpperReferenceValue"].ToString();
        //                                    agewiseCricticalReferences1.DisplayText = dra["DisplayValue"].ToString();
        //                                    agewiseCricticalReferences1.FreeText = dra["FreeText"].ToString();
        //                                    agewiseCricticalReferences1.StartYearCrictical = dra["StartYear"].ToString();
        //                                    agewiseCricticalReferences1.EndYearCrictical = dra["EndYear"].ToString();
        //                                    agewiseCricticalReferences1.StartMonthCrictical = dra["StartMonth"].ToString();
        //                                    agewiseCricticalReferences1.EndMonthCrictical = dra["EndMonth"].ToString();
        //                                    agewiseCricticalReferences1.StartDayCrictical = dra["StartDay"].ToString();
        //                                    agewiseCricticalReferences1.EndDayCrictical = dra["EndDay"].ToString();

        //                                    if (agewiseCricticalReferences1.StartYearCrictical != null && agewiseCricticalReferences1.EndYearCrictical != null)
        //                                    {

        //                                        agewiseCricticalReferences1.AgeMerge = agewiseCricticalReferences1.StartYear + "-" + agewiseReferenceValue1.EndYear;
        //                                    }
        //                                    else if (agewiseCricticalReferences1.StartDay == null && agewiseCricticalReferences1.EndDay == null)
        //                                    {
        //                                        agewiseCricticalReferences1.AgeMerge = agewiseCricticalReferences1.StartDay + "-" + agewiseCricticalReferences1.EndDay;
        //                                    }
        //                                    else
        //                                    {
        //                                        agewiseCricticalReferences1.AgeMerge = agewiseReferenceValue1.StartMonth + "-" + agewiseReferenceValue1.EndMonth;
        //                                    }
        //                                    allReferenceRanges.Clear();
        //                                    allReferenceRanges.Add(agewiseReferenceValue1);

        //                                }
        //                            }
        //                        }

        //                    }
        //                }
        //                else if (dt.Rows.Count == 1)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        Agewisereferencevalue agewiseReferenceValue = new Agewisereferencevalue();

        //                        agewiseReferenceValue.LowUpperReferenceValue = dr["LowUpperReferenceValue"].ToString();
        //                        agewiseReferenceValue.DisplayText = dr["DisplayValue"].ToString();
        //                        agewiseReferenceValue.FreeText = dr["FreeText"].ToString();
        //                        agewiseReferenceValue.StartYear = dr["StartYear"].ToString();
        //                        agewiseReferenceValue.EndYear = dr["EndYear"].ToString();
        //                        agewiseReferenceValue.StartMonth = dr["StartMonth"].ToString();
        //                        agewiseReferenceValue.EndMonth = dr["EndMonth"].ToString();
        //                        agewiseReferenceValue.StartDay = dr["StartDay"].ToString();
        //                        agewiseReferenceValue.EndDay = dr["EndDay"].ToString();

        //                        if (agewiseReferenceValue.StartYear != null && agewiseReferenceValue.EndYear != null)
        //                        {

        //                            agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartYear + "-" + agewiseReferenceValue.EndYear;
        //                        }
        //                        else if (agewiseReferenceValue.StartDay == null && agewiseReferenceValue.EndDay == null)
        //                        {
        //                            agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartDay + "-" + agewiseReferenceValue.EndDay;
        //                        }
        //                        else
        //                        {
        //                            agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonth + "-" + agewiseReferenceValue.EndMonth;
        //                        }

        //                        allReferenceRanges.Add(agewiseReferenceValue);
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                if (dtDefault.Rows.Count == 1)
        //                {
        //                    foreach (DataRow dr in dtDefault.Rows)
        //                    {
        //                        Agewisereferencevalue agewiseReferenceValue = new Agewisereferencevalue();

        //                        agewiseReferenceValue.LowUpperReferenceValue = dr["LowUpperReferenceValue"].ToString();
        //                        agewiseReferenceValue.DisplayText = dr["DisplayValue"].ToString();
        //                        agewiseReferenceValue.StartYear = dr["StartYear"].ToString();
        //                        agewiseReferenceValue.FreeText = dr["FreeText"].ToString();
        //                        agewiseReferenceValue.EndYear = dr["EndYear"].ToString();
        //                        agewiseReferenceValue.StartMonth = dr["StartMonth"].ToString();
        //                        agewiseReferenceValue.EndMonth = dr["EndMonth"].ToString();
        //                        agewiseReferenceValue.StartDay = dr["StartDay"].ToString();
        //                        agewiseReferenceValue.EndDay = dr["EndDay"].ToString();

        //                        if (agewiseReferenceValue.StartYear != null && agewiseReferenceValue.EndYear != null)
        //                        {

        //                            agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartYear + "-" + agewiseReferenceValue.EndYear;
        //                        }
        //                        else if (agewiseReferenceValue.StartDay == null && agewiseReferenceValue.EndDay == null)
        //                        {
        //                            agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartDay + "-" + agewiseReferenceValue.EndDay;
        //                        }
        //                        else
        //                        {
        //                            agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonth + "-" + agewiseReferenceValue.EndMonth;
        //                        }

        //                        allReferenceRanges.Add(agewiseReferenceValue);
        //                    }

        //                }
        //                else if (dtDefault.Rows.Count == 2)
        //                {
        //                    strSQL = "SELECT * FROM agewisereferencevalue where StartYear <= 0  and EndYear >= 200 and TestCode = '" + testCode + "' and Sex='" + sex + "' and ElementName ='" + elementName + "'";
        //                    DataTable dta = new DataTable();
        //                    MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL, conn);
        //                    MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
        //                    DataSet dsa = new DataSet();
        //                    mydataa.Fill(dsa);
        //                    dta = dsa.Tables[0];
        //                    foreach (DataRow dra in dta.Rows)
        //                    {
        //                        if (dra != null)
        //                        {
        //                            Agewisereferencevalue agewiseReferenceValue1 = new Agewisereferencevalue();

        //                            agewiseReferenceValue1.LowUpperReferenceValue = dra["LowUpperReferenceValue"].ToString();
        //                            agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
        //                            agewiseReferenceValue1.FreeText = dra["FreeText"].ToString();
        //                            agewiseReferenceValue1.StartYear = dra["StartYear"].ToString();
        //                            agewiseReferenceValue1.EndYear = dra["EndYear"].ToString();
        //                            agewiseReferenceValue1.StartMonth = dra["StartMonth"].ToString();
        //                            agewiseReferenceValue1.EndMonth = dra["EndMonth"].ToString();
        //                            agewiseReferenceValue1.StartDay = dra["StartDay"].ToString();
        //                            agewiseReferenceValue1.EndDay = dra["EndDay"].ToString();

        //                            if (agewiseReferenceValue1.StartYear != null && agewiseReferenceValue1.EndYear != null)
        //                            {

        //                                agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYear + "-" + agewiseReferenceValue1.EndYear;
        //                            }
        //                            else if (agewiseReferenceValue1.StartDay == null && agewiseReferenceValue1.EndDay == null)
        //                            {
        //                                agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDay + "-" + agewiseReferenceValue1.EndDay;
        //                            }
        //                            else
        //                            {
        //                                agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonth + "-" + agewiseReferenceValue1.EndMonth;
        //                            }
        //                            allReferenceRanges.Clear();
        //                            allReferenceRanges.Add(agewiseReferenceValue1);

        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //        return allReferenceRanges;
        //    }
        //}
        //#endregion


        #region updateParentPaymentReceived
        /// <summary>
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/updateParentPaymentReceived")]
        [HttpPost]
        public void updateParentPaymentReceived(ParentPaymentReceived parentpayment)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE   parentpaymentreceived SET ReceivedPayment='" + parentpayment.ReceivedPayment + "',PendingAmount='" + parentpayment.PendingAmount + "',PendingNotification='" + parentpayment.PendingNotification + "',PaymentSchedule='" + parentpayment.strPaymentSchedule + "'where InvoiceId='" + parentpayment.InvoiceId + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region getReportMutlipleLabTestResultByMrdNoView
        /// <summary>
        /// Table - multiplecomponentwithcalculation
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportMutlipleLabTestResultByMrdNoView")]
        [HttpGet]
        public List<MultipleComponentswithCalculation> getReportMutlipleLabTestResultByMrdNoView(string mrdNo, string testCode, string elementName)
        {
            List<MultipleComponentswithCalculation> lstResultLabTech = new List<MultipleComponentswithCalculation>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  multiplecomponentwithcalculation where MrdNo='" + mrdNo + "' AND TestCode='" + testCode + "' AND ElementName='" + elementName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MultipleComponentswithCalculation resultLabTech = new MultipleComponentswithCalculation();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["NormalValues"].ToString();
                            resultLabTech.ElementName = dr["ElementName"].ToString();
                            resultLabTech.DisplayValue = dr["DisplayValue"].ToString();
                            //    resultLabTech.Comments = dr["Comments"].ToString();
                            //resultLabTech. = dr["Comment2"].ToString();
                            //resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            //resultLabTech.EndRange = dr["EndRange"].ToString();
                            //resultLabTech.StartRange = dr["StartRange"].ToString();
                            //resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion


        #region CollectedAt

        #region getAllCollectedAt
        /// <summary>
        ///  Table - collectedAt
        /// </summary>
        ///
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/getAllCollectedAt")]
        [HttpGet]
        public List<CollectedAt> getAllCollectedAt()
        {
            List<CollectedAt> lstCollectedDetails = new List<CollectedAt>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Doctor where RegID='" + regId + "' ";
                    string strSQL = "SELECT * FROM  collectedat";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CollectedAt collectedatDetails = new CollectedAt();

                            collectedatDetails.CollectedId = (int)dr["CollectedId"];
                            collectedatDetails.RegID = (int)dr["RegID"];
                            collectedatDetails.CollectedName = dr["CollectedName"].ToString();
                            collectedatDetails.Date = dr["Date"].ToString();
                            collectedatDetails.Amount = (int)(dr["Amount"]);

                            lstCollectedDetails.Add(collectedatDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCollectedDetails;
            }
        }
        #endregion

        #region insertCollectedAtDetails
        /// <summary>
        /// Table - Doctor
        /// Insert the Doctor table values.
        /// </summary>
        /// <param name="docdor"></param>
        [Route("api/Account/insertCollectedAtDetails")]
        [HttpPost]
        public void insertCollectedAtDetails(CollectedAt collectedat)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    conn.Open();
                    if (collectedat.CollectFlag == 1)
                    {
                        string strSQL = "INSERT INTO collectedat(RegID,CollectedName,Date,Amount) VALUES(@val1,@val2,@val3,@val4)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", collectedat.RegID);
                        cmd.Parameters.AddWithValue("@val2", collectedat.CollectedName);
                        cmd.Parameters.AddWithValue("@val3", collectedat.Date);
                        cmd.Parameters.AddWithValue("@val4", collectedat.Amount);


                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else if (collectedat.CollectFlag == 2)
                    {
                        string strSQL = "Delete from  collectedat where CollectedName='" + collectedat.CollectedName + "' ";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #endregion



        #region updateSpecialComment
        /// <summary>
        /// table - PatientRegistration
        /// </summary>
        /// <param name="patientRegistration"></param>
        [Route("api/Account/updateSpecialComment")]
        [HttpPost]
        public void updateSpecialComment(PatientRegistration patientRegistration)
        {

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "UPDATE patientregistration SET SpecialComments = '" + patientRegistration.SpecialComments + "' Where RegID='" + patientRegistration.RegID + "'";
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd = new MySqlCommand(strSQL, conn);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion


        #region insertProfileWithinProfile
        /// <summary>
        /// Table - displaytest
        /// Insert the displaytest table values.
        /// </summary>
        /// <param name="displayTest"></param>
        [Route("api/Account/insertProfileWithinProfile")]
        [HttpPost]
        public void insertProfileWithinProfile(ProfileWithinProfile addProfileWithinProfile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  displaytest(MainProfileId,MainProfileCode,SubProfileId,SubProfileName,SubProfileCode) VALUES(@val1,@val2,@val3,@val4,@val5)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", addProfileWithinProfile.MainProfileId);
                    cmd.Parameters.AddWithValue("@val2", addProfileWithinProfile.MainProfileCode);
                    cmd.Parameters.AddWithValue("@val3", addProfileWithinProfile.SubProfileId);
                    cmd.Parameters.AddWithValue("@val4", addProfileWithinProfile.SubProfileName);
                    cmd.Parameters.AddWithValue("@val5", addProfileWithinProfile.SubProfileCode);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region deleteDisplayText
        /// <summary>
        /// Table - displaytest
        /// delete the displaytest table values.
        /// </summary>
        /// <param name="displayTest"></param>
        [Route("api/Account/deleteDisplayText")]
        [HttpPost]
        public void deleteDisplayText(int deleteID)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string updateSQL = "delete from  displaytest where DisplayTestID=" + deleteID + "";
                    MySqlCommand cmd = new MySqlCommand(updateSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertDisplayTestDetails
        /// <summary>
        /// Table - displaytest
        /// Insert the displaytest table values.
        /// </summary>
        /// <param name="displayTest"></param>
        [Route("api/Account/insertDisplayTestDetails")]
        [HttpPost]
        public void insertDisplayTestDetails(DisplayTest displayTest)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    conn.Open();
                    strSQL = "select * from  displaytest where DisplayTestID=" + displayTest.DisplayTestID + "";
                    MySqlDataAdapter sda = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    sda.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string updateSQL = "Update  displaytest " +
                            " set DisplayName='" + displayTest.DisplayName + "',Amount='" + displayTest.Amount + "',ExpiryDate='" + displayTest.ExpiryDate + "' " +
                            " where DisplayTestID=" + displayTest.DisplayTestID + "";
                        MySqlCommand cmd = new MySqlCommand(updateSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        strSQL = "INSERT INTO  displaytest(TestName,TestCode,DisplayName,Amount,ExpiryDate) VALUES(@val1,@val2,@val3,@val4,@val5)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", displayTest.TestName);
                        cmd.Parameters.AddWithValue("@val2", displayTest.TestCode);
                        cmd.Parameters.AddWithValue("@val3", displayTest.DisplayName);
                        cmd.Parameters.AddWithValue("@val4", displayTest.Amount);
                        cmd.Parameters.AddWithValue("@val5", displayTest.ExpiryDate);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllDisplayTestDetails
        /// <summary>
        /// Table - displaytest
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllDisplayTestDetails")]
        [HttpGet]
        public List<DisplayTest> getAllDisplayTestDetails()
        {
            List<DisplayTest> lstDisplayTest = new List<DisplayTest>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  displaytest";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            DisplayTest displayTest = new DisplayTest();
                            displayTest.DisplayTestID = (int)dr["DisplayTestID"];
                            displayTest.TestName = dr["TestName"].ToString();
                            displayTest.TestCode = dr["TestCode"].ToString();
                            displayTest.DisplayName = dr["DisplayName"].ToString();
                            displayTest.Amount = Convert.ToDouble(dr["Amount"]);
                            displayTest.ExpiryDate = dr["ExpiryDate"].ToString();
                            lstDisplayTest.Add(displayTest);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDisplayTest;
            }
        }
        #endregion

        #region updateCalculationforTest
        /// <summary>
        /// Table - calculationfortestdetails
        /// Update the details to calculationfortestdetails table by using TestCode and ID.
        /// </summary>
        ///<param name="calculationTestDetails"
        [Route("api/Account/updateCalculationforTest")]
        [HttpPost]
        public void updateCalculationforTest(calculationForTestDetails calculationTestDetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE   calculationfortestdetails SET splcalculation='" + calculationTestDetails.splcalculation + "',formulaLabel='" + calculationTestDetails.FormulaLabel + "',NormalValues='" + calculationTestDetails.NormalValues + "',units ='" + calculationTestDetails.CalculationUnits + "' where testCode='" + calculationTestDetails.testCode + "' AND id='" + calculationTestDetails.id + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region updateAlternativeSampleContainer
        /// <summary>
        /// Table - alternativesamplecontainer
        /// Update the details to alternativesamplecontainer table by using TestCode and ID.
        /// </summary>
        ///<param name="alternativesample"
        [Route("api/Account/updateAlternativeSampleContainer")]
        [HttpPost]
        public void updateAlternativeSampleContainer(Alternativesamplecontainer alternativesample)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from  alternativesamplecontainer where TestCode='" + alternativesample.TestCode + "' and AlternativeSampleName='" + alternativesample.AlternativeSampleName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    if (dt.Rows.Count == 1)
                    {

                        string strSQL2 = "UPDATE   alternativesamplecontainer SET AlternativeSampleName='" + alternativesample.AlternativeSampleName + "' where TestCode='" + alternativesample.TestCode + "' AND AlternativeSampleContainerId='" + alternativesample.AlternativeSampleContainerId + "'";
                        //  conn.Open();
                        MySqlCommand cmd2 = new MySqlCommand(strSQL2, conn);
                        cmd2.CommandType = CommandType.Text;
                        cmd2.ExecuteNonQuery();
                    }
                    else
                    {

                        string strSQL1 = "INSERT INTO Alternativesamplecontainer(AlternativeSampleName,TestCode) VALUES(@val1,@val2)";
                        //  conn.Open();
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@val1", alternativesample.AlternativeSampleName);
                        cmd1.Parameters.AddWithValue("@val2", alternativesample.TestCode);

                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllsignUpDetailsSignature
        /// <summary>
        /// Table - login
        /// to get User Signature
        /// </summary>
        /// <param name="userName"></param>
        [Route("api/Account/getAllsignUpDetailsSignature")]
        [HttpGet]
        public List<Login> getAllsignUpDetailsSignature(string Role)
        {
            List<Login> lstloginDetails = new List<Login>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from  login where Role='" + Role + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        Login login = new Login();
                        if (dr != null)
                        {
                            login.UserName = dr["UserName"].ToString();
                            login.SignatureImagePath = dr["SignatureImagePath"].ToString();
                            login.Role = dr["Role"].ToString();
                            login.SignatureImageName = dr["SignatureImageName"].ToString();
                            login.RoleId = (int)dr["RoleId"];
                            lstloginDetails.Add(login);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstloginDetails;
            }
        }
        #endregion


        #region getReportMultipleComponentResult
        /// <summary>
        /// Table - multiplecomponentwithcalculation
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getReportMultipleComponentResult")]
        [HttpGet]
        public List<MultipleComponentswithCalculation> getReportMultipleComponentResult(string mrdNo, string testCode)
        {
            List<MultipleComponentswithCalculation> lstMultipleComponentResult = new List<MultipleComponentswithCalculation>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  multiplecomponentwithcalculation where MrdNo='" + mrdNo + "' AND TestCode='" + testCode + "' order by PriorityStatus asc";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MultipleComponentswithCalculation MultipleComponentResult = new MultipleComponentswithCalculation();
                            MultipleComponentResult.MrdNo = dr["MrdNo"].ToString();
                            MultipleComponentResult.Result = dr["Result"].ToString();
                            MultipleComponentResult.TestName = dr["TestName"].ToString();
                            MultipleComponentResult.TestCode = dr["TestCode"].ToString();
                            MultipleComponentResult.NormalValues = dr["NormalValues"].ToString();
                            MultipleComponentResult.ElementName = dr["ElementName"].ToString();
                            MultipleComponentResult.Units = dr["Units"].ToString();
                            MultipleComponentResult.Comments = dr["Comments"].ToString();
                            MultipleComponentResult.ActualValue = dr["ActualValue"].ToString();
                            MultipleComponentResult.Notes = dr["Notes"].ToString();
                            MultipleComponentResult.DisplayValue = dr["DisplayValue"].ToString();
                            MultipleComponentResult.Calculation = dr["Calculation"].ToString();
                            MultipleComponentResult.Methodology = dr["Methodology"].ToString();
                            MultipleComponentResult.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                            MultipleComponentResult.PriorityStatus = (int)dr["PriorityStatus"];
                            MultipleComponentResult.Status = (int)dr["Status"];

                            lstMultipleComponentResult.Add(MultipleComponentResult);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstMultipleComponentResult;
            }
        }
        #endregion


        #region EmailNotificationforPlesk
        /// <summary>
        ///
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>

        [Route("api/Account/EmailNotificationforPlesk")]
        [HttpPost]
        public string EmailNotificationforPlesk()
        {

            string ToMail = "satp82.p@gmail.com"; string CCMail = ""; string BCCMail = ""; string MailSubject = "test"; string BodyMail = "testing"; string mrdNo = "P345"; string patientID = "pc345"; string searchName = "";

            var emailFrom = "" + System.Configuration.ConfigurationManager.AppSettings["emailAccount"] + "";
            var emailPwd = "" + System.Configuration.ConfigurationManager.AppSettings["emailPassword"] + "";

            string[] ccVariable;
            string[] bccVariable;
            string[] toVariable;
            string returnString = "";
            MailMessage sndmail = new MailMessage();
            System.Web.HttpFileCollection hfc = System.Web.HttpContext.Current.Request.Files;

            string physicalGrandparentPath;
            physicalGrandparentPath = @"" + System.Configuration.ConfigurationManager.AppSettings["emailDownPath"] + "";
            DirectoryInfo dinfo2 = new DirectoryInfo(physicalGrandparentPath);

            //if (searchName != "" && searchName != null)
            //{
            //    var chksearchName = searchName.Split(',');
            //    foreach (var fileSearch in chksearchName)
            //    {
            //        FileInfo[] Files2 = dinfo2.GetFiles(fileSearch + ".pdf");
            //        if (Files2.Length > 0)
            //        {
            //            for (int iCnt = 0; iCnt <= Files2.Length - 1; iCnt++)
            //            {
            //                string fileName = Path.GetFileName(Files2[iCnt].Name);
            //                FileStream fileStream = new FileStream(Files2[iCnt].FullName, FileMode.Open, FileAccess.Read);
            //                sndmail.Attachments.Add(new Attachment(fileStream, fileName));
            //            }
            //        }
            //    }
            //}
            //if (hfc.Count > 0)
            //{
            //    for (int iCnt = 0; iCnt <= hfc.Count - 1; iCnt++)
            //    {
            //        System.Web.HttpPostedFile hpf = hfc[iCnt];
            //        if (hpf.ContentLength > 0)
            //        {
            //            string fileName = Path.GetFileName(hpf.FileName);
            //            sndmail.Attachments.Add(new Attachment(hpf.InputStream, fileName));
            //        }
            //    }
            //}
            SmtpClient SmtpServer = new SmtpClient();
            SmtpServer.Host = "smtp.gmail.com";
            sndmail.From = new MailAddress(emailFrom);
            if (ToMail != null)
            {
                toVariable = ToMail.Split(',');
                if (toVariable.Length > 0)
                {
                    foreach (var items in toVariable)
                    { sndmail.To.Add(items); }
                }
            }
            //if ((CCMail != null) && CCMail != "")
            //{
            //    ccVariable = CCMail.Split(',');
            //    if (ccVariable.Length > 0)
            //    {
            //        foreach (var items in ccVariable)
            //        { sndmail.CC.Add(items); }
            //    }
            //}
            //if ((BCCMail != null) && BCCMail != "")
            //{
            //    bccVariable = BCCMail.Split(',');
            //    if (bccVariable.Length > 0)
            //    {
            //        foreach (var items in bccVariable)
            //        { sndmail.Bcc.Add(items); }
            //    }
            //}

            //sndmail.Subject = MailSubject;
            //sndmail.IsBodyHtml = true;
            //sndmail.Body = BodyMail;

            sndmail.From = new MailAddress(emailFrom);
            sndmail.Subject = MailSubject;
            sndmail.IsBodyHtml = true;
            sndmail.Body = BodyMail;
            SmtpServer.Port = 587;
            //  SmtpServer.UseDefaultCredentials = true;
            SmtpServer.Credentials = new System.Net.NetworkCredential(emailFrom, emailPwd);
            SmtpServer.EnableSsl = false;
            try
            {
                SmtpServer.Send(sndmail);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception caught in RetryIfBusy(): {0}",
                        ex.ToString());
                returnString = sndmail.DeliveryNotificationOptions.ToString() + ex.ToString();
            }


            //using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            //{
            //    try
            //    {
            //        conn.Open();
            //        int autoID = 0;
            //        string selSql = "select * from printsummary where MrdNo='" + mrdNo + "'";
            //        MySqlDataAdapter mydata = new MySqlDataAdapter(selSql, conn);
            //        MySqlCommandBuilder selCmd = new MySqlCommandBuilder(mydata);
            //        DataSet ds = new DataSet();
            //        DataTable dt = new DataTable();
            //        mydata.Fill(ds);
            //        dt = ds.Tables[0];
            //        if (dt.Rows.Count > 0)
            //        {
            //            if ((dt.Rows[0]["ID"].ToString() != "") && (dt.Rows[0]["ID"] != DBNull.Value))
            //            {
            //                autoID = Convert.ToInt32(dt.Rows[0]["ID"].ToString());
            //                int value = Convert.ToInt32(dt.Rows[0]["EmailCount"].ToString()) + 1;

            //                string upSql = "update printsummary set LastEmailDate='" + DateTime.Now.ToString("MM/dd/yyyy hh:mm tt") + "',EmailCount=" + value + " where ID=" + autoID + "";
            //                MySqlCommand upCmd = new MySqlCommand(upSql, conn);
            //                upCmd.CommandType = CommandType.Text;
            //                upCmd.ExecuteNonQuery();
            //            }
            //        }
            //        else
            //        {
            //            string insertSQL = "insert into printsummary (MrdNo,PatientID,LastPrintDate,PrintCount,LastEmailDate,EmailCount) values(@val1,@val2,@val3,@val4,@val5,@val6)";

            //            MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
            //            insertCmd.Parameters.AddWithValue("@val1", mrdNo);
            //            insertCmd.Parameters.AddWithValue("@val2", patientID);
            //            insertCmd.Parameters.AddWithValue("@val3", "");
            //            insertCmd.Parameters.AddWithValue("@val4", 0);
            //            insertCmd.Parameters.AddWithValue("@val5", DateTime.Now.ToString("MM/dd/yyyy hh:mm tt"));
            //            insertCmd.Parameters.AddWithValue("@val6", 1);
            //            insertCmd.CommandType = CommandType.Text;
            //            insertCmd.ExecuteNonQuery();
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        Console.Write(ex);
            //    }
            //}       
            return returnString;
        }
        #endregion

        #region EmailNotification       
        [Route("api/Account/EmailNotification")]
        [System.Web.Http.AcceptVerbs("GET", "POST")]
        [System.Web.Http.HttpPost]
        //public bool EmailNotification()
        public bool EmailNotification(string ToMail, string CCMail, string BCCMail, string MailSubject, string BodyMail, string mrdNo, string patientID, string searchName)
        {
            string physicalGrandparentPath;
            physicalGrandparentPath = @"" + System.Configuration.ConfigurationManager.AppSettings["emailDownPath"] + "";
            DirectoryInfo dinfo2 = new DirectoryInfo(physicalGrandparentPath);
            MailMessage mail = new MailMessage();
            if (searchName != "" && searchName != null)
            {
                var chksearchName = searchName.Split(',');
                foreach (var fileSearch in chksearchName)
                {
                    FileInfo[] Files2 = dinfo2.GetFiles(fileSearch + ".pdf");
                    if (Files2.Length > 0)
                    {
                        for (int iCnt = 0; iCnt <= Files2.Length - 1; iCnt++)
                        {
                            string fileName = Path.GetFileName(Files2[iCnt].Name);
                            FileStream fileStream = new FileStream(Files2[iCnt].FullName, FileMode.Open, FileAccess.Read);
                            mail.Attachments.Add(new Attachment(fileStream, fileName));
                        }
                    }
                }
            }
            //set the addresses 
            mail.From = new MailAddress("postmaster@gesain.net");
            mail.To.Add(ToMail);

            //set the content 
            mail.Subject = "This is an email";
            mail.Body = "This is from system.net.mail using C sharp with smtp authentication.";
            //send the message 
            SmtpClient smtp = new SmtpClient("m01.internetmailserver.net");

            NetworkCredential Credentials = new NetworkCredential("postmaster@gesain.net",
"Lidar@123");
            smtp.Credentials = Credentials;
            smtp.Send(mail);
            return true;
        }
        #endregion

        [Route("api/Account/deleteDownloadedFiles")]
        [HttpPost]
        public void deleteDownloadedFiles(string searchName)
        {
            var chksearchName = searchName.Split(',');
            string physicalGrandparentPath;
            //  physicalGrandparentPath = @"D:/Downloads/";
            physicalGrandparentPath = @"" + System.Configuration.ConfigurationManager.AppSettings["emailDownPath"] + "";
            //DirectoryInfo dinfo2 = new DirectoryInfo(physicalGrandparentPath);
            //foreach (var item in chksearchName)
            //{
            //    FileInfo[] Files2 = dinfo2.GetFiles("" + item + "*.pdf");
            //    if (Files2.Length > 0)
            //    {
            //        for (int iCnt = 0; iCnt <= Files2.Length - 1; iCnt++)
            //        {  
            //           File.Delete(physicalGrandparentPath + Path.GetFileName(Files2[iCnt].Name));
            //        }
            //    }
            //}
        }

        #region insertBiospyNumber
        /// <summary>
        /// Table -  BiospyNumberGenerate
        /// Inserted the  LabTestList table values.
        /// </summary>
        /// <param name=" BiospyNumberGenerate"></param>
        [Route("api/Account/insertBiospyNumber")]
        [HttpPost]
        public void insertBiospyNumber(BiospyNumberGenerate biospyNumberGenerate)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO BiospyNumberGenerate(TestCode,MrdNo,Catagory,BiospyNo) VALUES(@val1,@val2,@val3,@val4)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", biospyNumberGenerate.TestCode);
                    cmd.Parameters.AddWithValue("@val2", biospyNumberGenerate.MrdNo);
                    cmd.Parameters.AddWithValue("@val3", biospyNumberGenerate.Catagory);
                    cmd.Parameters.AddWithValue("@val4", biospyNumberGenerate.BiospyNo);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getMaxBiospy
        /// <summary>
        /// Table - multiplecomponentwithcalculation
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getMaxBiospy")]
        [HttpGet]
        public List<BiospyNumberGenerate> getMaxBiospy(string category)
        {
            List<BiospyNumberGenerate> lstgetMaxBiospy = new List<BiospyNumberGenerate>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string biospyNoMax = "";
                    string fetch = "Select Max(BiospyNo) from BiospyNumberGenerate where category='" + category + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(fetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);

                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            biospyNoMax = dr[0].ToString();

                        }
                        if (biospyNoMax.Trim() != "")
                        {
                            var tempArray = biospyNoMax.Trim().Split('/');
                            string tempId = tempArray[0].Substring(2, tempArray[1].Length);
                            int id = Convert.ToInt32(tempId);
                            id = id + 1;
                            biospyNoMax = category + tempId + DateTime.Now.Year.ToString("yy");
                            BiospyNumberGenerate biospyNumberGenerate = new BiospyNumberGenerate();
                            biospyNumberGenerate.BiospyNo = biospyNoMax;
                            lstgetMaxBiospy.Add(biospyNumberGenerate);
                        }

                    }
                    if (dt.Rows.Count == 0)
                    {

                        BiospyNumberGenerate biospyNumberGenerate = new BiospyNumberGenerate();
                        biospyNumberGenerate.BiospyNo = category + 0001 + DateTime.Now.Year.ToString("yy");
                        lstgetMaxBiospy.Add(biospyNumberGenerate);
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstgetMaxBiospy;
            }
        }
        #endregion

        #region getAllAgeCriticalByTestCode
        /// <summary>
        /// Table - agewisecricticalreference
        /// </summary>
        /// Listed all values from agewisecricticalreference
        /// <returns></returns>
        [Route("api/Account/getAllAgeCriticalByTestCode")]
        [HttpGet]
        public List<AgewiseCricticalReferences> getAllAgeCriticalByTestCode(string testCode, string dob, string age, string sex)
        {
            List<AgewiseCricticalReferences> allReferenceRanges = new List<AgewiseCricticalReferences>();
            DataTable dt = new DataTable();
            DataTable dtDefault = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";

                    strSQL = "SELECT * FROM agewisecricticalreference where StartYear <= 0  and EndYear >= 200 and TestCode = '" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydataDefault = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmdDefault = new MySqlCommandBuilder(mydataDefault);
                    DataSet dsDefault = new DataSet();
                    mydataDefault.Fill(dsDefault);
                    dtDefault = dsDefault.Tables[0];

                    if (dtDefault.Rows.Count == 0)
                    {
                        if (Convert.ToInt32(age) >= 1)
                        {
                            strSQL = "SELECT * FROM agewisecricticalreference where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "'";

                        }
                        else
                        {
                            DateTime dateOfBirth = Convert.ToDateTime(dob);
                            DateTime todayDate = DateTime.Now;
                            double daysDifferent = (todayDate - dateOfBirth).TotalDays;
                            if (daysDifferent >= 31)
                            {
                                double monthDifferent = daysDifferent / 31;
                                strSQL = "SELECT * FROM agewisecricticalreference where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "'";

                            }

                            else
                            {

                                strSQL = "SELECT * FROM agewisecricticalreference where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "'";
                            }
                        }


                        //  conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];

                        if (dt.Rows.Count == 1)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    AgewiseCricticalReferences agewiseReferenceValue = new AgewiseCricticalReferences();
                                    agewiseReferenceValue.Sex = dr["Sex"].ToString();
                                    //if (agewiseReferenceValue.Sex == "Both")
                                    //{
                                    agewiseReferenceValue.LowUpperCricticalValue = dr["LowUpperCricticalValue"].ToString();
                                    agewiseReferenceValue.DisplayText = dr["DisplayValue"].ToString();
                                    agewiseReferenceValue.StartYearCrictical = dr["StartYear"].ToString();
                                    agewiseReferenceValue.EndYearCrictical = dr["EndYear"].ToString();
                                    agewiseReferenceValue.StartMonthCrictical = dr["StartMonth"].ToString();
                                    agewiseReferenceValue.EndMonthCrictical = dr["EndMonth"].ToString();
                                    agewiseReferenceValue.StartDayCrictical = dr["StartDay"].ToString();
                                    agewiseReferenceValue.EndDayCrictical = dr["EndDay"].ToString();
                                    agewiseReferenceValue.FreeText = dr["FreeText"].ToString();

                                    if (agewiseReferenceValue.StartYearCrictical != null && agewiseReferenceValue.EndYearCrictical != null)
                                    {

                                        agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartYearCrictical + "-" + agewiseReferenceValue.EndYearCrictical;
                                    }
                                    else if (agewiseReferenceValue.StartDayCrictical == null && agewiseReferenceValue.EndDayCrictical == null)
                                    {
                                        agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonthCrictical + "-" + agewiseReferenceValue.EndMonthCrictical;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue.AgeMerge = agewiseReferenceValue.StartMonthCrictical + "-" + agewiseReferenceValue.EndDayCrictical;
                                    }

                                    allReferenceRanges.Add(agewiseReferenceValue);
                                }

                            }
                        }
                        else if (dt.Rows.Count != 1)
                        {
                            if (Convert.ToInt32(age) >= 1)
                            {
                                strSQL = "SELECT * FROM agewisecricticalreference where StartYear <= '" + Convert.ToInt32(age) + "'  and EndYear >= '" + Convert.ToInt32(age) + "' and TestCode = '" + testCode + "'and Sex='" + sex + "'";

                            }
                            else
                            {
                                DateTime dateOfBirth = Convert.ToDateTime(dob);
                                DateTime todayDate = DateTime.Now;
                                double daysDifferent = (todayDate - dateOfBirth).TotalDays;
                                if (daysDifferent >= 31)
                                {
                                    double monthDifferent = daysDifferent / 31;
                                    strSQL = "SELECT * FROM agewisecricticalreference where StartMonth <= '" + Convert.ToInt32(monthDifferent) + "'  and EndMonth >= '" + Convert.ToInt32(monthDifferent) + "' and TestCode = '" + testCode + "' and Sex='" + sex + "'";

                                }

                                else
                                {

                                    strSQL = "SELECT * FROM agewisecricticalreference where StartDay <= '" + Convert.ToInt32(daysDifferent) + "'  and EndDay >= '" + Convert.ToInt32(daysDifferent) + "' and TestCode = '" + testCode + "'and Sex='" + sex + "'";
                                }
                            }
                            DataTable dta = new DataTable();
                            MySqlDataAdapter mydataa = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmda = new MySqlCommandBuilder(mydataa);
                            DataSet dsa = new DataSet();
                            mydataa.Fill(dsa);
                            dta = dsa.Tables[0];
                            foreach (DataRow dra in dta.Rows)
                            {
                                if (dra != null)
                                {
                                    AgewiseCricticalReferences agewiseReferenceValue1 = new AgewiseCricticalReferences();

                                    agewiseReferenceValue1.LowUpperCricticalValue = dra["LowUpperCricticalValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = dra["DisplayValue"].ToString();
                                    agewiseReferenceValue1.FreeText = dra["FreeText"].ToString();
                                    agewiseReferenceValue1.StartYearCrictical = dra["StartYear"].ToString();
                                    agewiseReferenceValue1.EndYearCrictical = dra["EndYear"].ToString();
                                    agewiseReferenceValue1.StartMonthCrictical = dra["StartMonth"].ToString();
                                    agewiseReferenceValue1.EndYearCrictical = dra["EndMonth"].ToString();
                                    agewiseReferenceValue1.StartDayCrictical = dra["StartDay"].ToString();
                                    agewiseReferenceValue1.EndDayCrictical = dra["EndDay"].ToString();

                                    if (agewiseReferenceValue1.StartYearCrictical != null && agewiseReferenceValue1.EndYearCrictical != null)
                                    {

                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYearCrictical + "-" + agewiseReferenceValue1.EndYearCrictical;
                                    }
                                    else if (agewiseReferenceValue1.StartDayCrictical == null && agewiseReferenceValue1.EndDayCrictical == null)
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDayCrictical + "-" + agewiseReferenceValue1.EndDayCrictical;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonthCrictical + "-" + agewiseReferenceValue1.EndMonthCrictical;
                                    }
                                    allReferenceRanges.Clear();
                                    allReferenceRanges.Add(agewiseReferenceValue1);

                                }
                            }
                        }
                    }
                    else
                    {
                        if (dtDefault.Rows.Count == 1)
                        {
                            foreach (DataRow draa in dtDefault.Rows)
                            {
                                if (draa != null)
                                {
                                    AgewiseCricticalReferences agewiseReferenceValue1 = new AgewiseCricticalReferences();

                                    agewiseReferenceValue1.LowUpperCricticalValue = draa["LowUpperCricticalValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = draa["DisplayValue"].ToString();
                                    agewiseReferenceValue1.FreeText = draa["FreeText"].ToString();
                                    agewiseReferenceValue1.StartYearCrictical = draa["StartYear"].ToString();
                                    agewiseReferenceValue1.EndYearCrictical = draa["EndYear"].ToString();
                                    agewiseReferenceValue1.StartMonthCrictical = draa["StartMonth"].ToString();
                                    agewiseReferenceValue1.EndYearCrictical = draa["EndMonth"].ToString();
                                    agewiseReferenceValue1.StartDayCrictical = draa["StartDay"].ToString();
                                    agewiseReferenceValue1.EndDayCrictical = draa["EndDay"].ToString();

                                    if (agewiseReferenceValue1.StartYearCrictical != null && agewiseReferenceValue1.EndYearCrictical != null)
                                    {

                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYearCrictical + "-" + agewiseReferenceValue1.EndYearCrictical;
                                    }
                                    else if (agewiseReferenceValue1.StartDayCrictical == null && agewiseReferenceValue1.EndDayCrictical == null)
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDayCrictical + "-" + agewiseReferenceValue1.EndDayCrictical;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonthCrictical + "-" + agewiseReferenceValue1.EndMonthCrictical;
                                    }
                                    allReferenceRanges.Clear();
                                    allReferenceRanges.Add(agewiseReferenceValue1);

                                }
                            }
                        }
                        else
                        {
                            DataTable dtb = new DataTable();
                            strSQL = "SELECT * FROM agewisecricticalreference where StartYear <= 0  and EndYear >= 200 and TestCode = '" + testCode + "'";
                            // conn.Open();
                            MySqlDataAdapter mydatab = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmdb = new MySqlCommandBuilder(mydatab);
                            DataSet dsb = new DataSet();
                            mydatab.Fill(dsb);
                            dtb = dsb.Tables[0];
                            foreach (DataRow drb in dtb.Rows)
                            {
                                if (drb != null)
                                {
                                    AgewiseCricticalReferences agewiseReferenceValue1 = new AgewiseCricticalReferences();

                                    agewiseReferenceValue1.LowUpperCricticalValue = drb["LowUpperCricticalValue"].ToString();
                                    agewiseReferenceValue1.DisplayText = drb["DisplayValue"].ToString();
                                    agewiseReferenceValue1.FreeText = drb["FreeText"].ToString();
                                    agewiseReferenceValue1.StartYearCrictical = drb["StartYear"].ToString();
                                    agewiseReferenceValue1.EndYearCrictical = drb["EndYear"].ToString();
                                    agewiseReferenceValue1.StartMonthCrictical = drb["StartMonth"].ToString();
                                    agewiseReferenceValue1.EndYearCrictical = drb["EndMonth"].ToString();
                                    agewiseReferenceValue1.StartDayCrictical = drb["StartDay"].ToString();
                                    agewiseReferenceValue1.EndDayCrictical = drb["EndDay"].ToString();

                                    if (agewiseReferenceValue1.StartYearCrictical != null && agewiseReferenceValue1.EndYearCrictical != null)
                                    {

                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartYearCrictical + "-" + agewiseReferenceValue1.EndYearCrictical;
                                    }
                                    else if (agewiseReferenceValue1.StartDayCrictical == null && agewiseReferenceValue1.EndDayCrictical == null)
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartDayCrictical + "-" + agewiseReferenceValue1.EndDayCrictical;
                                    }
                                    else
                                    {
                                        agewiseReferenceValue1.AgeMerge = agewiseReferenceValue1.StartMonthCrictical + "-" + agewiseReferenceValue1.EndMonthCrictical;
                                    }
                                    allReferenceRanges.Clear();
                                    allReferenceRanges.Add(agewiseReferenceValue1);

                                }
                            }
                        }

                    }



                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return allReferenceRanges;
            }
        }
        #endregion



        #region getReportLabTestResultByMrdNoTestName
        /// <summary>
        /// Table - resultlabtest
        /// </summary>
        /// get pending amount values from resultlabtest table
        /// <returns></returns>
        [Route("api/Account/getReportLabTestResultByMrdNoTestName")]
        [HttpGet]
        public List<ResultLabTech> getReportLabTestResultByMrdNoTestName(string mrdNo, string testName)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and TestName ='" + testName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.Units = dr["Units"].ToString();
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            resultLabTech.ActualValue = dr["ActualValue"].ToString();
                            resultLabTech.CalculationFormula = dr["CalculationFormula"].ToString();
                            resultLabTech.CalculationInformation = dr["CalculationInformation"].ToString();
                            resultLabTech.CalculationUnits = dr["CalculationUnits"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                            resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();

                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion


        #region AddTitle

        #region getAllTitleName
        /// <summary>
        ///  Table - collectedAt
        /// </summary>
        ///
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/getAllTitleName")]
        [HttpGet]
        public List<AddTitle> getAllTitleName()
        {
            List<AddTitle> lstTitlteDetails = new List<AddTitle>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Doctor where RegID='" + regId + "' ";
                    string strSQL = "SELECT * FROM AddTitle";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            AddTitle titleDetails = new AddTitle();

                            titleDetails.TitleId = (int)dr["TitleId"];
                            titleDetails.TitleName = dr["TitleName"].ToString();
                            lstTitlteDetails.Add(titleDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstTitlteDetails;
            }
        }
        #endregion

        #region insertTitleNameDetails
        /// <summary>
        /// Table - Doctor
        /// Insert the Doctor table values.
        /// </summary>
        /// <param name="docdor"></param>
        [Route("api/Account/insertTitleNameDetails")]
        [HttpPost]
        public void insertTitleNameDetails(AddTitle title)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "INSERT INTO AddTitle(TitleName) VALUES(@val1)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);


                    cmd.Parameters.AddWithValue("@val1", title.TitleName);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #endregion

        #region deleteTitle

        [Route("api/Account/deleteTitle")]
        [HttpPost]
        public void deleteTitle(AddTitle deleteTitle)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "Delete from  AddTitle where TitleId='" + deleteTitle.TitleId + "' ";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region updatependingAmount
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/updatependingAmount")]
        [HttpPost]
        public void updatependingAmount(Invoice invoice)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE invoice SET NetAmount='" + invoice.NetAmount + "' where MrdNo='" + invoice.MrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region updateMultiCalculationforTest
        /// <summary>
        /// Table - calculationfortestdetails
        /// Update the details to calculationfortestdetails table by using TestCode and ID.
        /// </summary>
        ///<param name="calculationTestDetails"
        [Route("api/Account/updateMultiCalculationforTest")]
        [HttpPost]
        public void updateMultiCalculationforTest(calculationForTestDetails calculationTestDetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    if (calculationTestDetails.Flag == 1)
                    {
                        string strSQL = "UPDATE  calculationfortestdetails SET splcalculation='" + calculationTestDetails.splcalculation + "', " +
                                " Elements='" + calculationTestDetails.ElementName + "',ElementsCalculationType='" + calculationTestDetails.ElementsCalculationType + "'" +
                                " where testCode='" + calculationTestDetails.testCode + "' AND id='" + calculationTestDetails.id + "'";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else if (calculationTestDetails.Flag == 2)
                    {
                        string strSQL = "delete from  calculationfortestdetails where testCode='" + calculationTestDetails.testCode + "' AND id='" + calculationTestDetails.id + "'";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region updatTableRequiredImageforTest
        /// <summary>
        /// Table - imagefortest
        /// Update the details to imagefortest table by using TestCode and ID.
        /// </summary>
        ///<param name="imagetest"
        [Route("api/Account/updatTableRequiredImageforTest")]
        [HttpPost]
        public void updatTableRequiredImageforTest(ImageforTest imagetest)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE   imagefortest SET ImageName='" + imagetest.ImageName + "',ImagePath='" + imagetest.ImagePath + "'where TestCode='" + imagetest.TestCode + "' AND ImageId='" + imagetest.ImageId + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region getPragancyReferanceRangeLab
        /// <summary>
        /// Table - pregnancyreferencerange
        /// </summary>
        /// get range values from pregnancyreferencerange table
        /// <returns></returns>
        [Route("api/Account/getPragancyReferanceRangeLab")]
        [HttpGet]
        public List<PragancyReferancyRange> getPragancyReferanceRangeLab(string testCode)
        {
            List<PragancyReferancyRange> lstPragancyReferancyRange = new List<PragancyReferancyRange>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  pregnancyreferencerange where TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PragancyReferancyRange pragancyReferancyRange = new PragancyReferancyRange();

                            pragancyReferancyRange.TestCode = dr["TestCode"].ToString();
                            pragancyReferancyRange.FirstTrimester = dr["FirstTrimester"].ToString();
                            pragancyReferancyRange.SecondTrimester = dr["SecondTrimester"].ToString();
                            pragancyReferancyRange.ThirdTrimester = dr["ThirdTrimester"].ToString();

                            lstPragancyReferancyRange.Add(pragancyReferancyRange);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstPragancyReferancyRange;
            }
        }
        #endregion

        #region getAllSelfListByDate
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllSelfListByDate")]
        [HttpGet]
        public List<Invoice> getAllSelfListByDate(string Fromdate, string Todate, string SelfPaymentType)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "Select* FROM  invoice  where Action ='Self' AND InvoiceDate Between '" + Fromdate + "' AND '" + Todate + "'";

                    //string strSQL = "SELECT * FROM  Invoice  where Action LIKE'GRP-%" + groupname + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.PaymentType = dr["PaymentType"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion

        #region getAllPaymentSelfListByDate
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getAllPaymentSelfListByDate")]
        [HttpGet]
        public List<Invoice> getAllPaymentSelfListByDate(string Fromdate, string Todate, string SelfPaymentType)
        {
            List<Invoice> InvoiceDetailsList = new List<Invoice>();
            DataTable dt = new DataTable();
            // int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "Select* FROM  invoice  where PaymentType='" + SelfPaymentType + "' AND InvoiceDate Between '" + Fromdate + "' AND '" + Todate + "'";

                    //string strSQL = "SELECT * FROM  Invoice  where Action LIKE'GRP-%" + groupname + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Invoice invoice = new Invoice();
                            invoice.Token = dr["Token"].ToString();
                            invoice.MrdNo = dr["MrdNo"].ToString();
                            invoice.InvoiceNo = dr["InvoiceNo"].ToString();
                            invoice.Action = dr["Action"].ToString();
                            invoice.PaidAmount = dr["PaidAmount"].ToString();
                            invoice.PaymentType = dr["PaymentType"].ToString();
                            invoice.PatientName = dr["PatientName"].ToString();
                            invoice.Description = dr["Description"].ToString();
                            invoice.Amount = dr["Amount"].ToString();
                            invoice.NetAmount = dr["NetAmount"].ToString();
                            InvoiceDetailsList.Add(invoice);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return InvoiceDetailsList;
            }
        }
        #endregion


        #region updateTestprioritybyDepatment

        [Route("api/Account/updateTestprioritybyDepatment")]
        [HttpPost]
        public void updateTestprioritybyDepatment(ChildTestList testPriority)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (testPriority.DepartmentName != "")
                    {
                        strSQL = "UPDATE  ChildTestList SET TestPriority='" + testPriority.TestPriority + "' where DepartmentName='" + testPriority.DepartmentName + "' and TestCode='" + testPriority.TestCode + "'";
                    }
                    else
                    {
                        strSQL = "UPDATE  ChildTestList SET ProfilePriority='" + testPriority.ProfilePriority + "' where TestCode='" + testPriority.TestCode + "'";
                    }
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region getAllChildTestListWithDepartment
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllChildTestListWithDepartment")]
        [HttpGet]
        public List<ChildTestList> getAllChildTestListWithDepartment(string DepartmentName)
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT TestID,ProfileID,TestName,TestCode,DepartmentName,TestPriority FROM  ChildTestList where DepartmentName ='" + DepartmentName + "' and ActiveStatus=1 order by TestPriority";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.DepartmentName = dr["DepartmentName"].ToString();
                            if (dr["TestPriority"] != DBNull.Value)
                            {
                                childTestList.TestPriority = (double)dr["TestPriority"];
                            }
                            else
                            {
                                childTestList.TestPriority = 0;
                            }
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion

        #region getProfileDetailsProfilename
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getProfileDetailsProfilename")]
        [HttpGet]
        public List<ChildTestList> getProfileDetailsProfilename(string profileName)
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  createprofile where ProfileName ='" + profileName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.DepartmentName = dr["DepartmentName"].ToString();
                            if (dr["TestPriority"] != DBNull.Value)
                            {
                                childTestList.TestPriority = (double)dr["TestPriority"];
                            }
                            else
                            {
                                childTestList.TestPriority = 0;
                            }
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion


        #region getAllChildTestListwithMultiplecomponents
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllChildTestListwithMultiplecomponents")]
        [HttpGet]
        public List<ChildTestList> getAllChildTestListwithMultiplecomponents()
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where multiplecomponents ='yes'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion

        #region getAllElementNameByTestCode
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllElementNameByTestCode")]
        [HttpGet]
        public List<TestMultipleComponents> getAllElementNameByTestCode(string testcode)
        {
            List<TestMultipleComponents> lstmultiplecomponentstDetails = new List<TestMultipleComponents>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  testmultiplecomponents where TestCode = '" + testcode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            TestMultipleComponents multiplecomponents = new TestMultipleComponents();

                            multiplecomponents.TestMultipleComponentsID = (int)dr["TestMultipleComponentsID"];
                            multiplecomponents.ElementName = dr["ElementName"].ToString();
                            multiplecomponents.TestCode = dr["TestCode"].ToString();
                            multiplecomponents.PriorityStatus = Convert.ToInt32(dr["PriorityStatus"].ToString());
                            lstmultiplecomponentstDetails.Add(multiplecomponents);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstmultiplecomponentstDetails;
            }
        }
        #endregion


        #region updateElementPriorityStatus
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name="progressTable"></param>
        [Route("api/Account/updateElementPriorityStatus")]
        [HttpPost]
        public void updateElementPriorityStatus(TestMultipleComponents testmultiplecomponents)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (testmultiplecomponents.Flag == 1)
                    {
                        strSQL = "UPDATE  testmultiplecomponents SET PriorityStatus='" + testmultiplecomponents.PriorityStatus + "' where TestMultipleComponentsID='" + testmultiplecomponents.TestMultipleComponentsID + "'";
                    }
                    else if (testmultiplecomponents.Flag == 2)
                    {
                        strSQL = "delete from  testmultiplecomponents where TestMultipleComponentsID='" + testmultiplecomponents.TestMultipleComponentsID + "'";
                    }
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion
        #region getAllChildTestListforFreeText
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllChildTestListforFreeText")]
        [HttpGet]
        public List<ChildTestList> getAllChildTestListforFreeText()
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where ActiveStatus =1 AND NumericOrText=0";
                    //string strSQL = "SELECT * FROM  ChildTestList where ActiveStatus =1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.DepartmentName = dr["DepartmentName"].ToString();
                            childTestList.Methodology = dr["Methodology"].ToString();
                            childTestList.UnitMeasurementNumeric = dr["UnitMeasurementNumeric"].ToString();
                            childTestList.UnitMesurementFreeText = dr["UnitMesurementFreeText"].ToString();
                            childTestList.TableRequiredPrint = dr["TableRequiredPrint"].ToString();
                            childTestList.DefaultValues = dr["DefaultValues"].ToString();
                            childTestList.GenderMale = dr["GenderMale"].ToString();
                            childTestList.GenderFemale = dr["GenderFemale"].ToString();
                            childTestList.Pregnancyrefrange = dr["Pregnancyrefrange"].ToString();
                            childTestList.AdditionalFixedComments = dr["AdditionalFixedComments"].ToString();
                            childTestList.LowerCriticalValue = dr["LowerCriticalValue"].ToString();
                            childTestList.UpperCriticalValue = dr["UpperCriticalValue"].ToString();
                            childTestList.OtherCriticalReport = dr["OtherCriticalReport"].ToString();
                            childTestList.AgewiseCriticalValue = dr["AgewiseCriticalValue"].ToString();
                            childTestList.units = dr["units"].ToString();
                            childTestList.TurnAroundTime = dr["TurnAroundTime"].ToString();
                            childTestList.RequiredBiospyTestNumber = dr["RequiredBiospyTestNumber"].ToString();
                            childTestList.RequiredSamples = dr["RequiredSamples"].ToString();
                            childTestList.PatientPreparation = dr["PatientPreparation"].ToString();
                            childTestList.ExpectedResultDate = dr["ExpectedResultDate"].ToString();
                            childTestList.Amount = Convert.ToDouble(dr["Amount"]);
                            childTestList.Finaloutput = dr["Finaloutput"].ToString();
                            childTestList.TestbasedDiscount = dr["TestbasedDiscount"].ToString();
                            childTestList.Outsourced = dr["Outsourced"].ToString();
                            childTestList.CreateDate = dr["CreateDate"].ToString();
                            childTestList.cutOffTime = dr["CutoffTime"].ToString();
                            childTestList.ValidDate = dr["AmountValidDate"].ToString();
                            childTestList.DisplayName = dr["DisplayTestName"].ToString();
                            childTestList.TestInformation = dr["TestInformation"].ToString();
                            childTestList.TestSchedule = dr["TestSchedule"].ToString();
                            childTestList.NumericOrText = Convert.ToBoolean(dr["NumericOrText"]);
                            childTestList.commonParagraph = dr["commonParagraph"].ToString();
                            childTestList.UrineCulture = dr["UrineCulture"].ToString();
                            childTestList.AlternativeSample = dr["AlternativeSampleContainer"].ToString();
                            childTestList.CalculationPresent = dr["CalculationPresent"].ToString();
                            childTestList.Multiplecomponents = dr["multiplecomponents"].ToString();
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion

        #region insertFreeTextTemplate
        /// <summary>
        /// Table - freetexttemplate
        /// Insert the freetexttemplate table values.
        /// </summary>
        /// <param name="freetexttemplate"></param>
        [Route("api/Account/insertFreeTextTemplate")]
        [HttpPost]
        public void insertFreeTextTemplate(FreeTextTemplate freetexttemplate)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  freetexttemplate(TestCode,TestName,TestType,ElementName,TestMultipleComponentsID,FreeTemplateText, " +
                                    " FreeTemplateValue) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", freetexttemplate.TestCode);
                    cmd.Parameters.AddWithValue("@val2", freetexttemplate.TestName);
                    cmd.Parameters.AddWithValue("@val3", freetexttemplate.TestType);
                    cmd.Parameters.AddWithValue("@val4", freetexttemplate.ElementName);
                    cmd.Parameters.AddWithValue("@val5", freetexttemplate.TestMultipleComponentsID);
                    cmd.Parameters.AddWithValue("@val6", freetexttemplate.FreeTemplateText);
                    cmd.Parameters.AddWithValue("@val7", freetexttemplate.FreeTemplateValue);
                    cmd.CommandType = CommandType.Text;

                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region updatefreeText
        /// <summary>
        [Route("api/Account/updatefreeText")]
        [HttpPost]
        public void updatefreeText(int freeTextID, string editText, int editFlag, int deleteFlag)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (deleteFlag == 1)
                    {
                        if (editFlag == 1)
                        {
                            strSQL = "UPDATE freetexttemplate SET FreeTemplateText= '" + editText + "' where FreeTextID='" + freeTextID + "' ";
                        }
                        else if (editFlag == 2)
                        {
                            strSQL = "UPDATE freetexttemplate SET FreeTemplateValue= '" + editText + "' where FreeTextID='" + freeTextID + "' ";
                        }
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else if (deleteFlag == 2)
                    {
                        strSQL = "delete from freetexttemplate where FreeTextID='" + freeTextID + "' ";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region getAddedFreeText
        /// <summary>
        /// Table - freetexttemplate      
        /// </summary>
        /// <param name="freetexttemplate"></param>
        [Route("api/Account/getAddedFreeText")]
        [HttpGet]
        public List<FreeTextTemplate> getAddedFreeText(int codeID, string testCode, int checkFlag)
        {
            List<FreeTextTemplate> freeTextList = new List<Models.FreeTextTemplate>();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (checkFlag == 1)
                    {
                        strSQL = "select * from  freetexttemplate  where TestCode='" + testCode + "' and TestMultipleComponentsID=" + codeID + " ";
                    }
                    else if (checkFlag == 2)
                    {
                        strSQL = "select * from  freetexttemplate  where TestCode='" + testCode + "' ";
                    }

                    MySqlDataAdapter sda = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    sda.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                FreeTextTemplate freetext = new FreeTextTemplate();
                                if (dr["FreeTextID"] != DBNull.Value)
                                {
                                    freetext.FreeTextID = Convert.ToInt32(dr["FreeTextID"].ToString());
                                }
                                else
                                {
                                    freetext.FreeTextID = 0;
                                }

                                if (dr["FreeTemplateText"] != DBNull.Value)
                                {
                                    freetext.FreeTemplateText = dr["FreeTemplateText"].ToString();
                                }
                                else
                                {
                                    freetext.FreeTemplateText = "NULL";
                                }
                                if (dr["FreeTemplateValue"] != DBNull.Value)
                                {
                                    freetext.FreeTemplateValue = dr["FreeTemplateValue"].ToString();
                                }
                                else
                                {
                                    freetext.FreeTemplateValue = "NULL";
                                }

                                freeTextList.Add(freetext);
                            }
                        }
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return freeTextList;
            }
        }
        #endregion

        #region gettestmulcomponentID
        /// <summary>        
        [Route("api/Account/gettestmulcomponentID")]
        [HttpGet]
        public int gettestmulcomponentID(string code, string element)
        {
            int returnID = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    strSQL = "select * from  testmultiplecomponents  where TestCode='" + code + "' and ElementName='" + element + "' ";

                    MySqlDataAdapter sda = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    sda.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                returnID = Convert.ToInt32(dr["TestMultipleComponentsID"].ToString());
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return returnID;
            }
        }
        #endregion

        #region getTestByTestCodeForHospital
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getTestByTestCodeForHospital")]
        [HttpGet]
        public OutofHospitalTestlist getTestByTestCodeForHospital(string testCode, string hospLocation, string hosID, string displayename)
        {
            OutofHospitalTestlist hospitalDetails = new OutofHospitalTestlist();
            DataTable dt = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  outofhospitaltestlist where TestCode='" + testCode + "' and LocationCode='" + hospLocation + "' " +
                                    " and TestName='" + displayename + "' and HospitalID='" + hosID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            // childTestList.Sno = i;

                            hospitalDetails.OutOfHospitalTestListId = Convert.ToInt32(dr["OutOfHospitalTestListId"]);
                            hospitalDetails.TestName = dr["TestName"].ToString();
                            hospitalDetails.TestCode = dr["TestCode"].ToString();
                            hospitalDetails.Amount = Convert.ToDouble(dr["Amount"]);

                            // i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return hospitalDetails;
            }
        }
        #endregion

        #region getProfileByProfileCodeInHospital
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getProfileByProfileCodeInHospital")]
        [HttpGet]
        public OutofHospitalProfilelist getProfileByProfileCodeInHospital(string profileCode, int hosID)
        {
            OutofHospitalProfilelist ProfileList = new OutofHospitalProfilelist();
            DataTable dt = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  outofhospitalprofilelist where ProfileCode='" + profileCode + "' and HospitalID=" + hosID + "";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            // masterProfileList.Sno = i;
                            ProfileList.OutOfHospitalProfileListID = (int)dr["OutOfHospitalProfileListID"];
                            ProfileList.ProfileCode = dr["ProfileCode"].ToString();
                            ProfileList.ProfileName = dr["ProfileName"].ToString();
                            ProfileList.Amount = Convert.ToDouble((dr["Amount"]));

                            // i++;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return ProfileList;
            }
        }
        #endregion

        #region getmasterprofilelist
        [Route("api/Account/getmasterprofilelist")]
        public List<MasterProfileList> getmasterprofilelist()
        {
            List<MasterProfileList> lstMasterprofile = new List<MasterProfileList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT ProfileID,ProfileName,ProfileCode FROM  masterprofilelist";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            MasterProfileList masterProfile = new MasterProfileList();
                            masterProfile.ProfileID = (int)dr["ProfileID"];
                            masterProfile.ProfileName = dr["ProfileName"].ToString();
                            masterProfile.ProfileCode = dr["ProfileCode"].ToString();
                            lstMasterprofile.Add(masterProfile);


                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstMasterprofile;
            }
        }

        #endregion

        #region getPreviousTestHistory
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getPreviousTestHistory")]
        [HttpGet]
        public List<ResultLabTech> getPreviousTestHistory(string regID, string TestCode, int flag, string testName, string MrdNo)
        {
            List<ResultLabTech> lstPreviousTest = new List<ResultLabTech>();
            List<LabOrder> lstlabTest = new List<LabOrder>();
            DataTable dt = new DataTable();
            DataTable dta = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (flag == 1)
                    {
                        //strSQL = "SELECT * FROM  labtesthistory where MrdNo='" + MrdNo + "' and PatientID='" + regID + "' and TestCode='" + TestCode + "'";
                        strSQL = "SELECT * FROM  labtesthistory where PatientID='" + regID + "' and TestCode='" + TestCode + "' and MrdNo!='" + MrdNo + "' ";
                    }
                    else if (flag == 2)
                    {
                        //strSQL = "SELECT * FROM  labtesthistory where MrdNo='"+ MrdNo + "' and PatientID='" + regID + "' and TestCode='" + TestCode + "' and TestName='"+ testName + "'";
                        strSQL = "SELECT * FROM  labtesthistory where PatientID='" + regID + "' and TestCode='" + TestCode + "' and TestName='" + testName + "'and MrdNo!='" + MrdNo + "' ";

                    }
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.Result = dr["Result"].ToString();
                            if (dr["CreateDate"] == DBNull.Value)
                            {
                                resultLabTech.CreateDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
                                resultLabTech.HistoryDate = "";
                            }
                            else
                            {
                                resultLabTech.CreateDate = Convert.ToDateTime(dr["CreateDate"]);
                                resultLabTech.HistoryDate = Convert.ToDateTime(dr["CreateDate"]).ToString("dd/MM/yyyy");
                            }
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.Units = dr["units"].ToString();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            lstPreviousTest.Add(resultLabTech);
                        }
                    }


                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstPreviousTest;
            }
        }
        #endregion

        #region getParagraphHistory
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getParagraphHistory")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getParagraphHistory(string regID, string TestCode, string MrdNo)
        {
            List<BoneMarrowAspirationNew> lstPreviousTest = new List<BoneMarrowAspirationNew>();
            List<LabOrder> lstlabTest = new List<LabOrder>();
            DataTable dt = new DataTable();
            DataTable dta = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";

                    //strSQL = "SELECT * FROM  bonemarrowaspiration where PatientID='" + regID + "' and TestCode='" + TestCode + "' and MrdNo!='" + MrdNo + "' order by bonemarrowaspirationid asc";
                    strSQL = " SELECT * FROM  bonemarrowaspiration where TestCode = '" + TestCode + "' and PatientID = '" + regID + "' and MrdNo in " +
                             " (SELECT MrdNo FROM  bonemarrowaspiration where MrdNo!='" + MrdNo + "' group by CreatedDateTime,MrdNo asc ) order by MrdNo, ElementId asc";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            BoneMarrowAspirationNew resultLabTech = new BoneMarrowAspirationNew();
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.ElementName = dr["ElementName"].ToString();
                            resultLabTech.TemplateDescription = dr["TemplateDescription"].ToString();
                            resultLabTech.bonemarrowaspirationid = Convert.ToInt32(dr["bonemarrowaspirationid"].ToString());
                            resultLabTech.CreatedDateTime = dr["CreatedDateTime"].ToString();
                            lstPreviousTest.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstPreviousTest;
            }
        }
        #endregion

        #region getPreviousHistoryResult
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getPreviousHistoryResult")]
        [HttpGet]
        public string getPreviousHistoryResult(int regID, string TestCode, int flag, string testName, string MrdNo)
        {
            List<ResultLabTech> lstPreviousTest = new List<ResultLabTech>();
            List<LabOrder> lstlabTest = new List<LabOrder>();
            DataTable dt = new DataTable();
            DataTable dta = new DataTable();
            string historyValue = "0";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT Result FROM  labtesthistory where MrdNo='" + MrdNo + "' and TestCode='" + TestCode + "' ORDER BY CreateDate DESC LIMIT  1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //ResultLabTech resultLabTech = new ResultLabTech();
                            //resultLabTech.Result = dr["Result"].ToString();                            
                            //lstPreviousTest.Add(resultLabTech);
                            historyValue = dr["Result"].ToString();
                        }
                    }


                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                // return lstPreviousTest;
                return historyValue;
            }
        }
        #endregion

        #region getPreviousTestResult
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getPreviousTestResult")]
        [HttpGet]
        public List<ResultLabTech> getPreviousTestResult(int regID, string TestCode)
        {
            List<ResultLabTech> lstPreviousTest = new List<ResultLabTech>();
            List<LabOrder> lstlabTest = new List<LabOrder>();
            DataTable dt = new DataTable();
            DataTable dta = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT Result FROM  resultlabtest where RegID='" + regID + "' and TestCode='" + TestCode + "' ORDER BY CreateDate DESC LIMIT  1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.Result = dr["Result"].ToString();

                            lstPreviousTest.Add(resultLabTech);
                        }
                    }


                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstPreviousTest;
            }
        }
        #endregion


        #region getPreviousTestHistoryElement
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getPreviousTestHistoryElement")]
        [HttpGet]
        public List<ResultLabTech> getPreviousTestHistoryElement(int regID, string testCode, string elementName)
        {
            List<ResultLabTech> lstPreviousTest = new List<ResultLabTech>();
            List<LabOrder> lstlabTest = new List<LabOrder>();
            DataTable dt = new DataTable();
            DataTable dta = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  multiplecomponentwithcalculation where RegID='" + regID + "' and TestCode='" + testCode + "' and ElementName= '" + elementName + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.CreateDate = Convert.ToDateTime(dr["CreateDate"]);
                            lstPreviousTest.Add(resultLabTech);
                        }
                    }


                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstPreviousTest;
            }
        }
        #endregion


        #region getPreviousTestResultElement
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getPreviousTestResultElement")]
        [HttpGet]
        public List<ResultLabTech> getPreviousTestResultElement(int regID, string testCode, string elementName)
        {
            List<ResultLabTech> lstPreviousTest = new List<ResultLabTech>();
            List<LabOrder> lstlabTest = new List<LabOrder>();
            DataTable dt = new DataTable();
            DataTable dta = new DataTable();
            //  int i = 1;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT Result FROM  multiplecomponentwithcalculation where RegID='" + regID + "' and TestCode='" + testCode + "' and ElementName= '" + elementName + "' ORDER BY CreateDate DESC LIMIT  1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.Result = dr["Result"].ToString();

                            lstPreviousTest.Add(resultLabTech);
                        }
                    }


                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstPreviousTest;
            }
        }
        #endregion



        #region getReportDetailsFromMultipleComponent
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getReportDetailsFromMultipleComponent")]
        [HttpGet]
        public List<MultipleComponentswithCalculation> getReportDetailsFromMultipleComponent(string mrdNo)
        {
            List<MultipleComponentswithCalculation> lstResultLabTech = new List<MultipleComponentswithCalculation>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  multiplecomponentwithcalculation where MrdNo='" + mrdNo + "' order by PriorityStatus asc ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MultipleComponentswithCalculation MultipleComponents = new MultipleComponentswithCalculation();
                            MultipleComponents.MrdNo = dr["MrdNo"].ToString();
                            MultipleComponents.Result = dr["Result"].ToString();
                            MultipleComponents.TestName = dr["TestName"].ToString();
                            MultipleComponents.TestCode = dr["TestCode"].ToString();
                            MultipleComponents.NormalValues = dr["NormalValues"].ToString();
                            MultipleComponents.ElementName = dr["ElementName"].ToString();
                            MultipleComponents.Units = dr["Units"].ToString();
                            MultipleComponents.Comments = dr["Comments"].ToString();
                            MultipleComponents.ActualValue = dr["ActualValue"].ToString();
                            MultipleComponents.Notes = dr["Notes"].ToString();
                            MultipleComponents.DisplayValue = dr["DisplayValue"].ToString();
                            MultipleComponents.Calculation = dr["Calculation"].ToString();
                            MultipleComponents.Methodology = dr["Methodology"].ToString();
                            MultipleComponents.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                            MultipleComponents.PriorityStatus = (int)dr["PriorityStatus"];
                            MultipleComponents.Status = (int)dr["Status"];
                            MultipleComponents.select = false;

                            lstResultLabTech.Add(MultipleComponents);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion


        #region getReportDetailsFromMultipleComponentNew
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getReportDetailsFromMultipleComponentNew")]
        [HttpGet]
        public List<MultipleComponentswithCalculation> getReportDetailsFromMultipleComponentNew(string mrdNo)
        {
            List<MultipleComponentswithCalculation> lstResultLabTech = new List<MultipleComponentswithCalculation>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    //string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and ProfilePriority=1 and saveFlag=1 and confirmFlag=1";
                    string strSQL = "select distinct * from viewlistdetails vd inner join " +
                                    "  resultlabtest rt on vd.MrdNo = rt.MrdNo where vd.MrdNo='" + mrdNo + "' and vd.TestName = rt.TestName and rt.confirmFlag = 1 " +
                                    " and rt.ProfilePriority = 1 and rt.saveFlag = 1 " +
                                    " and rt.Testcode in(SELECT distinct TestCode from  testmultiplecomponents tm where rt.TestCode = tm.TestCode) " +
                                    " Order by vd.ReportPriority, vd.ProfilePriority, vd.SubProfilePriority, vd.TestPriority,vd.ID; ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MultipleComponentswithCalculation MultipleComponents = new MultipleComponentswithCalculation();
                            MultipleComponents.ComponentId = Convert.ToInt32(dr["ResultLabId"]);
                            MultipleComponents.MrdNo = dr["MrdNo"].ToString();
                            MultipleComponents.ElementName = dr["TestName"].ToString();
                            MultipleComponents.ProfileName = dr["ProfileName"].ToString();
                            MultipleComponents.Result = dr["Result"].ToString();
                            MultipleComponents.TestCode = dr["TestCode"].ToString();
                            MultipleComponents.NormalValues = dr["NormalValuesFiled"].ToString();
                            MultipleComponents.Units = dr["Units"].ToString();
                            MultipleComponents.Comments = dr["Comment1"].ToString();
                            MultipleComponents.ActualValue = dr["ActualValue"].ToString();
                            MultipleComponents.DisplayValue = dr["DisplayValueText"].ToString();

                            //MultipleComponents.Notes = dr["Notes"].ToString();
                            //MultipleComponents.DisplayValue = dr["DisplayValue"].ToString();
                            //MultipleComponents.Calculation = dr["Calculation"].ToString();
                            //MultipleComponents.Methodology = dr["Methodology"].ToString();
                            //MultipleComponents.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                            //MultipleComponents.PriorityStatus = (int)dr["PriorityStatus"];
                            MultipleComponents.Status = (int)dr["Status"];
                            MultipleComponents.select = false;

                            lstResultLabTech.Add(MultipleComponents);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getReportDetailsFromMultipleTestcodeMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getReportDetailsFromMultipleTestcodeMrdNo")]
        [HttpGet]
        public List<MultipleComponentswithCalculation> getReportDetailsFromMultipleTestcodeMrdNo(string mrdNo, string testCode)
        {
            List<MultipleComponentswithCalculation> lstResultLabTech = new List<MultipleComponentswithCalculation>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  multiplecomponentwithcalculation where MrdNo='" + mrdNo + "' and TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            MultipleComponentswithCalculation MultipleComponents = new MultipleComponentswithCalculation();
                            MultipleComponents.MrdNo = dr["MrdNo"].ToString();
                            MultipleComponents.Result = dr["Result"].ToString();
                            MultipleComponents.TestName = dr["TestName"].ToString();
                            MultipleComponents.TestCode = dr["TestCode"].ToString();
                            MultipleComponents.NormalValues = dr["NormalValues"].ToString();
                            MultipleComponents.ElementName = dr["ElementName"].ToString();
                            MultipleComponents.Units = dr["Units"].ToString();
                            MultipleComponents.Comments = dr["Comments"].ToString();
                            MultipleComponents.ActualValue = dr["ActualValue"].ToString();
                            MultipleComponents.Notes = dr["Notes"].ToString();
                            MultipleComponents.DisplayValue = dr["DisplayValue"].ToString();
                            MultipleComponents.Calculation = dr["Calculation"].ToString();
                            MultipleComponents.Methodology = dr["Methodology"].ToString();
                            lstResultLabTech.Add(MultipleComponents);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion


        #region getCriticalValueFronAgeWiseReference
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getCriticalValueFronAgeWiseReference")]
        [HttpGet]
        public List<AgewiseCricticalReferences> getCriticalValueFronAgeWiseReference(string testcode)
        {
            List<AgewiseCricticalReferences> lstResultLabTech = new List<AgewiseCricticalReferences>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  agewisecricticalreference where TestCode='" + testcode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            AgewiseCricticalReferences resultLabTech = new AgewiseCricticalReferences();
                            resultLabTech.TestName = dr["TestName"].ToString();
                            resultLabTech.LowUpperCricticalValue = dr["LowUpperCricticalValue"].ToString();
                            lstResultLabTech.Add(resultLabTech);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion



        #region getTestCodeandMultiComponentbyTestName
        /// <summary>
        /// Table - childtestlist
        /// </summary>
        /// get test code from childtestlist table by Test Name
        /// <returns></returns>
        [Route("api/Account/getTestCodeandMultiComponentbyTestName")]
        [HttpGet]
        public ChildTestList getTestCodeandMultiComponentbyTestName(string testName)
        {
            ChildTestList childTestList = new ChildTestList();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    //string strSQL = "SELECT TestName,TestCode,multiplecomponents FROM childtestlist where TestName = '" + testName + "' AND ActiveStatus=1 AND commonParagraph = NO AND UrineCulture = NO";
                    string strSQL = "SELECT TestName,TestCode,multiplecomponents FROM childtestlist where TestName = '" + testName + "' AND ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {

                        if (dr != null)
                        {
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            childTestList.Multiplecomponents = dr["multiplecomponents"].ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return childTestList;
            }
        }
        #endregion


        #region updateLabTestList
        /// <summary>
        /// Table - labTestList
        /// Update status to labTestList tables
        /// </summary>
        /// <param name="labTestList"></param>
        [Route("api/Account/updateLabTestList")]
        [HttpPost]
        public void updateLabTestList(LabTestList labTestList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE labtestlist SET IndividualStatus= '" + labTestList.IndividualStatus + "' where MrdNo='" + labTestList.MrdNo + "' && TestCode='" + labTestList.TestCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();


                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region updatelabprofilelist
        /// <summary>
        /// Table - labprofilelist
        /// Update status to labprofilelist tables
        /// </summary>
        /// <param name="labprofilelist"></param>
        [Route("api/Account/updatelabprofilelist")]
        [HttpPost]
        public void updatelabprofilelist(LabProfileList labProfileList)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE labprofilelist SET IndividualStatus= '" + labProfileList.IndividualStatus + "' where MrdNo='" + labProfileList.MrdNo + "' && ProfileID='" + labProfileList.ProfileID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();


                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region updateTestNameResult
        /// <summary>
        /// Table - labprofilelist
        /// Update status to labprofilelist tables
        /// </summary>
        /// <param name="labprofilelist"></param>
        [Route("api/Account/updateTestNameResult")]
        [HttpPost]
        public void updateTestNameResult(ResultLabTech resultLabTech)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    // MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    //cmd.CommandType = CommandType.Text;
                    //cmd.ExecuteNonQuery();
                    string strSQL1 = "UPDATE resultlabtest SET Result = @Result, Comment1 = @Comment Where MrdNo='" + resultLabTech.MrdNo + "' && TestName ='" + resultLabTech.TestName + "'";
                    conn.Open();
                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                    cmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                    cmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                    cmd1.CommandType = CommandType.Text;
                    cmd1.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region getGroupHositalDistinct
        /// <summary>
        ///
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getGroupHositalDistinct")]
        [HttpGet]
        public List<Group> getGroupHositalDistinct()
        {
            List<Group> OuthospitalDetailsList = new List<Group>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT DISTINCT HospitalName FROM  Group";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Group outofhospital = new Group();

                            outofhospital.HospitalName = dr["HospitalName"].ToString();

                            if (outofhospital.HospitalName != null && outofhospital.HospitalName != "")
                            {
                                OuthospitalDetailsList.Add(outofhospital);
                            }





                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return OuthospitalDetailsList;
            }
        }
        #endregion



        #region updateLabOrderStatus
        /// <summary>
        /// Table - Invoice
        /// Inserted the invoiceview table values. The reg ID reffered from patientregistration table.
        /// </summary>
        /// <param name="LaborderStatus"></param>
        [Route("api/Account/updateLabOrderStatus")]
        [HttpPost]
        public void updateLabOrderStatus(string mrdNo, string labOrderStatus)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE LaborderStatus SET LabStatus='" + labOrderStatus + "' where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion



        #region updateSampleStatus
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/updateSampleStatus")]
        [HttpPost]
        public LaborderStatus updateSampleStatus(string mrdNo)
        {
            LaborderStatus labOrderStatus = new LaborderStatus();
            DataTable dt = new DataTable();
            DataTable dt2 = new DataTable();


            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * from  samplecollecter where MrdNo='" + mrdNo + "' and collected = '1' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL1 = "UPDATE LaborderStatus SET LabStatus='2',SampleStatus='1' where MrdNo='" + mrdNo + "'";
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                    //string strSQL2 = "SELECT * from  samplecollecter where MrdNo='" + mrdNo + "' and SampleStatus == '1' ";

                    //MySqlDataAdapter mydata2 = new MySqlDataAdapter(strSQL2, conn);
                    //MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata);
                    //DataSet ds2 = new DataSet();
                    //mydata.Fill(ds2);
                    //dt2 = ds2.Tables[0];
                    //if (dt2.Rows.Count != 0)
                    //{
                    //    string strSQL1 = "UPDATE LaborderStatus SET SampleStatus='1' where MrdNo='" + mrdNo + "'"; MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                    //    cmd1.CommandType = CommandType.Text;
                    //    cmd1.ExecuteNonQuery();
                    //}

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return labOrderStatus;
            }
        }
        #endregion


        #region insertLocationDetails
        /// <summary>
        /// Table - Location
        /// </summary>
        /// Inserted the Location details
        /// <param name="location"></param>
        [Route("api/Account/insertLocationDetails")]
        [HttpPost]
        public void insertLocationDetails(Location location)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    int locationCodeMax = 0;


                    string locationCode = "";
                    string fetch = "Select Max(MaxID) from Location";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(fetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        string maxVal = dr[0].ToString();

                        if (maxVal != null && maxVal != "")
                        {
                            locationCodeMax = Int32.Parse(maxVal);
                            locationCodeMax = locationCodeMax + 1;
                            locationCode = location.LocationName.Substring(0, 3).ToUpper() + String.Format("{0:000}", locationCodeMax);
                        }
                        else
                        {
                            locationCodeMax = 1;
                            locationCode = location.LocationName.Substring(0, 3).ToUpper() + String.Format("{0:000}", locationCodeMax);
                        }


                        string strSQL = "INSERT INTO  Location(LocationName,LocationCode,MaxID) VALUES(@val1,@val2,@val3)";
                        //  conn.Open();
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", location.LocationName);
                        cmd.Parameters.AddWithValue("@val2", locationCode);
                        cmd.Parameters.AddWithValue("@val3", locationCodeMax);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }

                    //     string locationCode = location.LocationName.Substring(0,2);


                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region updateLocationDetails
        /// <summary>
        /// Table - Location
        /// </summary>
        /// Inserted the Location details
        /// <param name="location"></param>
        [Route("api/Account/updateLocationDetails")]
        [HttpPost]
        public void updateLocationDetails(Location location)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (location.UpdFlag == 1)
                    {
                        strSQL = "UPDATE  Location SET LocationName='" + location.LocationName + "' where LocationId='" + location.LocationId + "'";
                    }
                    else if (location.UpdFlag == 2)
                    {
                        strSQL = "delete from Location where LocationId='" + location.LocationId + "'";
                    }
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region getLocationNameSearchDetails
        /// <summary>
        /// getLocationNameSearchDetails
        /// </summary>
        /// To get all records from ChildTestList table.
        /// <param name="locationName"></param>
        /// <returns></returns>

        [Route("api/Account/getLocationNameSearchDetails")]
        [HttpGet]
        public int getLocationNameSearchDetails(string locationName)
        {
            int locationCount = 0;

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  Location Where LocationName= '" + locationName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    locationCount = dt.Rows.Count;
                }

                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return locationCount;
            }
        }
        #endregion


        #region getLocationList
        /// <summary>
        /// getLocationList
        /// </summary>
        /// To get all records from Location table.
        /// <returns></returns>

        [Route("api/Account/getLocationList")]
        [HttpGet]
        public List<Location> getLocationList()
        {
            List<Location> lstLocation = new List<Location>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  Location";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            Location location = new Location();
                            location.LocationId = Convert.ToInt32(dr["LocationId"].ToString());
                            location.LocationName = dr["LocationName"].ToString();
                            location.LocationCode = dr["LocationCode"].ToString();

                            lstLocation.Add(location);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLocation;
            }
        }
        #endregion

        #region getLocationCodeSearchDetails
        /// <summary>
        /// getLocationNameSearchDetails
        /// </summary>
        /// To get all records from ChildTestList table.
        /// <param name="locationName"></param>
        /// <returns></returns>

        [Route("api/Account/getLocationCodeSearchDetails")]
        [HttpGet]
        public int getLocationCodeSearchDetails(string locationCode)
        {
            int locationCount = 0;

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  Location Where LocationCode= '" + locationCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    locationCount = dt.Rows.Count;
                }

                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return locationCount;
            }
        }
        #endregion

        #region insertCorporate
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertCorporate")]
        [HttpPost]
        public void insertCorporate(corporate corporatedetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  corporate(Corporatename) VALUES(@val1)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", corporatedetails.Corporatename);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region getcorporatename
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        /// <returns></returns>

        [Route("api/Account/getcorporatename")]
        [HttpGet]

        public List<corporate> getcorporatename()
        {
            List<corporate> lstCorporate = new List<corporate>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  corporate";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            corporate corporate = new corporate();
                            corporate.Corporatename = dr["Corporatename"].ToString();


                            lstCorporate.Add(corporate);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCorporate;
            }
        }
        #endregion


        #region getallDisplayCount
        /// <summary>
        /// Table -
        /// </summary>
        ///
        /// <returns></returns>
        [Route("api/Account/getallDisplayCount")]
        [HttpGet]
        public int getallDisplayCount(string displayename)
        {
            CountApprover displaydetails = new CountApprover();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT Count(*) FROM  displaytest where DisplayName = '" + displayename + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            displaydetails.Count = Convert.ToInt32(dr[0]);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return displaydetails.Count;
            }
        }
        #endregion


        #region getAllDisplayTestDetailswithparameter
        /// <summary>
        /// Table - displaytest
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getAllDisplayTestDetailswithparameter")]
        [HttpGet]
        public List<DisplayTest> getAllDisplayTestDetailswithparameter(string testCode, string displayename, string hospLocation, int hosID)
        {
            List<DisplayTest> lstDisplayTest = new List<DisplayTest>();
            DataTable dt = new DataTable();
            DataTable hosdt = new DataTable();
            var Amount = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  displaytest where TestCode ='" + testCode + "' AND DisplayName ='" + displayename + "' ";
                    string hosSql = "SELECT * FROM outofhospitaltestlist where LocationCode ='" + hospLocation + "' and HospitalID=" + hosID + " and TestCode ='" + testCode + "'" +
                                    " and TestName = '" + displayename + "' ";
                    conn.Open();

                    MySqlDataAdapter hosdata = new MySqlDataAdapter(hosSql, conn);
                    MySqlCommandBuilder hoscmd = new MySqlCommandBuilder(hosdata);
                    DataSet hosds = new DataSet();
                    hosdata.Fill(hosds);
                    hosdt = hosds.Tables[0];
                    foreach (DataRow dr in hosdt.Rows)
                    {
                        if (dr != null)
                        {
                            Amount = Convert.ToInt32(dr["Amount"].ToString());
                        }
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            DisplayTest displayTest = new DisplayTest();
                            displayTest.DisplayTestID = (int)dr["DisplayTestID"];
                            displayTest.TestName = dr["TestName"].ToString();
                            displayTest.TestCode = dr["TestCode"].ToString();
                            displayTest.DisplayName = dr["DisplayName"].ToString();
                            if (Amount > 0)
                            {
                                displayTest.Amount = Amount;
                            }
                            else
                            {
                                displayTest.Amount = Convert.ToDouble(dr["Amount"]);
                            }
                            displayTest.ExpiryDate = dr["ExpiryDate"].ToString();
                            lstDisplayTest.Add(displayTest);
                        }
                    }
                }

                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDisplayTest;
            }
        }
        #endregion

        #region getDisplayTestDetailsForInsu
        /// <summary>
        /// Table - displaytest
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getDisplayTestDetailsForInsu")]
        [HttpGet]
        public List<DisplayTest> getDisplayTestDetailsForInsu(string testCode, string displayename, string hospLocation, string insName)
        {
            List<DisplayTest> lstDisplayTest = new List<DisplayTest>();
            DataTable dt = new DataTable();
            DataTable hosdt = new DataTable();
            var Amount = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  displaytest where TestCode ='" + testCode + "' AND DisplayName ='" + displayename + "' ";
                    string hosSql = "SELECT * FROM insurancetestlist where InsuranceName='" + insName + "' and TestCode ='" + testCode + "'" +
                                    " and TestName = '" + displayename + "' ";
                    conn.Open();

                    MySqlDataAdapter hosdata = new MySqlDataAdapter(hosSql, conn);
                    MySqlCommandBuilder hoscmd = new MySqlCommandBuilder(hosdata);
                    DataSet hosds = new DataSet();
                    hosdata.Fill(hosds);
                    hosdt = hosds.Tables[0];
                    foreach (DataRow dr in hosdt.Rows)
                    {
                        if (dr != null)
                        {
                            Amount = Convert.ToInt32(dr["Amount"].ToString());
                        }
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            DisplayTest displayTest = new DisplayTest();
                            displayTest.DisplayTestID = (int)dr["DisplayTestID"];
                            displayTest.TestName = dr["TestName"].ToString();
                            displayTest.TestCode = dr["TestCode"].ToString();
                            displayTest.DisplayName = dr["DisplayName"].ToString();
                            if (Amount > 0)
                            {
                                displayTest.Amount = Amount;
                            }
                            else
                            {
                                displayTest.Amount = Convert.ToDouble(dr["Amount"]);
                            }
                            displayTest.ExpiryDate = dr["ExpiryDate"].ToString();
                            lstDisplayTest.Add(displayTest);
                        }
                    }
                }

                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDisplayTest;
            }
        }
        #endregion

        #region getDuplicationTitle
        /// <summary>
        /// Table - addtitle
        /// </summary>
        /// Listed all values from addtitle table
        /// <returns></returns>
        [Route("api/Account/getDuplicationTitle")]
        [HttpGet]
        public int getDuplicationTitle(string title)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  addtitle where TitleName='" + title + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion

        #region getDuplicationElement
        /// <summary>
        /// Table - elements
        /// </summary>
        /// Listed all values from elements table
        /// <returns></returns>
        [Route("api/Account/getDuplicationElement")]
        [HttpGet]
        public int getDuplicationElement(string testCode, string elementName)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  elements where TestCode='" + testCode + "' and ElementName='" + elementName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region getDuplicationTemplate
        /// <summary>
        /// Table - elements
        /// </summary>
        /// Listed all values from elements table
        /// <returns></returns>
        [Route("api/Account/getDuplicationTemplate")]
        [HttpGet]
        public int getDuplicationTemplate(string testCode, string elementName, string templateName)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  templates where TestCode='" + testCode + "' and ElementName='" + elementName + "' and TemplateName ='" + templateName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion



        #region getDuplicationDepartment
        /// <summary>
        /// Table - department
        /// </summary>
        /// Listed all values from department table
        /// <returns></returns>
        [Route("api/Account/getDuplicationDepartment")]
        [HttpGet]
        public int getDuplicationDepartment(string department)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  department where DepartmentName='" + department + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region getDuplicationDisplayName
        /// <summary>
        /// Table - displaytest
        /// </summary>
        /// Listed all values from displaytest table
        /// <returns></returns>
        [Route("api/Account/getDuplicationDisplayName")]
        [HttpGet]
        public int getDuplicationDisplayName(string displayName, string testCode)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  displaytest where DisplayName='" + displayName + "' and TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region getDuplicationCorporate
        /// <summary>
        /// Table - corporate
        /// </summary>
        /// Listed all values from corporate table
        /// <returns></returns>
        [Route("api/Account/getDuplicationCorporate")]
        [HttpGet]
        public int getDuplicationCorporate(string corporateName)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  corporate where corporatename='" + corporateName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion

        #region getProfileStatusCount
        /// <summary>
        /// Table - LabProfileList
        /// </summary>
        /// Listed all values from LabProfileList table
        /// <returns></returns>
        [Route("api/Account/getProfileStatusCount")]
        [HttpGet]
        public int getProfileStatusCount(string mrdNo)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  LabProfileList where MrdNo='" + mrdNo + "' and IndividualStatus !=3 and IndividualStatus != 4 ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion


        #region getTestStatusCount
        /// <summary>
        /// Table - addtitle
        /// </summary>
        /// Listed all values from addtitle table
        /// <returns></returns>
        [Route("api/Account/getTestStatusCount")]
        [HttpGet]
        public int getTestStatusCount(string mrdNo)
        {
            int count = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labtestlist where MrdNo='" + mrdNo + "' and IndividualStatus !=3 and IndividualStatus != 4 ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    count = dt.Rows.Count;

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return count;
            }
        }
        #endregion

        #region updateLabSampleStatusApproved
        /// <summary>
        /// Table - Invoice
        /// Inserted the invoiceview table values. The reg ID reffered from patientregistration table.
        /// </summary>
        /// <param name="LaborderStatus"></param>
        [Route("api/Account/updateLabSampleStatusApproved")]
        [HttpPost]
        public void updateLabSampleStatusApproved(string mrdNo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE LaborderStatus SET LabStatus='4' where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion

        #region deleteCalculationByTestCode
        /// <summary>
        /// Table - calculationfortestdetails
        /// Delete calculationfortestdetails.
        /// </summary>
        /// <param name="CalculationForTest"></param>
        [Route("api/Account/deleteCalculationByTestCode")]
        [HttpPost]
        public string deleteCalculationByTestCode(string testCode)
        {
            string result = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "delete from calculationfortestdetails where TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                    result = "Success";
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                    result = "Fail";
                }
            }
            return result;
        }

        #endregion


        #region updateResultApproveStatus
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/updateResultApproveStatus")]
        [HttpPost]
        public void updateResultApproveStatus(ResultLabTech resultLabTech)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' && ResultLabId ='" + resultLabTech.resultlabtestID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        if (resultLabTech.AmendType == 2)
                        {
                            string strSQL1 = "UPDATE resultlabtest SET Status = @Status,AmendComment=@amendComment,AmmendDate=@amendDate,saveFlag=0,confirmFlag=0 " +
                                " Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' && ResultLabId ='" + resultLabTech.resultlabtestID + "'";
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.Parameters.AddWithValue("@Status", resultLabTech.Status);
                            cmd1.Parameters.AddWithValue("@amendComment", resultLabTech.AmmendComment);
                            cmd1.Parameters.AddWithValue("@amendDate", resultLabTech.AmmendDate);
                            cmd1.CommandType = CommandType.Text;
                            cmd1.ExecuteNonQuery();
                        }
                        else
                        {
                            string strSQL1 = "UPDATE resultlabtest SET Status = @Status,AmendComment='',AmmendDate='',ApprovedDate='" + DateTime.Now + "' Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' && ResultLabId ='" + resultLabTech.resultlabtestID + "'";
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.Parameters.AddWithValue("@Status", resultLabTech.Status);
                            cmd1.CommandType = CommandType.Text;
                            cmd1.ExecuteNonQuery();


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }

        #endregion


        #region updateTestApproveStatus
        /// <summary>
        /// Table - labprofilelist
        /// Update status to labprofilelist tables
        /// </summary>
        /// <param name="labprofilelist"></param>
        [Route("api/Account/updateTestApproveStatus")]
        [HttpPost]
        public void updateTestApproveStatus(ResultLabTech resultLabTech)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL1 = "UPDATE resultlabtest SET Status = @Status,ApprovedDate='" + DateTime.Now + "' Where MrdNo='" + resultLabTech.MrdNo + "' && TestName ='" + resultLabTech.TestName + "' && ResultLabId ='" + resultLabTech.resultlabtestID + "'";
                    conn.Open();
                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                    cmd1.Parameters.AddWithValue("@Status", resultLabTech.Status);
                    cmd1.CommandType = CommandType.Text;
                    cmd1.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion


        #region updateMultiApproveStatus
        /// <summary>
        /// table - multiplecomponentwithcalculation
        /// </summary>
        /// <param name="multiplecomponentwithcalculation"></param>
        [Route("api/Account/updateMultiApproveStatus")]
        [HttpPost]
        public void updateMultiApproveStatus(MultipleComponentswithCalculation multipleComponentsCalculation)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + multipleComponentsCalculation.MrdNo + "' && ResultLabId ='" + multipleComponentsCalculation.ComponentId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string strSQL1 = "UPDATE  resultlabtest SET Status=@Status Where MrdNo='" + multipleComponentsCalculation.MrdNo + "' AND ResultLabId ='" + multipleComponentsCalculation.ComponentId + "'";
                        //  conn.Open();
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@Status", multipleComponentsCalculation.Status); cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region updateCommonStautus
        /// <summary>
        /// Table - insert BoneMarrowAspiration
        /// </summary>
        /// <param name="boneMarrowAspirationNew"></param>
        [Route("api/Account/updateCommonStautus")]
        [HttpPost]
        public void updateCommonStautus(BoneMarrowAspirationNew boneMarrowAspirationNew)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and bonemarrowaspirationid='" + boneMarrowAspirationNew.bonemarrowaspirationid + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            string strSQL1 = "UPDATE bonemarrowaspiration SET Status='" + boneMarrowAspirationNew.Status + "' where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and bonemarrowaspirationid='" + boneMarrowAspirationNew.bonemarrowaspirationid + "' ";
                            // conn.Open();
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.ExecuteNonQuery();
                        }
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getCalculationResultold
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getCalculationResultold")]
        [HttpGet]
        public List<ResultLabTech> getCalculationResultold(string mrdNo, string testCode, string PatientID, string getCalculationResult, string calculationType)
        {

            string informationValue = "";
            string formulaValues = "";
            string testCodesCalculationPart = "";
            string calcType = "";
            string[] tests;
            var ResultNew = "0";
            var diffCalculationFormula = "";
            char character = ' ';

            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            DataTable dt1 = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  calculationfortestdetails where TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);

                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            if (dr["CalculationType"].ToString() == "Used by other Tests")
                            {
                                informationValue = dr["FormulaLabel"].ToString();
                                formulaValues = dr["splcalculation"].ToString();
                                testCodesCalculationPart = dr["TestCodesCalculationPart"].ToString();
                                tests = testCodesCalculationPart.Split(',');
                                foreach (var test in tests)
                                {


                                    string strSQL1 = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' AND TestCode='" + test + "' order by ProfilePriority asc";
                                    //   conn.Open();
                                    MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata1);
                                    DataSet ds1 = new DataSet();
                                    mydata1.Fill(ds1);
                                    dt1 = ds1.Tables[0];
                                    foreach (DataRow dr1 in dt1.Rows)
                                    {
                                        if (dr1 != null)
                                        {


                                            string Result = dr1["Result"].ToString();

                                            formulaValues = formulaValues.Replace(test, Result);
                                            calcType = dr["CalculationType"].ToString();
                                        }
                                    }

                                }
                            }
                            else if (dr["CalculationType"].ToString() == "Normal")
                            {
                                informationValue = dr["FormulaLabel"].ToString();
                                formulaValues = dr["splcalculation"].ToString();
                                testCodesCalculationPart = dr["TestCodesCalculationPart"].ToString();



                                string strSQL1 = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' AND TestCode='" + testCode + "' order by ProfilePriority asc";
                                //   conn.Open();
                                MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                                MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata1);
                                DataSet ds1 = new DataSet();
                                mydata1.Fill(ds1);
                                dt1 = ds1.Tables[0];
                                foreach (DataRow dr1 in dt1.Rows)
                                {
                                    if (dr1 != null)
                                    {
                                        string Result = dr1["Result"].ToString();
                                        formulaValues = formulaValues.Replace("a", Result);
                                        calcType = dr["CalculationType"].ToString();
                                        //  subTest =
                                    }
                                }
                            }
                            else
                            {
                                if (dr["CalculationType"] != DBNull.Value)
                                {
                                    calcType = dr["CalculationType"].ToString();
                                }
                                else
                                {
                                    calcType = "diffCount";
                                }
                                formulaValues = dr["splcalculation"].ToString();

                                string[] splcalculationnew = formulaValues.Split('+');
                                string testNamesMulti = "" + string.Join("','", splcalculationnew) + "";
                                for (int i = 0; i < splcalculationnew.Length; i++)
                                {
                                    if ((splcalculationnew[i].ToString()) != " ")
                                    {

                                        string sqlNames = "select * from  resultlabtest t2 where t2.MrdNo = '" + mrdNo + "' and TestName = '" + splcalculationnew[i] + "'";
                                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                        DataSet resultds = new DataSet();
                                        DataTable resultdt = new DataTable();
                                        resultdata.Fill(resultds);
                                        resultdt = resultds.Tables[0];
                                        if (resultdt.Rows.Count > 0)
                                        {
                                            if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                                            {
                                                ResultNew = "0.0";
                                                if (diffCalculationFormula == "")
                                                {
                                                    diffCalculationFormula = formulaValues.Replace(splcalculationnew[i].ToString(), ResultNew);
                                                }
                                                else
                                                {
                                                    diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                                }
                                            }
                                            else
                                            {
                                                ResultNew = resultdt.Rows[0]["Result"].ToString();
                                                if (diffCalculationFormula == "")
                                                {
                                                    diffCalculationFormula = formulaValues.Replace(splcalculationnew[i].ToString(), ResultNew);
                                                }
                                                else
                                                {
                                                    diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ResultNew = "0";
                                            diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                        }

                                    }
                                }
                                if (diffCalculationFormula != " ")
                                {
                                    DataTable dtnew = new DataTable();
                                    dtnew.Columns.Add("myExpression", string.Empty.GetType(), diffCalculationFormula);
                                    DataRow row = dtnew.NewRow();
                                    dtnew.Rows.Add(row);
                                    //ResultNew = double.Parse((string)row["myExpression"]);
                                    formulaValues = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();

                                    string updTotal = "update  resultlabtest set Result= " + formulaValues + ",CreateDate=NOW(),FinalResult='' where MrdNo = '" + mrdNo + "' and TestName = 'Total %' and PatientID= '" + PatientID + "'";
                                    MySqlCommand updCmd = new MySqlCommand(updTotal, conn);
                                    updCmd.ExecuteNonQuery();

                                    string updHist = "update  labtesthistory set Result= " + formulaValues + ",CreateDate=NOW() where MrdNo = '" + mrdNo + "' and TestName = 'Total %' and PatientID= '" + PatientID + "'";
                                    MySqlCommand histCmd = new MySqlCommand(updHist, conn);
                                    histCmd.ExecuteNonQuery();
                                }
                            }
                        }
                        ResultLabTech resultLabTech = new ResultLabTech();

                        resultLabTech.Result = formulaValues;
                        resultLabTech.SpecialComments = calcType;
                        resultLabTech.CalculationInformation = informationValue;
                        lstResultLabTech.Add(resultLabTech);
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getsplcalculation
        /// <summary>    
        /// <returns></returns>
        [Route("api/Account/getsplcalculation")]
        [HttpGet]
        public List<ResultLabTech> getsplcalculation(string mrdNo, string testCode, string elementName, int TestType)
        {
            string strSQL = "";
            string calcuSQL = "";
            string resStr = "";
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    if ((elementName != "") && (elementName != null))
                    {
                        strSQL = "SELECT distinct * FROM  calculationfortestdetails where TestCode='" + testCode + "' " +
                                  " and Elements='" + elementName + "' ";

                        resStr = "SELECT * FROM  resultlabtest res where res.MrdNo = '" + mrdNo + "' and res.TestCode='" + testCode + "' " +
                                                " and res.TestName = '" + elementName + "'";
                    }
                    else
                    {
                        strSQL = "SELECT distinct * FROM  calculationfortestdetails where TestCode='" + testCode + "' and splcalculation is not null ";

                        resStr = "SELECT * FROM  resultlabtest res where res.MrdNo = '" + mrdNo + "' and res.TestCode='" + testCode + "'";
                    }
                    conn.Open();

                    //MySqlDataAdapter calData = new MySqlDataAdapter(calcuSQL, conn);
                    //MySqlCommandBuilder calCmd = new MySqlCommandBuilder(calData);
                    //DataSet calDs = new DataSet();
                    //DataTable calDt = new DataTable();
                    //calData.Fill(calDs);
                    //calDt = calDs.Tables[0];

                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                ResultLabTech resultLabTech = new ResultLabTech();
                                if ((dr["Elements"] != DBNull.Value) && (elementName != ""))
                                {
                                    resultLabTech.TestName = dr["Elements"].ToString();
                                }
                                resultLabTech.CalculationFormula = dr["splcalculation"].ToString();

                                //resStr = "SELECT * FROM  resultlabtest res where res.MrdNo = '"+ mrdNo + "' and res.TestCode='" + testCode + "' " +
                                //                " and res.TestName = '" + elementName + "'";

                                MySqlDataAdapter resData = new MySqlDataAdapter(resStr, conn);
                                MySqlCommandBuilder resCmd = new MySqlCommandBuilder(resData);
                                DataSet resDs = new DataSet();
                                DataTable resDt = new DataTable();
                                resData.Fill(resDs);
                                resDt = resDs.Tables[0];
                                if (resDt.Rows.Count > 0)
                                {
                                    foreach (DataRow resdr in resDt.Rows)
                                    {
                                        if (resdr != null)
                                        {
                                            resultLabTech.EditID = Convert.ToInt32(resdr["ResultLabId"].ToString());
                                            resultLabTech.ProfilePriority = Convert.ToInt32(resdr["ProfilePriority"].ToString());
                                            lstResultLabTech.Add(resultLabTech);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //if (dt.Rows.Count > 0)
                        //{
                        //foreach (DataRow dr in dt.Rows)
                        //{
                        //    if (dr != null)
                        //    {
                        //        ResultLabTech resultLabTech = new ResultLabTech();
                        //        if ((dr["Elements"] != DBNull.Value) && (elementName != ""))
                        //        {
                        //            resultLabTech.TestName = dr["Elements"].ToString();
                        //        }
                        //        resultLabTech.CalculationFormula = dr["splcalculation"].ToString();


                        //        string resStr = "SELECT * FROM  resultlabtest res where res.MrdNo = '" + mrdNo + "' and res.TestCode='" + testCode + "' " +
                        //                        " and res.TestName = '" + elementName + "'";
                        //        MySqlDataAdapter resData = new MySqlDataAdapter(resStr, conn);
                        //        MySqlCommandBuilder resCmd = new MySqlCommandBuilder(resData);
                        //        DataSet resDs = new DataSet();
                        //        DataTable resDt = new DataTable();
                        //        resData.Fill(resDs);
                        //        resDt = resDs.Tables[0];
                        //        if (resDt.Rows.Count > 0)
                        //        {
                        //            foreach (DataRow resdr in resDt.Rows)
                        //            {
                        //                if (resdr != null)
                        //                {
                        //                    resultLabTech.EditID = Convert.ToInt32(resdr["ResultLabId"].ToString());
                        //                    resultLabTech.ProfilePriority = Convert.ToInt32(resdr["ProfilePriority"].ToString());
                        //                    lstResultLabTech.Add(resultLabTech);
                        //                }
                        //            }
                        //        }
                        //    }
                        //}
                        //}
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getCalculationResult
        /// <summary>
        /// Table - parentpaymentreceived
        /// </summary>
        /// get pending amount values from parentpaymentreceived table
        /// <returns></returns>
        [Route("api/Account/getCalculationResult")]
        [HttpGet]
        public List<ResultLabTech> getCalculationResult(string mrdNo, string testCode, string PatientID, string splcalculation, string calculationType, string editID,
                                                        int TestType, string testName, string valueEntered)
        {
            string informationValue = "";
            var ResultNew = "0";
            char character = ' ';
            int CharCount = 0;
            string calcType = "";
            string diffCalculationFormula = "";
            string ssfinal = "";
            string[] testNames = new string[20];
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            DataTable dt1 = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  calculationfortestdetails where TestCode='" + testCode + "' "+
                    //                " and splcalculation='"+ splcalculation + "' and CalculationType='"+ calculationType + "'";

                    string strSQL = "SELECT * FROM  calculationfortestdetails where TestCode='" + testCode + "' " +
                                  " and splcalculation='" + splcalculation + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);

                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //if (dr["CalculationType"].ToString() == "Used by other Tests")
                            //{
                            var splcalculationstring = dr["splcalculation"].ToString();
                            string specialChar = @"*/-+,./!%^\()";
                            var splcalculationNew = "";
                            //string[] chars = new string[] { ",", ".", "/", "!", "@", "#", "$", "%", "^", "&", "*", "'", "\"", ";", "_", "(", ")", ":", "|", "[", "]" };


                            foreach (var item in specialChar)
                            {
                                if (splcalculationstring.Contains(item))
                                {
                                    character = item;
                                    if (CharCount == 0)
                                    {
                                        // var ss = System.Text.RegularExpressions.Regex.Replace(splcalculation, @"[0-9\-]", string.Empty);
                                        splcalculationNew = splcalculationstring.Replace(item, ',');
                                        CharCount++;
                                    }
                                    else
                                    {
                                        splcalculationNew = splcalculationNew.Replace(item, ',');
                                        //var testNamesnew = splcalculation.Substring(CharPos, splcalculation.IndexOf(item));
                                    }
                                }
                                testNames = splcalculationNew.Split(',');
                            }
                            if ((testCode == "TST095") && (TestType == 1))
                            {
                                string[] splcalculationnew = splcalculation.Split('+');
                                string testNamesMulti = "" + string.Join("','", splcalculationnew) + "";
                                for (int i = 0; i < splcalculationnew.Length; i++)
                                {
                                    if ((splcalculationnew[i].ToString()) != " ")
                                    {
                                        string sqlNames = "select * from  resultlabtest t2 where t2.MrdNo = '" + mrdNo + "' and TestName = '" + splcalculationnew[i] + "'";

                                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                        DataSet resultds = new DataSet();
                                        DataTable resultdt = new DataTable();
                                        resultdata.Fill(resultds);
                                        resultdt = resultds.Tables[0];
                                        if (resultdt.Rows.Count > 0)
                                        {
                                            if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                                            {
                                                ResultNew = "0";
                                                diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                            }
                                            else
                                            {
                                                ResultNew = resultdt.Rows[0]["Result"].ToString();
                                                if (diffCalculationFormula == "")
                                                {
                                                    diffCalculationFormula = splcalculation.Replace(splcalculationnew[i].ToString(), ResultNew);
                                                }
                                                else
                                                {
                                                    diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ResultNew = "0";
                                            diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                        }
                                    }
                                }
                                if (diffCalculationFormula != " ")
                                {
                                    DataTable dtnew = new DataTable();
                                    dtnew.Columns.Add("myExpression", string.Empty.GetType(), diffCalculationFormula);
                                    DataRow row = dtnew.NewRow();
                                    dtnew.Rows.Add(row);
                                    //ResultNew = double.Parse((string)row["myExpression"]);
                                    ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();
                                }
                                else
                                {
                                    ResultNew = "0";
                                }
                            }
                            else if ((testCode != "TST095") && (TestType == 1))
                            {
                                for (int i = 0; i < testNames.Length; i++)
                                {
                                    int result;
                                    var checkName = int.TryParse(testNames[i], out result);
                                    var trimedString = testNames[i].TrimStart();
                                    trimedString = trimedString.TrimEnd();

                                    if ((!checkName) && (testNames[i] != ""))
                                    {
                                        string sqlNames = "select * from  resultlabtest t2 where t2.MrdNo = '" + mrdNo + "' and TestName like '" + trimedString + "%'";

                                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                        DataSet resultds = new DataSet();
                                        DataTable resultdt = new DataTable();
                                        resultdata.Fill(resultds);
                                        resultdt = resultds.Tables[0];
                                        if (resultdt.Rows.Count > 0)
                                        {
                                            if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                                            {
                                                ResultNew = "0";
                                            }
                                            else
                                            {
                                                ResultNew = resultdt.Rows[0]["Result"].ToString();
                                                //ssfinal = splcalculation.Replace(trimedString, ResultNew);
                                                if (diffCalculationFormula == "")
                                                {
                                                    diffCalculationFormula = splcalculation.Replace(trimedString, ResultNew);
                                                    ssfinal = diffCalculationFormula;
                                                }
                                                else
                                                {
                                                    diffCalculationFormula = diffCalculationFormula.Replace(trimedString, ResultNew);
                                                    ssfinal = diffCalculationFormula;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ResultNew = "0";
                                        }
                                    }
                                }
                                if (ssfinal != "")
                                {
                                    //DataTable dtnew = new DataTable();
                                    //dtnew.Columns.Add("myExpression", string.Empty.GetType(), ssfinal);
                                    //DataRow row = dtnew.NewRow();
                                    //dtnew.Rows.Add(row);
                                    ////ResultNew = double.Parse((string)row["myExpression"]);
                                    //ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();
                                    DataTable dtnew = new DataTable();
                                    string[] newtestNames = new string[10];
                                    if (ssfinal.Contains('^'))
                                    {
                                        ssfinal = ssfinal.Replace("^", ",");
                                        var resultCal = "";
                                        if (ssfinal.Contains('('))
                                        {
                                            ssfinal = ssfinal.Replace("(", " ");
                                            ssfinal = ssfinal.Replace(")", " ");
                                            resultCal = ssfinal.Trim(' ');
                                        }
                                        else { resultCal = ssfinal; }
                                        double value, power;
                                        value = Convert.ToDouble(resultCal.Split(',')[0]);
                                        power = Convert.ToDouble(resultCal.Split(',')[1]);
                                        string result = Math.Pow(value, power).ToString();
                                        dtnew.Columns.Add("myExpression", string.Empty.GetType(), result);
                                    }
                                    else
                                    {
                                        dtnew.Columns.Add("myExpression", string.Empty.GetType(), ssfinal);

                                    }
                                    DataRow row = dtnew.NewRow();
                                    dtnew.Rows.Add(row);
                                    //ResultNew = double.Parse((string)row["myExpression"]);
                                    ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();
                                }
                                else
                                {
                                    ResultNew = "0";
                                }
                            }
                            else if (TestType == 1)
                            {
                                string sqlNames = "";
                                sqlNames = "select Result" + character + splcalculationstring.Split(character)[1] + " as ResultValue from " +
                                       "  resultlabtest t2 where t2.MrdNo = '" + mrdNo + "' and t2.TestName = '" + splcalculationstring.Split(character)[0] + "'";

                                if (sqlNames != "")
                                {
                                    MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                    MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                    DataSet resultds = new DataSet();
                                    DataTable resultdt = new DataTable();
                                    resultdata.Fill(resultds);
                                    resultdt = resultds.Tables[0];
                                    if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                                    {
                                        ResultNew = "0";
                                    }
                                    else
                                    {
                                        // ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                                        ResultNew = System.Math.Round(double.Parse((resultdt.Rows[0]["ResultValue"].ToString())), 2).ToString();
                                    }
                                }

                            }
                            else if (((splcalculationstring.Split(character)[1]).Contains("TST")) && (TestType == 4))
                            {
                                string sqlNames = "select " +
                   " t1.Result " + character + " (select Result from  resultlabtest t2 where t2.MrdNo = '" + mrdNo + "' and t2.TestCode = '" + splcalculationstring.Split(character)[1] + "') as ResultValue " +
                   " from  resultlabtest t1 where t1.MrdNo = '" + mrdNo + "' and t1.TestCode = '" + splcalculationstring.Split(character)[0] + "' ";

                                MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                DataSet resultds = new DataSet();
                                DataTable resultdt = new DataTable();
                                resultdata.Fill(resultds);
                                resultdt = resultds.Tables[0];
                                if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                                {
                                    ResultNew = "0";
                                }
                                else
                                {
                                    // ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                                    ResultNew = System.Math.Round(double.Parse((resultdt.Rows[0]["ResultValue"].ToString())), 2).ToString();
                                }
                            }
                            else if (TestType == 4)
                            {
                                string sqlNames = "";
                                for (int i = 0; i < testNames.Length; i++)
                                {
                                    if (testNames[i] == "a")
                                    {
                                        ssfinal = splcalculationstring.Replace(testNames[i], valueEntered);
                                    }
                                    else if (testNames[i].Contains("TST"))
                                    {
                                        sqlNames = "select Result" + character + splcalculationstring.Split(character)[1] + " as ResultValue from " +
                                   "  resultlabtest t2 where t2.MrdNo = '" + mrdNo + "' and t2.TestCode = '" + splcalculationstring.Split(character)[0] + "'";

                                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                        DataSet resultds = new DataSet();
                                        DataTable resultdt = new DataTable();
                                        resultdata.Fill(resultds);
                                        resultdt = resultds.Tables[0];
                                        if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                                        {
                                            ResultNew = "0";
                                        }
                                        else
                                        {
                                            // ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                                            ResultNew = System.Math.Round(double.Parse((resultdt.Rows[0]["ResultValue"].ToString())), 2).ToString();
                                        }
                                    }
                                }
                                if (ssfinal != "")
                                {
                                    DataTable dtnew = new DataTable();
                                    dtnew.Columns.Add("myExpression", string.Empty.GetType(), ssfinal);
                                    DataRow row = dtnew.NewRow();
                                    dtnew.Rows.Add(row);
                                    //ResultNew = double.Parse((string)row["myExpression"]);
                                    ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();
                                }
                            }
                            if (ResultNew != "0")
                            {
                                if (TestType == 1)
                                {
                                    string updSql = "update  resultlabtest set Result=" + ResultNew + " where ResultLabId=" + editID + " and MrdNo = '" + mrdNo + "' " +
                                       " and PatientID='" + PatientID + "' and TestCode='" + testCode + "' and TestName = '" + testName + "'";
                                    MySqlCommand updCmd = new MySqlCommand(updSql, conn);
                                    updCmd.ExecuteNonQuery();
                                }
                                else
                                {
                                    string updSql = "update  resultlabtest set Result=" + ResultNew + " where ResultLabId=" + editID + " and MrdNo = '" + mrdNo + "' " +
                                    " and PatientID='" + PatientID + "' and TestCode='" + testCode + "'";
                                    MySqlCommand updCmd = new MySqlCommand(updSql, conn);
                                    updCmd.ExecuteNonQuery();
                                }
                            }
                            ResultLabTech resultLabTech = new ResultLabTech();

                            resultLabTech.Result = ResultNew;
                            resultLabTech.SpecialComments = calcType;
                            resultLabTech.CalculationInformation = informationValue;
                            lstResultLabTech.Add(resultLabTech);
                            //}
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region apprinsertprelimResult       
        [Route("api/Account/apprinsertprelimResult")]
        [HttpPost]
        public void apprinsertprelimResult(CultureTestResult cultureTestResult)
        {
            if (cultureTestResult.Comments == null)
            {
                cultureTestResult.Comments = "0";
            }
            else
            {
                cultureTestResult.Comments = cultureTestResult.Comments;
            }
            //if (cultureTestResult.OrganizismIsolated2 == null)
            //{
            //    cultureTestResult.OrganizismIsolated2 = "0";
            //}
            //else
            //{
            //    cultureTestResult.OrganizismIsolated2 = cultureTestResult.OrganizismIsolated2;
            //}
            //if (cultureTestResult.ColonyCount2 == null)
            //{
            //    cultureTestResult.ColonyCount2 = "0";
            //}
            //else
            //{
            //    cultureTestResult.ColonyCount2 = cultureTestResult.ColonyCount2;
            //}
            //if (cultureTestResult.Comments2 == null)
            //{
            //    cultureTestResult.Comments2 = "0";
            //}
            //else
            //{
            //    cultureTestResult.Comments2 = cultureTestResult.Comments2;
            //}
            if (cultureTestResult.NegComment == null)
            {
                cultureTestResult.NegComment = "0";
            }
            else
            {
                cultureTestResult.NegComment = cultureTestResult.NegComment;
            }
            if (cultureTestResult.Result == null)
            {
                cultureTestResult.Result = "";
            }
            else
            {
                cultureTestResult.Result = cultureTestResult.Result;
            }
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "";
                    //if (cultureTestResult.Result == "Negative")
                    //{
                    //    urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and Result='Negative' and PatientID="+ cultureTestResult.PatientID + "";
                    //}
                    //else
                    //{
                    //urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' "+
                    //              " and TestCode='" + cultureTestResult.TestCode + "' and OrganizismIsolated='" + cultureTestResult.OrganizismIsolated + "'";
                    urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' " +
                                " and TestCode='" + cultureTestResult.TestCode + "' and PatientID='" + cultureTestResult.PatientID + "'";
                    // }
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows[0]["CultureCount"]) > 0)
                    {
                        string updatestrSQL = "UPDATE culturetestresult SET Specimen='" + cultureTestResult.Specimen + "',GrainStain='" + cultureTestResult.GrainStain + "',SpecialStain='" + cultureTestResult.SpecialStain + "' " +
                            ",Result='" + cultureTestResult.Result + "' " +
                            ",Comments='" + cultureTestResult.Comments + "' " +
                            ",NegComment='" + cultureTestResult.NegComment + "'" +
                            " where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and CultureTestResultId=" + Convert.ToInt32(dt.Rows[0]["CultureTestResultId"]) + "";
                        MySqlCommand cmd1 = new MySqlCommand(updatestrSQL, conn);
                        cmd1.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand newcmd1 = new MySqlCommand(updateQuery, conn);
                                    newcmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  culturetestresult(MrdNo,TestCode,TestName,Specimen,GrainStain,SpecialStain,Result,OrganizismIsolated, " +
                                        " ColonyCount,Comments,OrganizismIsolated2,ColonyCount2,Comments2,Remarks,Status,PatientID,NegComment) VALUES(@val1,@val2,@val3,@val4,@val5,@val6, " +
                                        " @val7,@val8,@val9,@val10,@val11,@val12,@val3,@val4,@val15,@val16,@val17)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", cultureTestResult.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", cultureTestResult.TestCode);
                        cmd.Parameters.AddWithValue("@val3", cultureTestResult.TestName);
                        cmd.Parameters.AddWithValue("@val4", cultureTestResult.Specimen);
                        cmd.Parameters.AddWithValue("@val5", cultureTestResult.GrainStain);
                        cmd.Parameters.AddWithValue("@val6", cultureTestResult.SpecialStain);
                        cmd.Parameters.AddWithValue("@val7", cultureTestResult.Result);
                        cmd.Parameters.AddWithValue("@val8", cultureTestResult.OrganizismIsolated);
                        cmd.Parameters.AddWithValue("@val9", cultureTestResult.ColonyCount);
                        cmd.Parameters.AddWithValue("@val10", cultureTestResult.Comments);
                        cmd.Parameters.AddWithValue("@val11", cultureTestResult.OrganizismIsolated2);
                        cmd.Parameters.AddWithValue("@val12", cultureTestResult.ColonyCount2);
                        cmd.Parameters.AddWithValue("@val13", cultureTestResult.Comments2);
                        cmd.Parameters.AddWithValue("@val14", cultureTestResult.Remarks);
                        cmd.Parameters.AddWithValue("@val15", cultureTestResult.Status);
                        cmd.Parameters.AddWithValue("@val16", cultureTestResult.PatientID);
                        cmd.Parameters.AddWithValue("@val17", cultureTestResult.NegComment);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand cmd1 = new MySqlCommand(updateQuery, conn);
                                    cmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertSpecimenResult       
        [Route("api/Account/insertSpecimenResult")]
        [HttpPost]
        public void insertSpecimenResult(CultureTestResult cultureTestResult)
        {
            if (cultureTestResult.Specimen == null)
            {
                cultureTestResult.Specimen = "";
            }
            else
            {
                cultureTestResult.Specimen = cultureTestResult.Specimen;
            }
            if (cultureTestResult.GrainStain == null)
            {
                cultureTestResult.GrainStain = "";
            }
            else
            {
                cultureTestResult.GrainStain = cultureTestResult.GrainStain;
            }
            if (cultureTestResult.SpecialStain == null)
            {
                cultureTestResult.SpecialStain = "";
            }
            else
            {
                cultureTestResult.SpecialStain = cultureTestResult.SpecialStain;
            }
            if (cultureTestResult.QualityScore == null)
            {
                cultureTestResult.QualityScore = "";
            }
            else
            {
                cultureTestResult.QualityScore = cultureTestResult.QualityScore;
            }
            if (cultureTestResult.FastBacilli == null)
            {
                cultureTestResult.FastBacilli = "";
            }
            else
            {
                cultureTestResult.FastBacilli = cultureTestResult.FastBacilli;
            }

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "";

                    urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' " +
                                " and TestCode='" + cultureTestResult.TestCode + "' and PatientID='" + cultureTestResult.PatientID + "'";
                    // }
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows[0]["CultureCount"]) > 0)
                    {
                        string updatestrSQL = "UPDATE culturetestresult SET Specimen='" + cultureTestResult.Specimen + "',GrainStain='" + cultureTestResult.GrainStain + "',SpecialStain='" + cultureTestResult.SpecialStain + "' " +
                            " ,QualityScore='" + cultureTestResult.QualityScore + "', FastBacilli='" + cultureTestResult.FastBacilli + "'" +
                            " where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and CultureTestResultId=" + Convert.ToInt32(dt.Rows[0]["CultureTestResultId"]) + "";
                        MySqlCommand cmd1 = new MySqlCommand(updatestrSQL, conn);
                        cmd1.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand newcmd1 = new MySqlCommand(updateQuery, conn);
                                    newcmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  culturetestresult(MrdNo,TestCode,TestName,Specimen,GrainStain,SpecialStain,Status,PatientID,QualityScore,FastBacilli) " +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", cultureTestResult.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", cultureTestResult.TestCode);
                        cmd.Parameters.AddWithValue("@val3", cultureTestResult.TestName);
                        cmd.Parameters.AddWithValue("@val4", cultureTestResult.Specimen);
                        cmd.Parameters.AddWithValue("@val5", cultureTestResult.GrainStain);
                        cmd.Parameters.AddWithValue("@val6", cultureTestResult.SpecialStain);
                        cmd.Parameters.AddWithValue("@val7", cultureTestResult.Status);
                        cmd.Parameters.AddWithValue("@val8", cultureTestResult.PatientID);
                        cmd.Parameters.AddWithValue("@val9", cultureTestResult.QualityScore);
                        cmd.Parameters.AddWithValue("@val10", cultureTestResult.FastBacilli);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,vd.Id,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand cmd1 = new MySqlCommand(updateQuery, conn);
                                    cmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertColonyCount       
        [Route("api/Account/insertColonyCount")]
        [HttpPost]
        public void insertColonyCount(CultureTestResult cultureTestResult)
        {
            if (cultureTestResult.Specimen == null)
            {
                cultureTestResult.Specimen = "";
            }
            else
            {
                cultureTestResult.Specimen = cultureTestResult.Specimen;
            }
            if (cultureTestResult.GrainStain == null)
            {
                cultureTestResult.GrainStain = "";
            }
            else
            {
                cultureTestResult.GrainStain = cultureTestResult.GrainStain;
            }
            if (cultureTestResult.SpecialStain == null)
            {
                cultureTestResult.SpecialStain = "";
            }
            else
            {
                cultureTestResult.SpecialStain = cultureTestResult.SpecialStain;
            }
            if (cultureTestResult.OrganizismIsolated == null)
            {
                cultureTestResult.OrganizismIsolated = "";
            }
            else
            {
                cultureTestResult.OrganizismIsolated = cultureTestResult.OrganizismIsolated;
            }
            if (cultureTestResult.ColonyCount == null)
            {
                cultureTestResult.ColonyCount = "";
            }
            else
            {
                cultureTestResult.ColonyCount = cultureTestResult.ColonyCount;
            }
            if (cultureTestResult.CulComments == null)
            {
                cultureTestResult.CulComments = "";
            }
            else
            {
                cultureTestResult.CulComments = cultureTestResult.CulComments;
            }
            if (cultureTestResult.Result == null)
            {
                cultureTestResult.Result = "";
            }
            else
            {
                cultureTestResult.Result = cultureTestResult.Result;
            }

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "";

                    urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' " +
                                " and TestCode='" + cultureTestResult.TestCode + "' and PatientID='" + cultureTestResult.PatientID + "'";
                    // }
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows[0]["CultureCount"]) > 0)
                    {
                        string updatestrSQL = "UPDATE culturetestresult SET Specimen='" + cultureTestResult.Specimen + "',GrainStain='" + cultureTestResult.GrainStain + "',SpecialStain='" + cultureTestResult.SpecialStain + "' " +
                            " ,Result='" + cultureTestResult.Result + "', OrganizismIsolated='" + cultureTestResult.OrganizismIsolated + "',ColonyCount='" + cultureTestResult.ColonyCount + "', " +
                            " CulComment='" + cultureTestResult.CulComments + "'" +
                            " where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and CultureTestResultId=" + Convert.ToInt32(dt.Rows[0]["CultureTestResultId"]) + "";
                        MySqlCommand cmd1 = new MySqlCommand(updatestrSQL, conn);
                        cmd1.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand newcmd1 = new MySqlCommand(updateQuery, conn);
                                    newcmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  culturetestresult(MrdNo,TestCode,TestName,Specimen,GrainStain,SpecialStain,Result,OrganizismIsolated," +
                                        " ColonyCount,CulComment,Status,PatientID) " +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", cultureTestResult.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", cultureTestResult.TestCode);
                        cmd.Parameters.AddWithValue("@val3", cultureTestResult.TestName);
                        cmd.Parameters.AddWithValue("@val4", cultureTestResult.Specimen);
                        cmd.Parameters.AddWithValue("@val5", cultureTestResult.GrainStain);
                        cmd.Parameters.AddWithValue("@val6", cultureTestResult.SpecialStain);
                        cmd.Parameters.AddWithValue("@val7", cultureTestResult.Result);
                        cmd.Parameters.AddWithValue("@val8", cultureTestResult.OrganizismIsolated);
                        cmd.Parameters.AddWithValue("@val9", cultureTestResult.ColonyCount);
                        cmd.Parameters.AddWithValue("@val10", cultureTestResult.CulComments);
                        cmd.Parameters.AddWithValue("@val11", cultureTestResult.Status);
                        cmd.Parameters.AddWithValue("@val12", cultureTestResult.PatientID);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand cmd1 = new MySqlCommand(updateQuery, conn);
                                    cmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertPrelimContent       
        [Route("api/Account/insertPrelimContent")]
        [HttpPost]
        public void insertPrelimContent(CultureTestResult cultureTestResult)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "";
                    urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' " +
                                " and TestCode='" + cultureTestResult.TestCode + "' and PatientID='" + cultureTestResult.PatientID + "'";
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows[0]["CultureCount"]) > 0)
                    {
                        string updatestrSQL = "UPDATE culturetestresult SET Specimen='" + cultureTestResult.Specimen + "',GrainStain='" + cultureTestResult.GrainStain + "',SpecialStain='" + cultureTestResult.SpecialStain + "' " +
                            ",QualityScore='" + cultureTestResult.QualityScore + "',FastBacilli='" + cultureTestResult.FastBacilli + "'," +
                            " Comments='" + cultureTestResult.Comments + "',Status='" + cultureTestResult.Status + "'" +
                            " where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and CultureTestResultId=" + Convert.ToInt32(dt.Rows[0]["CultureTestResultId"]) + "";
                        MySqlCommand cmd1 = new MySqlCommand(updatestrSQL, conn);
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  culturetestresult(MrdNo,TestCode,TestName,Specimen,GrainStain,SpecialStain,QualityScore,FastBacilli, " +
                                        " Comments,Status,PatientID) " +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", cultureTestResult.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", cultureTestResult.TestCode);
                        cmd.Parameters.AddWithValue("@val3", cultureTestResult.TestName);
                        cmd.Parameters.AddWithValue("@val4", cultureTestResult.Specimen);
                        cmd.Parameters.AddWithValue("@val5", cultureTestResult.GrainStain);
                        cmd.Parameters.AddWithValue("@val6", cultureTestResult.SpecialStain);
                        cmd.Parameters.AddWithValue("@val7", cultureTestResult.QualityScore);
                        cmd.Parameters.AddWithValue("@val8", cultureTestResult.FastBacilli);
                        cmd.Parameters.AddWithValue("@val9", cultureTestResult.Comments);
                        cmd.Parameters.AddWithValue("@val10", cultureTestResult.Status);
                        cmd.Parameters.AddWithValue("@val11", cultureTestResult.PatientID);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                    MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                    DataSet inertds = new DataSet();
                    DataTable insertdt = new DataTable();
                    data.Fill(inertds);
                    insertdt = inertds.Tables[0];
                    if (insertdt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in insertdt.Rows)
                        {
                            if (dr != null)
                            {
                                string updateQuery = "update  resultlabtest set saveFlag=0 where PatientID='" + cultureTestResult.PatientID + "' and " +
                                 " MrdNo='" + cultureTestResult.MrdNo + "' and ResultLabId='" + dr["ResultLabId"].ToString() + "'";
                                MySqlCommand cmd1 = new MySqlCommand(updateQuery, conn);
                                cmd1.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertCultureTestResult       
        [Route("api/Account/insertCultureTestResult")]
        [HttpPost]
        public void insertCultureTestResult(CultureTestResult cultureTestResult)
        {
            if (cultureTestResult.Comments == null)
            {
                cultureTestResult.Comments = "0";
            }
            else
            {
                cultureTestResult.Comments = cultureTestResult.Comments;
            }
            if (cultureTestResult.OrganizismIsolated2 == null)
            {
                cultureTestResult.OrganizismIsolated2 = "0";
            }
            else
            {
                cultureTestResult.OrganizismIsolated2 = cultureTestResult.OrganizismIsolated2;
            }
            if (cultureTestResult.ColonyCount2 == null)
            {
                cultureTestResult.ColonyCount2 = "0";
            }
            else
            {
                cultureTestResult.ColonyCount2 = cultureTestResult.ColonyCount2;
            }
            if (cultureTestResult.Comments2 == null)
            {
                cultureTestResult.Comments2 = "0";
            }
            else
            {
                cultureTestResult.Comments2 = cultureTestResult.Comments2;
            }
            if (cultureTestResult.NegComment == null)
            {
                cultureTestResult.NegComment = "0";
            }
            else
            {
                cultureTestResult.NegComment = cultureTestResult.NegComment;
            }
            if (cultureTestResult.Result == null)
            {
                cultureTestResult.Result = "";
            }
            else
            {
                cultureTestResult.Result = cultureTestResult.Result;
            }
            if (cultureTestResult.CulComments == null)
            {
                cultureTestResult.CulComments = "";
            }
            else
            {
                cultureTestResult.CulComments = cultureTestResult.CulComments;
            }
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "";
                    //if (cultureTestResult.Result == "Negative")
                    //{
                    //    urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and Result='Negative' and PatientID="+ cultureTestResult.PatientID + "";
                    //}
                    //else
                    //{
                    //urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' "+
                    //              " and TestCode='" + cultureTestResult.TestCode + "' and OrganizismIsolated='" + cultureTestResult.OrganizismIsolated + "'";
                    urCultureSQL = "select Count(*) as CultureCount,CultureTestResultId from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' " +
                                " and TestCode='" + cultureTestResult.TestCode + "' and PatientID='" + cultureTestResult.PatientID + "'";
                    // }
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows[0]["CultureCount"]) > 0)
                    {
                        string updatestrSQL = "UPDATE culturetestresult SET Specimen='" + cultureTestResult.Specimen + "',GrainStain='" + cultureTestResult.GrainStain + "',SpecialStain='" + cultureTestResult.SpecialStain + "' " +
                            ",Result='" + cultureTestResult.Result + "',OrganizismIsolated='" + cultureTestResult.OrganizismIsolated + "',ColonyCount='" + cultureTestResult.ColonyCount + "'" +
                            ",Comments='" + cultureTestResult.Comments + "',OrganizismIsolated2='" + cultureTestResult.OrganizismIsolated2 + "',ColonyCount2='" + cultureTestResult.ColonyCount2 + "'" +
                            ",Comments2='" + cultureTestResult.Comments2 + "',Remarks='" + cultureTestResult.Remarks + "',Status='" + cultureTestResult.Status + "'" +
                            ",NegComment='" + cultureTestResult.NegComment + "',CulComment='" + cultureTestResult.CulComments + "'" +
                            " where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and CultureTestResultId=" + Convert.ToInt32(dt.Rows[0]["CultureTestResultId"]) + "";
                        MySqlCommand cmd1 = new MySqlCommand(updatestrSQL, conn);
                        cmd1.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand newcmd1 = new MySqlCommand(updateQuery, conn);
                                    newcmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  culturetestresult(MrdNo,TestCode,TestName,Specimen,GrainStain,SpecialStain,Result,OrganizismIsolated, " +
                                        " ColonyCount,Comments,OrganizismIsolated2,ColonyCount2,Comments2,Remarks,Status,PatientID,NegComment,CulComment) " +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6, " +
                                        " @val7,@val8,@val9,@val10,@val11,@val12,@val3,@val4,@val15,@val16,@val17,@val18)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", cultureTestResult.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", cultureTestResult.TestCode);
                        cmd.Parameters.AddWithValue("@val3", cultureTestResult.TestName);
                        cmd.Parameters.AddWithValue("@val4", cultureTestResult.Specimen);
                        cmd.Parameters.AddWithValue("@val5", cultureTestResult.GrainStain);
                        cmd.Parameters.AddWithValue("@val6", cultureTestResult.SpecialStain);
                        cmd.Parameters.AddWithValue("@val7", cultureTestResult.Result);
                        cmd.Parameters.AddWithValue("@val8", cultureTestResult.OrganizismIsolated);
                        cmd.Parameters.AddWithValue("@val9", cultureTestResult.ColonyCount);
                        cmd.Parameters.AddWithValue("@val10", cultureTestResult.Comments);
                        cmd.Parameters.AddWithValue("@val11", cultureTestResult.OrganizismIsolated2);
                        cmd.Parameters.AddWithValue("@val12", cultureTestResult.ColonyCount2);
                        cmd.Parameters.AddWithValue("@val13", cultureTestResult.Comments2);
                        cmd.Parameters.AddWithValue("@val14", cultureTestResult.Remarks);
                        cmd.Parameters.AddWithValue("@val15", cultureTestResult.Status);
                        cmd.Parameters.AddWithValue("@val16", cultureTestResult.PatientID);
                        cmd.Parameters.AddWithValue("@val17", cultureTestResult.NegComment);
                        cmd.Parameters.AddWithValue("@val18", cultureTestResult.CulComments);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        string selQuery = "select distinct pr.RegID,vd.Id,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode,vd.TestType, vd.DispalyName from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                                         " inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                                         " where vd.MrdNo = '" + cultureTestResult.MrdNo + "' and vd.TestCodeRef = '" + cultureTestResult.TestCode + "' ";
                        MySqlDataAdapter Culturedata = new MySqlDataAdapter(selQuery, conn);
                        MySqlCommandBuilder Culturecmd = new MySqlCommandBuilder(Culturedata);
                        DataSet Culds = new DataSet();
                        DataTable Culdt = new DataTable();
                        Culturedata.Fill(Culds);
                        Culdt = Culds.Tables[0];
                        if (Culdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in Culdt.Rows)
                            {
                                string query = "select * from  resultlabtest where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "'";
                                MySqlDataAdapter data = new MySqlDataAdapter(query, conn);
                                MySqlCommandBuilder insertcmd = new MySqlCommandBuilder(data);
                                DataSet inertds = new DataSet();
                                DataTable insertdt = new DataTable();
                                data.Fill(inertds);
                                insertdt = inertds.Tables[0];
                                if (insertdt.Rows.Count > 0)
                                {
                                    string updateQuery = "update  resultlabtest set saveFlag=1 where PatientID='" + dr["RegID"].ToString() + "' and MrdNo='" + dr["MrdNo"].ToString() + "' and RegId='" + dr["Id"].ToString() + "'";
                                    MySqlCommand cmd1 = new MySqlCommand(updateQuery, conn);
                                    cmd1.ExecuteNonQuery();
                                }
                                else
                                {
                                    string insertQuery = "insert into  resultlabtest(MrdNo,TestCode,TestName,RegId,ProfilePriority,saveFlag,PatientID,CreateDate) " +
                                                         " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, conn);
                                    insertCmd.Parameters.AddWithValue("@val1", dr["MrdNo"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val2", dr["TestCode"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val3", dr["TestName"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val4", dr["Id"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val5", dr["TestType"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val6", 1);
                                    insertCmd.Parameters.AddWithValue("@val7", dr["RegID"].ToString());
                                    insertCmd.Parameters.AddWithValue("@val8", DateTime.Now);
                                    insertCmd.CommandType = CommandType.Text;
                                    insertCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getinsertedCultureid
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/getinsertedCultureid")]
        [HttpPost]
        public int getinsertedCultureid(CultureTestResult cultureTestResult)
        {
            int cultureId = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "select * from  culturetestresult where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and OrganizismIsolated='" + cultureTestResult.OrganizismIsolated + "'";
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows.Count) > 0)
                    {
                        cultureId = Convert.ToInt32(dt.Rows[0]["CultureTestResultId"]);
                    }
                    //else
                    //{

                    //    string strSQL = "INSERT INTO  culturetestresult(MrdNo,TestCode,TestName,Specimen,GrainStain,SpecialStain,Result,OrganizismIsolated,ColonyCount,Comments,OrganizismIsolated2,ColonyCount2,Comments2,Remarks,Status) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val3,@val4,@val15)";

                    //    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    //    cmd.Parameters.AddWithValue("@val1", cultureTestResult.MrdNo);
                    //    cmd.Parameters.AddWithValue("@val2", cultureTestResult.TestCode);
                    //    cmd.Parameters.AddWithValue("@val3", cultureTestResult.TestName);
                    //    cmd.Parameters.AddWithValue("@val4", cultureTestResult.Specimen);
                    //    cmd.Parameters.AddWithValue("@val5", cultureTestResult.GrainStain);
                    //    cmd.Parameters.AddWithValue("@val6", cultureTestResult.SpecialStain);
                    //    cmd.Parameters.AddWithValue("@val7", cultureTestResult.Result);
                    //    cmd.Parameters.AddWithValue("@val8", cultureTestResult.OrganizismIsolated);
                    //    cmd.Parameters.AddWithValue("@val9", cultureTestResult.ColonyCount);
                    //    cmd.Parameters.AddWithValue("@val10", cultureTestResult.Comments);
                    //    cmd.Parameters.AddWithValue("@val11", cultureTestResult.OrganizismIsolated2);
                    //    cmd.Parameters.AddWithValue("@val12", cultureTestResult.ColonyCount2);
                    //    cmd.Parameters.AddWithValue("@val13", cultureTestResult.Comments2);
                    //    cmd.Parameters.AddWithValue("@val14", cultureTestResult.Remarks);
                    //    cmd.Parameters.AddWithValue("@val15", cultureTestResult.Status);
                    //    cmd.CommandType = CommandType.Text;
                    //    cmd.ExecuteNonQuery();
                    //}
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return cultureId;
            }
        }
        #endregion

        #region getorganismIsolatedData
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/getorganismIsolatedData")]
        [HttpPost]
        public List<AntiMicrobialsusceptibilityNew> getorganismIsolatedData(AntiMicrobialsusceptibilityNew cultureTestResult)
        {
            List<AntiMicrobialsusceptibilityNew> IsoList = new List<AntiMicrobialsusceptibilityNew>();
            //int cultureId = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string urCultureSQL = "select * from  antimicrobialsusceptibility1 where MrdNo='" + cultureTestResult.MrdNo + "' and TestCode='" + cultureTestResult.TestCode + "' and OrganizismIsolated='" + cultureTestResult.OrganizismIsolated + "'";
                    string urCultureSQL = "select * from  culturetestresult cr inner join  antimicrobialsusceptibility1 an " +
                                          " on cr. CultureTestResultId = an.CultureId and cr.OrganizismIsolated = '" + cultureTestResult.OrganizismIsolated + "' " +
                                          " inner join  antimicrobialagentmaster anm on an.Agent=anm.AtimicrobialAgent " +
                                          " where cr. MrdNo = '" + cultureTestResult.MrdNo + "' and cr.TestCode = '" + cultureTestResult.TestCode + "'";
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows.Count) > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            AntiMicrobialsusceptibilityNew List = new AntiMicrobialsusceptibilityNew();

                            List.CultureTestResultId = Convert.ToInt32(dr["CultureTestResultId"]);
                            List.Specimen = dr["Specimen"].ToString();
                            List.GrainStain = dr["GrainStain"].ToString();
                            List.SpecialStain = dr["SpecialStain"].ToString();
                            List.Result = dr["Result"].ToString();
                            List.OrganizismIsolated = dr["OrganizismIsolated"].ToString();
                            List.ColonyCount = dr["ColonyCount"].ToString();
                            List.Comments = dr["Comments"].ToString();
                            List.OrganizismIsolated2 = dr["OrganizismIsolated2"].ToString();
                            List.ColonyCount2 = dr["ColonyCount2"].ToString();
                            List.Remarks = dr["Remarks"].ToString();

                            List.EditMicrobID = Convert.ToInt32(dr["AntiMicrobialId"].ToString());
                            List.Agent = dr["Agent"].ToString();
                            List.zoneInhibition = dr["zoneInhibition"].ToString();
                            List.Interpretation = dr["Interpretation"].ToString();
                            List.Comments2 = dr["MicrobialComment"].ToString();
                            List.AgentId = Convert.ToInt32(dr["AgentId"]);
                            IsoList.Add(List);
                        }
                    }
                    //else
                    //{

                    //    string strSQL = "INSERT INTO  culturetestresult(MrdNo,TestCode,TestName,Specimen,GrainStain,SpecialStain,Result,OrganizismIsolated,ColonyCount,Comments,OrganizismIsolated2,ColonyCount2,Comments2,Remarks,Status) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val3,@val4,@val15)";

                    //    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    //    cmd.Parameters.AddWithValue("@val1", cultureTestResult.MrdNo);
                    //    cmd.Parameters.AddWithValue("@val2", cultureTestResult.TestCode);
                    //    cmd.Parameters.AddWithValue("@val3", cultureTestResult.TestName);
                    //    cmd.Parameters.AddWithValue("@val4", cultureTestResult.Specimen);
                    //    cmd.Parameters.AddWithValue("@val5", cultureTestResult.GrainStain);
                    //    cmd.Parameters.AddWithValue("@val6", cultureTestResult.SpecialStain);
                    //    cmd.Parameters.AddWithValue("@val7", cultureTestResult.Result);
                    //    cmd.Parameters.AddWithValue("@val8", cultureTestResult.OrganizismIsolated);
                    //    cmd.Parameters.AddWithValue("@val9", cultureTestResult.ColonyCount);
                    //    cmd.Parameters.AddWithValue("@val10", cultureTestResult.Comments);
                    //    cmd.Parameters.AddWithValue("@val11", cultureTestResult.OrganizismIsolated2);
                    //    cmd.Parameters.AddWithValue("@val12", cultureTestResult.ColonyCount2);
                    //    cmd.Parameters.AddWithValue("@val13", cultureTestResult.Comments2);
                    //    cmd.Parameters.AddWithValue("@val14", cultureTestResult.Remarks);
                    //    cmd.Parameters.AddWithValue("@val15", cultureTestResult.Status);
                    //    cmd.CommandType = CommandType.Text;
                    //    cmd.ExecuteNonQuery();
                    //}
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return IsoList;
            }
        }
        #endregion

        #region insertAntiMicrobialsusceptibility1
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertAntiMicrobialsusceptibility1")]
        [HttpPost]
        public void insertAntiMicrobialsusceptibility1(AntiMicrobialsusceptibility1 antiMicrobialsusceptibility1)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "select Count(*) as CultureCount,AntiMicrobialId from  antimicrobialsusceptibility1 where MrdNo='" + antiMicrobialsusceptibility1.MrdNo + "' and TestCode='" + antiMicrobialsusceptibility1.TestCode + "' and Agent='" + antiMicrobialsusceptibility1.Agent + "' and CultureId=" + antiMicrobialsusceptibility1.CultureId + "";
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];

                    if (Convert.ToInt32(dt.Rows[0]["CultureCount"]) > 0)
                    {
                        string updatestrSQL = "UPDATE antimicrobialsusceptibility1 SET Agent='" + antiMicrobialsusceptibility1.Agent + "',zoneInhibition='" + antiMicrobialsusceptibility1.zoneInhibition + "',Interpretation='" + antiMicrobialsusceptibility1.Interpretation + "', " +
                            " MicrobialComment='" + antiMicrobialsusceptibility1.MicrobialComment + "'" +
                            " where MrdNo='" + antiMicrobialsusceptibility1.MrdNo + "' and TestCode='" + antiMicrobialsusceptibility1.TestCode + "' and AntiMicrobialId=" + dt.Rows[0]["AntiMicrobialId"] + "";
                        MySqlCommand cmd1 = new MySqlCommand(updatestrSQL, conn);
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  antimicrobialsusceptibility1(MrdNo,TestCode,Agent,zoneInhibition,Interpretation,CultureId,MicrobialComment,PatientID) " +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", antiMicrobialsusceptibility1.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", antiMicrobialsusceptibility1.TestCode);
                        cmd.Parameters.AddWithValue("@val3", antiMicrobialsusceptibility1.Agent);
                        cmd.Parameters.AddWithValue("@val4", antiMicrobialsusceptibility1.zoneInhibition);
                        cmd.Parameters.AddWithValue("@val5", antiMicrobialsusceptibility1.Interpretation);
                        cmd.Parameters.AddWithValue("@val6", antiMicrobialsusceptibility1.CultureId);
                        cmd.Parameters.AddWithValue("@val7", antiMicrobialsusceptibility1.MicrobialComment);
                        cmd.Parameters.AddWithValue("@val8", antiMicrobialsusceptibility1.PatientID);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertAntiMicrobialsusceptibility1New
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertAntiMicrobialsusceptibility1New")]
        [HttpPost]
        public void insertAntiMicrobialsusceptibility1New(HttpRequestMessage request,
            [FromBody] AntiMicrobialsusceptibility1 antiMicrobialsusceptibility1)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "select Count(*) as CultureCount,AntiMicrobialId from  antimicrobialsusceptibility1 where MrdNo='" + antiMicrobialsusceptibility1.MrdNo + "' and TestCode='" + antiMicrobialsusceptibility1.TestCode + "' and Agent='" + antiMicrobialsusceptibility1.Agent + "' and CultureId=" + antiMicrobialsusceptibility1.CultureId + "";
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];
                    if (Convert.ToInt32(dt.Rows[0]["CultureCount"]) > 0)
                    {
                        string updatestrSQL = "UPDATE antimicrobialsusceptibility1 SET Agent='" + antiMicrobialsusceptibility1.Agent + "',zoneInhibition='" + antiMicrobialsusceptibility1.zoneInhibition + "',Interpretation='" + antiMicrobialsusceptibility1.Interpretation + "' " +
                            " where MrdNo='" + antiMicrobialsusceptibility1.MrdNo + "' and TestCode='" + antiMicrobialsusceptibility1.TestCode + "' and AntiMicrobialId=" + dt.Rows[0]["AntiMicrobialId"] + "";
                        MySqlCommand cmd1 = new MySqlCommand(updatestrSQL, conn);
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  antimicrobialsusceptibility1(MrdNo,TestCode,Agent,zoneInhibition,Interpretation,CultureId,PatientID) " +
                            " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", antiMicrobialsusceptibility1.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", antiMicrobialsusceptibility1.TestCode);
                        cmd.Parameters.AddWithValue("@val3", antiMicrobialsusceptibility1.Agent);
                        cmd.Parameters.AddWithValue("@val4", antiMicrobialsusceptibility1.zoneInhibition);
                        cmd.Parameters.AddWithValue("@val5", antiMicrobialsusceptibility1.Interpretation);
                        cmd.Parameters.AddWithValue("@val6", antiMicrobialsusceptibility1.CultureId);
                        cmd.Parameters.AddWithValue("@val7", antiMicrobialsusceptibility1.PatientID);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertIsolatedOrganisms
        /// <summary>
        ///
        /// </summary>
        [Route("api/Account/insertIsolatedOrganisms")]
        [HttpPost]
        public string insertIsolatedOrganisms(string organName, string culCategory)
        {
            var recordStatus = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "select * from  isolatedorganismmaster where OrganismName='" + organName + "' and Category='" + culCategory + "'";
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];

                    if ((dt.Rows.Count) > 0)
                    {
                        recordStatus = "Yes";
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  isolatedorganismmaster(OrganismName,Category) VALUES(@val1,@val2)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", organName);
                        cmd.Parameters.AddWithValue("@val2", culCategory);

                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        recordStatus = "No";
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return recordStatus;
            }
        }
        #endregion

        #region insertAntiMicrobialAgent
        /// <summary>
        ///
        /// </summary>
        [Route("api/Account/insertAntiMicrobialAgent")]
        [HttpPost]
        public string insertAntiMicrobialAgent(string agentName, string culCategory)
        {
            var recordStatus = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string urCultureSQL = "select * from  antimicrobialagentmaster where AtimicrobialAgent='" + agentName + "' and CultureCategory='" + culCategory + "'";
                    conn.Open();
                    MySqlDataAdapter urCulturedata = new MySqlDataAdapter(urCultureSQL, conn);
                    MySqlCommandBuilder urCulturecmd = new MySqlCommandBuilder(urCulturedata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    urCulturedata.Fill(ds);
                    dt = ds.Tables[0];

                    if ((dt.Rows.Count) > 0)
                    {
                        recordStatus = "Yes";
                    }
                    else
                    {
                        string strSQL = "INSERT INTO  antimicrobialagentmaster(AtimicrobialAgent,CultureCategory) VALUES(@val1,@val2)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", agentName);
                        cmd.Parameters.AddWithValue("@val2", culCategory);

                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        recordStatus = "No";
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return recordStatus;
            }
        }
        #endregion
        //End

        //Geetha Code Starts



        #region getTitleList
        /// <summary>
        /// getLocationList
        /// </summary>
        /// To get all records from Location table.
        /// <returns></returns>

        [Route("api/Account/getTitleList")]
        [HttpGet]
        public List<AddTitle> getTitleList()
        {
            List<AddTitle> lsttitle = new List<AddTitle>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  addtitle";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            AddTitle TitleList = new AddTitle();
                            TitleList.TitleId = (int)dr["TitleId"];
                            TitleList.TitleName = dr["TitleName"].ToString();


                            lsttitle.Add(TitleList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lsttitle;
            }
        }
        #endregion


        #region updateAddTitleDetails
        /// <summary>
        /// Table - Location
        /// </summary>
        /// Inserted the Location details
        /// <param name="location"></param>
        [Route("api/Account/updateAddTitleDetails")]
        [HttpPost]
        public void updateAddTitleDetails(AddTitle Title)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "UPDATE  addtitle SET TitleName='" + Title.TitleName + "' where TitleId='" + Title.TitleId + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getcorporatedetails
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        /// <returns></returns>

        [Route("api/Account/getcorporatedetails")]
        [HttpGet]

        public List<corporate> getcorporatedetails()
        {
            List<corporate> lstCorporate = new List<corporate>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  corporate";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {

                            corporate corporate = new corporate();
                            corporate.corporateId = (int)dr["corporateId"];
                            corporate.Corporatename = dr["Corporatename"].ToString();


                            lstCorporate.Add(corporate);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCorporate;
            }
        }
        #endregion


        #region updatecorporateDetails
        /// <summary>
        /// Table - Location
        /// </summary>
        /// Inserted the Location details
        /// <param name="location"></param>
        [Route("api/Account/updatecorporateDetails")]
        [HttpPost]
        public void updatecorporateDetails(corporate corporate)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = "UPDATE  corporate SET Corporatename='" + corporate.Corporatename + "' where corporateId='" + corporate.corporateId + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getCollectedAt
        /// <summary>
        ///  Table - collectedAt
        /// </summary>
        ///
        /// <param name="regId"></param>
        /// <returns></returns>
        [Route("api/Account/getCollectedAt")]
        [HttpGet]
        public List<CollectedAt> getCollectedAt()
        {
            List<CollectedAt> lstCollectedDetails = new List<CollectedAt>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM  Doctor where RegID='" + regId + "' ";
                    string strSQL = "SELECT * FROM  collectedat";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            CollectedAt collectedatDetails = new CollectedAt();
                            collectedatDetails.CollectedId = (int)dr["CollectedId"];
                            collectedatDetails.RegID = (int)dr["RegID"];
                            collectedatDetails.CollectedName = dr["CollectedName"].ToString();
                            //  collectedatDetails.Date = dr["Date"].ToString();
                            collectedatDetails.Amount = (int)(dr["Amount"]);

                            lstCollectedDetails.Add(collectedatDetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstCollectedDetails;
            }
        }
        #endregion

        #region updateCollectedAtDetails
        /// <summary>
        /// Table - collectedat
        /// </summary>
        /// Inserted the Location details
        /// <param name="location"></param>
        [Route("api/Account/updateCollectedAtDetails")]
        [HttpPost]
        public void updateCollectedAtDetails(CollectedAt collectedat)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {


                    string strSQL = " ";
                    conn.Open();
                    if (collectedat.CollectFlag == 1)
                    {
                        strSQL = "UPDATE  collectedat SET CollectedName='" + collectedat.CollectedName + "', Amount= '" + collectedat.Amount + "' where CollectedId = '" + collectedat.CollectedId + "'";
                    }
                    else if (collectedat.CollectFlag == 2)
                    {
                        strSQL = "delete from collectedat where CollectedId = '" + collectedat.CollectedId + "'";
                    }
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllDoctorDetails

        /// <summary>
        /// TABLE-DOCTOR
        /// </summary>
        /// To get all records from LabOrder table.
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllDoctorDetails")]
        [HttpGet]

        public List<Doctor> getAllDoctorDetails(string doctorname, int Flag)
        {
            List<Doctor> lstDoctorDetails = new List<Doctor>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from doctor where DoctorName  LIKE'%" + doctorname + "%'";
                    conn.Open();
                    if (Flag == 1)
                    {
                        strSQL = "SELECT * from doctor where DoctorName  LIKE'%" + doctorname + "%'";
                    }
                    else if (Flag == 2)
                    {
                        strSQL = "SELECT * from doctor";
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Doctor doctordetails = new Doctor();
                            doctordetails.DoctorId = (int)dr["DoctorId"];
                            doctordetails.DoctorName = dr["DoctorName"].ToString();
                            doctordetails.EmailId = dr["EmailId"].ToString();
                            doctordetails.RegID = (int)dr["RegID"];
                            doctordetails.PhoneNo = (int)dr["PhoneNo"];
                            if (dr["MailRequired"] != DBNull.Value)
                            {
                                doctordetails.MailRequired = dr["MailRequired"].ToString();
                            }
                            else
                            {
                                doctordetails.MailRequired = "";
                            }
                            lstDoctorDetails.Add(doctordetails);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }

        #endregion

        #region updateDoctorDetails
        /// <summary>
        /// Table - collectedat
        /// </summary>
        /// Inserted the Location details
        /// <param name="location"></param>
        [Route("api/Account/updateDoctorDetails")]
        [HttpPost]
        public void updateDoctorDetails(Doctor doctor)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  doctor SET DoctorName='" + doctor.DoctorName + "', EmailId= '" + doctor.EmailId + "',PhoneNo='" + doctor.PhoneNo + "' " +
                                    " ,MailRequired='" + doctor.MailRequired + "' where DoctorId = '" + doctor.DoctorId + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region deleteDoctorDetails
        /// <summary>
        [Route("api/Account/deleteDoctorDetails")]
        [HttpPost]
        public void deleteDoctorDetails(Doctor doctor)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "delete from doctor where DoctorId = '" + doctor.DoctorId + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region deleteForDeptDetails
        /// <summary>
        [Route("api/Account/deleteForDeptDetails")]
        [HttpPost]
        public void deleteForDeptDetails(Department departmentDetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "delete from department where DepartmentID = '" + departmentDetails.DepartmentID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getallpatientregistrationdetails
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getallpatientregistrationdetails")]
        [HttpGet]
        public List<PatientRegistration> getallpatientregistrationdetails()
        {
            List<PatientRegistration> lstregistrationDetails = new List<PatientRegistration>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM  patientregistration";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PatientRegistration patientRegistration = new PatientRegistration();

                            patientRegistration.RegID = (dr["RegID"]).ToString();
                            patientRegistration.PatientID = (dr["RegID"]).ToString(); ;
                            patientRegistration.Title = dr["Title"].ToString();
                            patientRegistration.FirstName = dr["FirstName"].ToString();
                            patientRegistration.MiddleName = dr["MiddleName"].ToString();
                            patientRegistration.LastName = dr["LastName"].ToString();
                            //patientRegistration.Guardian = dr["Guardian"].ToString();
                            //patientRegistration.Relation = dr["Relation"].ToString();
                            //patientRegistration.PatientType = dr["PatientType"].ToString();
                            patientRegistration.Sex = dr["Sex"].ToString();
                            patientRegistration.MaritalStatus = dr["MaritalStatus"].ToString();
                            patientRegistration.DOB = dr["DOB"].ToString();
                            patientRegistration.Age = dr["age"].ToString();
                            patientRegistration.PhoneNumber = dr["PhoneNumber"].ToString();
                            patientRegistration.ContactEmail = dr["ContactEmail"].ToString();
                            //patientRegistration.DateOfReg = dr["DateOfReg"].ToString();
                            //patientRegistration.ProfilePicture =
                            //patientRegistration.SpecialComments =dr["SpecialComments"].ToString();
                            //patientRegistration.AgeDay = (int)dr["AgeDay"];
                            //patientRegistration.AgeMonth = (int)dr["AgeMonth"];
                            //patientRegistration.AgeYear = (int)dr["AgeYear"];
                            //patientRegistration.UnknownAge = (int)dr["UnknownAge"];
                            //patientRegistration.AgeCategory = dr["AgeCategory"].ToString();

                            lstregistrationDetails.Add(patientRegistration);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstregistrationDetails;
            }
        }
        #endregion


        #region updatepatientdetailsinfo
        /// <summary>
        /// Table - collectedat
        /// </summary>
        /// Inserted the Location details
        /// <param name="location"></param>
        [Route("api/Account/updatepatientdetailsinfo")]
        [HttpPost]
        public void updatepatientdetailsinfo(PatientRegistration patientdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE  patientregistration SET Title='" + patientdetails.Title + "', FirstName='" + patientdetails.FirstName + "', " +
                        " MiddleName='" + patientdetails.MiddleName + "', LastName='" + patientdetails.LastName + "', MaritalStatus='" + patientdetails.MaritalStatus + "', " +
                        " PhoneNumber='" + patientdetails.PhoneNumber + "',ContactEmail='" + patientdetails.ContactEmail + "',Sex='" + patientdetails.Sex + "', " +
                        " DOB='" + patientdetails.DOB.ToString() + "', Age='" + patientdetails.Age + "'" +
                        " where RegID='" + patientdetails.RegID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion



        #region insertProfileWithInSubProfile
        /// <summary>
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/insertProfileWithInSubProfile")]
        [HttpPost]
        public void insertProfileWithInSubProfile(ProfileWithinProfile profilewithinprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO profilewithinprofile(MainProfileId,MainProfileCode,SubProfileId,SubProfileCode,SubProfileName,flag,ProfilePriority) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", profilewithinprofile.MainProfileId);
                    cmd.Parameters.AddWithValue("@val2", profilewithinprofile.MainProfileCode);
                    cmd.Parameters.AddWithValue("@val3", profilewithinprofile.SubProfileId);
                    cmd.Parameters.AddWithValue("@val4", profilewithinprofile.SubProfileCode);
                    cmd.Parameters.AddWithValue("@val5", profilewithinprofile.SubProfileName);
                    cmd.Parameters.AddWithValue("@val6", profilewithinprofile.flag);
                    cmd.Parameters.AddWithValue("@val7", profilewithinprofile.ProfilePriority);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion


        #region getprofileIdWithInProfile

        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getprofileIdWithInProfile")]
        [HttpGet]

        public List<ProfileWithinProfile> getprofileIdWithInProfile()
        {
            List<ProfileWithinProfile> lstProfileId = new List<ProfileWithinProfile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from  profilewithinprofile where flag ='1'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ProfileWithinProfile profile = new ProfileWithinProfile();
                            profile.ID = (int)dr["ID"];
                            lstProfileId.Add(profile);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfileId;
            }
        }

        #endregion

        //END


        #region updateMainProfileId

        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name=""></param>
        [Route("api/Account/updateMainProfileId")]
        [HttpPost]
        public void updateMainProfileId(ProfileWithinProfile profileDetails)
        {
            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    conns.Open();
                    DataTable dts = new DataTable();
                    string strSQL1 = "UPDATE  profilewithinprofile SET flag='2' ,MainProfileCode='" + profileDetails.MainProfileCode + "'  where ID='" + profileDetails.ID + "'";
                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                    cmd1.ExecuteNonQuery();
                }

                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }

        }

        #endregion


        #region getMaxProfileCode
        /// <summary>
        /// Table - masterprofilelist
        /// </summary>
        /// Listed all values from masterprofilelist table
        /// <returns></returns>
        [Route("api/Account/getMaxProfileCode")]
        [HttpGet]
        public MasterProfileList getMaxProfileCode()
        {
            MasterProfileList masterProfileList = new MasterProfileList();
            // MasterProfileList lstProfiles = new MasterProfileList();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT max(ProfileID) FROM  createprofile";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {


                            masterProfileList.ProfileCode = dr["max(ProfileID)"].ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return masterProfileList;
            }
        }
        #endregion


        #region insertTestDetailsInProfile
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertTestDetailsInProfile")]
        [HttpPost]
        public void insertTestDetailsInProfile(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //DateTime today = DateTime.Today;
                    //addprofile.CreateDate = today.ToShortDateString();
                    string strSQL = "INSERT INTO addprofile(TestName,TestCode,flag,SubProfileCode,SubProfileName) VALUES(@val1,@val2,@val3,@val4,@val5)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", addprofile.TestName);
                    cmd.Parameters.AddWithValue("@val2", addprofile.TestCode);
                    cmd.Parameters.AddWithValue("@val3", addprofile.flag);
                    cmd.Parameters.AddWithValue("@val4", addprofile.SubProfileCode);
                    cmd.Parameters.AddWithValue("@val5", addprofile.SubProfileName);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region selectflagListInAddProfile

        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/selectflagListInAddProfile")]
        [HttpGet]

        public List<Addprofile> selectflagListInAddProfile()
        {
            List<Addprofile> lstProfileId = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from  createprofile";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profile = new Addprofile();
                            profile.ProfileID = (int)dr["ProfileID"];
                            lstProfileId.Add(profile);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfileId;
            }
        }

        #endregion


        #region updateProfileCode
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/updateProfileCode")]
        [HttpPost]
        public void updateProfileCode(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DateTime today = DateTime.Today;
                    addprofile.CreateDate = today.ToShortDateString();
                    string strSQL = "UPDATE  createprofile SET ProfileName='" + addprofile.ProfileName + "', ProfileCode= '" + addprofile.ProfileCode + "',Amount='" + addprofile.Amount + "',CreateDate ='" + addprofile.CreateDate + "' where ProfileID = '" + addprofile.ProfileID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getAllTestDeatailsWithProfileCode

        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllTestDeatailsWithProfileCode")]
        [HttpGet]

        public List<Addprofile> getAllTestDeatailsWithProfileCode(string profileCode)
        {
            List<Addprofile> lstProfileId = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from  createprofile where ProfileCode ='" + profileCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profile = new Addprofile();
                            profile.ProfileID = (int)dr["ProfileID"];
                            profile.ProfileName = dr["ProfileName"].ToString();
                            profile.ProfileCode = dr["ProfileCode"].ToString();
                            profile.SubProfileCode = dr["SubProfileCode"].ToString();
                            profile.TestCode = dr["TestCode"].ToString();
                            profile.TestName = dr["TestName"].ToString();
                            if (dr["TestPriority"] != DBNull.Value)
                            {
                                profile.TestPriority = (double)dr["TestPriority"];
                            }
                            else
                            {
                                profile.TestPriority = 0;
                            }
                            //  profile.TestPriority = (double)dr["TestPriority"];
                            lstProfileId.Add(profile);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfileId;
            }
        }

        #endregion


        #region getAllTestDeatailsforSubProfile

        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllTestDeatailsforSubProfile")]
        [HttpGet]

        public List<Addprofile> getAllTestDeatailsforSubProfile()
        {
            List<Addprofile> lstProfileId = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select distinct ProfileName,ProfileCode from  createprofile";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profile = new Addprofile();
                            // profile.ProfileID = (int)dr["ProfileID"];
                            profile.ProfileName = dr["ProfileName"].ToString();
                            profile.ProfileCode = dr["ProfileCode"].ToString();
                            lstProfileId.Add(profile);


                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfileId;
            }
        }

        #endregion


        #region updateTestPriority
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/updateTestPriority")]
        [HttpPost]
        public void updateTestPriority(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "UPDATE  createprofile SET Priority='" + addprofile.TestPriority + "'  where ProfileID = '" + addprofile.ProfileID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getAllTestDeatailsNotInSubProfile

        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllTestDeatailsNotInSubProfile")]
        [HttpGet]

        public List<Addprofile> getAllTestDeatailsNotInSubProfile(string profileCode)
        {
            List<Addprofile> lstProfileId = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from  createprofile where ProfileCode ='" + profileCode + "' AND SubProfileCode = 'NA'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profile = new Addprofile();
                            profile.ProfileID = (int)dr["ProfileID"];
                            profile.ProfileName = dr["ProfileName"].ToString();
                            profile.ProfileCode = dr["ProfileCode"].ToString();
                            profile.TestCode = dr["Amount"].ToString();
                            profile.TestName = dr["CreateDate"].ToString();
                            if (dr["Priority"] != DBNull.Value)
                            {
                                profile.Priority = (double)dr["Priority"];
                            }
                            else
                            {
                                profile.Priority = 0;
                            }
                            //   profile.TestPriority = (double)dr["TestPriority"];
                            lstProfileId.Add(profile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfileId;
            }
        }

        #endregion


        #region getAllTestDeatailsOnlySubProfile

        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllTestDeatailsOnlySubProfile")]
        [HttpGet]

        public List<Addprofile> getAllTestDeatailsOnlySubProfile(string profileCode)
        {
            List<Addprofile> lstProfileId = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from  createprofile where ProfileCode ='" + profileCode + "' AND SubProfileCode != 'NA'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profile = new Addprofile();
                            profile.ProfileID = (int)dr["ProfileID"];
                            profile.ProfileName = dr["ProfileName"].ToString();
                            profile.ProfileCode = dr["ProfileCode"].ToString();
                            profile.TestCode = dr["Amount"].ToString();
                            profile.TestName = dr["CreateDate"].ToString();
                            if (dr["Priority"] != DBNull.Value)
                            {
                                profile.Priority = (double)dr["Priority"];
                            }
                            else
                            {
                                profile.Priority = 0;
                            }
                            //   profile.TestPriority = (double)dr["TestPriority"];
                            lstProfileId.Add(profile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstProfileId;
            }
        }

        #endregion


        #region insertSampleForHosp
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/insertSampleForHosp")]
        [HttpPost]
        public void insertSampleForHosp(SampleCollect sampleCollect)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    int count = 0;
                    string query = "Select count(*) as TotalCount from samplecollecter where MrdNo='" + sampleCollect.MrdNo + "' and TestCode='" + sampleCollect.TestCode + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    //foreach (DataRow dr in dt.Rows)
                    // {
                    // if (dr != null)
                    // {
                    count = Convert.ToInt32(dt.Rows[0]["TotalCount"].ToString());

                    if (count == 0)
                    {
                        string strSQL = "INSERT INTO samplecollecter(MrdNo,SampleName,TestCode,TestName,ProfileCode,ProfileName,collected,Notcollected,Later) VALUES(@val1,@val2,@val3,@val11,@val4,@val5,@val6,@val7,@val8)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", sampleCollect.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", sampleCollect.SampleName);
                        cmd.Parameters.AddWithValue("@val3", sampleCollect.TestCode);
                        cmd.Parameters.AddWithValue("@val11", sampleCollect.TestName);
                        cmd.Parameters.AddWithValue("@val4", sampleCollect.ProfileCode);
                        cmd.Parameters.AddWithValue("@val5", sampleCollect.ProfileName);
                        cmd.Parameters.AddWithValue("@val6", sampleCollect.collected);
                        cmd.Parameters.AddWithValue("@val7", sampleCollect.Notcollected);
                        cmd.Parameters.AddWithValue("@val8", sampleCollect.Later);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    //  }
                    //  }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region InsertSampleContainerDetails
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/InsertSampleContainerDetails")]
        [HttpPost]
        public void InsertSampleContainerDetails(SampleCollect sampleCollect)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string count = "0";
                    string query = "Select count(*) from samplecollecter where MrdNo='" + sampleCollect.MrdNo + "' and TestCode='" + sampleCollect.TestCode + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            count = dr[0].ToString();
                        }
                    }
                    if (count == "0")
                    {
                        string strSQL = "INSERT INTO samplecollecter(MrdNo,SampleName,TestCode,TestName,ProfileCode,ProfileName,collected,Notcollected,Later) VALUES(@val1,@val2,@val3,@val11,@val4,@val5,@val6,@val7,@val8)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", sampleCollect.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", sampleCollect.SampleName);
                        cmd.Parameters.AddWithValue("@val3", sampleCollect.TestCode);
                        cmd.Parameters.AddWithValue("@val11", sampleCollect.TestName);
                        cmd.Parameters.AddWithValue("@val4", sampleCollect.ProfileCode);
                        cmd.Parameters.AddWithValue("@val5", sampleCollect.ProfileName);
                        cmd.Parameters.AddWithValue("@val6", sampleCollect.collected);
                        cmd.Parameters.AddWithValue("@val7", sampleCollect.Notcollected);
                        cmd.Parameters.AddWithValue("@val8", sampleCollect.Later);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region getsampleId
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getsampleId")]
        [HttpGet]

        public List<SampleCollect> getsampleId(string Mrdno, string samplename)
        {
            List<SampleCollect> lstsampleId = new List<SampleCollect>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select SampleCollecterId  from  samplecollecter where MrdNo ='" + Mrdno + "' AND sampleName ='" + samplename + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            SampleCollect sample = new SampleCollect();
                            sample.SampleCollecterId = (int)dr["SampleCollecterId"]; ;
                            lstsampleId.Add(sample);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstsampleId;
            }
        }

        #endregion

        #region updateSampleStatus

        [Route("api/Account/updateSampleStatus")]
        [HttpPost]
        public void updateSampleStatus(SampleCollect sample)
        {
            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL1 = "";
                    conns.Open();
                    DataTable dts = new DataTable();
                    if (sample.collected == "1")
                    {
                        strSQL1 = "UPDATE  samplecollecter SET collected='" + sample.collected + "',Notcollected ='0',Later='0',CollectedDate='" + DateTime.Now + "' where SampleCollecterId='" + sample.SampleCollecterId + "'";
                    }
                    else if (sample.collected == "2")
                    {
                        strSQL1 = "UPDATE  samplecollecter SET Notcollected='" + sample.collected + "',collected ='0',Later='0',CollectedDate='" + DateTime.Now + "' where SampleCollecterId='" + sample.SampleCollecterId + "'";
                    }
                    else
                    {
                        strSQL1 = "UPDATE  samplecollecter SET Later='" + sample.collected + "',collected ='0',Notcollected='0',CollectedDate='" + DateTime.Now + "' where SampleCollecterId='" + sample.SampleCollecterId + "'";
                    }
                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                    cmd1.ExecuteNonQuery();

                    string statusUpdate = "UPDATE LaborderStatus SET LabStatus='2',SampleStatus='1' where MrdNo='" + sample.MrdNo + "'";
                    MySqlCommand Updatecmd = new MySqlCommand(statusUpdate, conns);
                    Updatecmd.CommandType = CommandType.Text;
                    Updatecmd.ExecuteNonQuery();

                }

                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }

        }
        #endregion

        #region getIdForRejSample
        [Route("api/Account/getIdForRejSample")]
        [HttpGet]
        public List<ViewListDetails> getIdForRejSample(string Mrdno, string TestCode, string sampleName)
        {
            List<ViewListDetails> returnList = new List<ViewListDetails>();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                conn.Open();
                try
                {
                    string Sql = "select TestCode from samplecollecter where mrdNo = '" + Mrdno + "' and sampleName='" + sampleName + "' and collected = 0";
                    MySqlDataAdapter samData = new MySqlDataAdapter(Sql, conn);
                    MySqlCommandBuilder samCmd = new MySqlCommandBuilder(samData);
                    DataSet samDs = new DataSet();
                    DataTable samDt = new DataTable();
                    samData.Fill(samDs);
                    samDt = samDs.Tables[0];
                    if (samDt.Rows.Count > 0)
                    {
                        foreach (DataRow dr1 in samDt.Rows)
                        {
                            string idSql = "select ID,TestName,TestCodeRef from viewlistdetails where mrdNo = '" + Mrdno + "' and TestCode = '" + dr1["TestCode"].ToString() + "' and Reject = 1";
                            MySqlDataAdapter mydata = new MySqlDataAdapter(idSql, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            DataTable dt = new DataTable();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    ViewListDetails sample = new ViewListDetails();
                                    sample.ID = Convert.ToInt32(dr["ID"].ToString());
                                    sample.TestName = dr["TestName"].ToString();
                                    sample.TestCode = dr["TestCodeRef"].ToString();
                                    returnList.Add(sample);
                                }
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return returnList;
            }
        }
        #endregion

        #region updateRejectedSampStatus

        [Route("api/Account/updateRejectedSampStatus")]
        [HttpPost]
        public void updateRejectedSampStatus(SampleCollect sample)
        {

            using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL1 = "";
                    string statusUpdate = "";
                    string viewUpdate = "";
                    conns.Open();
                    DataTable dts = new DataTable();
                    if (sample.collected == "1")
                    {
                        // strSQL1 = "UPDATE  rejectedsamplecollecter SET collected='" + sample.collected + "',Notcollected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and TestCode='"+sample.TestCode+"'";
                        strSQL1 = "UPDATE  rejectedsamplecollecter SET collected='" + sample.collected + "',Notcollected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and sampleName='" + sample.SampleName + "'";
                    }
                    else if (sample.collected == "2")
                    {
                        //strSQL1 = "UPDATE  rejectedsamplecollecter SET Notcollected='" + sample.collected + "',collected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "'";
                        strSQL1 = "UPDATE  rejectedsamplecollecter SET Notcollected='" + sample.collected + "',collected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and sampleName='" + sample.SampleName + "'";
                    }
                    else
                    {
                        //strSQL1 = "UPDATE  rejectedsamplecollecter SET Later='" + sample.collected + "',collected ='0',Notcollected='0' where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "'";
                        strSQL1 = "UPDATE  rejectedsamplecollecter SET Later='" + sample.collected + "',collected ='0',Notcollected='0' where MrdNo='" + sample.MrdNo + "'and sampleName='" + sample.SampleName + "'";
                    }
                    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conns);
                    cmd1.ExecuteNonQuery();


                    if (sample.collected == "1")
                    {
                        //statusUpdate = "UPDATE  samplecollecter SET collected='" + sample.collected + "',Notcollected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "'";
                        statusUpdate = "UPDATE  samplecollecter SET collected='" + sample.collected + "',Notcollected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and sampleName='" + sample.SampleName + "'";
                    }
                    else if (sample.collected == "2")
                    {
                        //statusUpdate = "UPDATE  samplecollecter SET Notcollected='" + sample.collected + "',collected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "'";
                        statusUpdate = "UPDATE  samplecollecter SET Notcollected='" + sample.collected + "',collected ='0',Later='0' where MrdNo='" + sample.MrdNo + "' and sampleName='" + sample.SampleName + "'";
                    }
                    else
                    {
                        //statusUpdate = "UPDATE  samplecollecter SET Later='" + sample.collected + "',collected ='0',Notcollected='0' where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "'";
                        statusUpdate = "UPDATE  samplecollecter SET Later='" + sample.collected + "',collected ='0',Notcollected='0' where MrdNo='" + sample.MrdNo + "' and sampleName='" + sample.SampleName + "'";
                    }

                    MySqlCommand Updatecmd = new MySqlCommand(statusUpdate, conns);
                    Updatecmd.CommandType = CommandType.Text;
                    Updatecmd.ExecuteNonQuery();


                    //string strSQL = "select *  from  viewlistdetails where MrdNo='" + sample.MrdNo + "' and RejectAll=1 and Reject=1";                   
                    //MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conns);
                    //MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    //DataSet ds = new DataSet();
                    //DataTable dt = new DataTable();
                    //mydata.Fill(ds);
                    //dt = ds.Tables[0];
                    //if (dt.Rows.Count > 0)
                    //{
                    //    foreach (DataRow dr in dt.Rows)
                    //    {
                    //        if (dr != null)
                    //        {
                    //            if (sample.collected == "1")
                    //            {

                    //                viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and ID=" + dr["ID"] + "";
                    //            }
                    //            else if (sample.collected == "2")
                    //            {                                   
                    //                viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and ID=" + dr["ID"] + "";
                    //            }
                    //            else
                    //            {                                   
                    //                viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and ID=" + dr["ID"] + "";
                    //            }
                    //            MySqlCommand viewUpdateCmd = new MySqlCommand(viewUpdate, conns);
                    //            viewUpdateCmd.CommandType = CommandType.Text;
                    //            viewUpdateCmd.ExecuteNonQuery();
                    //        }
                    //    }
                    //}
                    //else
                    {
                        if (sample.collected == "1")
                        {
                            //viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "' and TestName='"+ sample .TestName+ "' and ID="+sample.TestID+"";
                            viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and ID=" + sample.TestID + "";
                        }
                        else if (sample.collected == "2")
                        {
                            //viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "' and TestName='" + sample.TestName + "' and ID=" + sample.TestID + "";
                            viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and ID=" + sample.TestID + "";
                        }
                        else
                        {
                            //viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and TestCode='" + sample.TestCode + "' and TestName='" + sample.TestName + "' and ID=" + sample.TestID + "";
                            viewUpdate = "UPDATE  viewlistdetails SET Reject=0,RejectAll=0 where MrdNo='" + sample.MrdNo + "' and ID=" + sample.TestID + "";
                        }
                        MySqlCommand viewUpdateCmd = new MySqlCommand(viewUpdate, conns);
                        viewUpdateCmd.CommandType = CommandType.Text;
                        viewUpdateCmd.ExecuteNonQuery();
                    }
                }

                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }

        }
        #endregion

        #region getsampleStatus
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getsampleStatus")]
        [HttpGet]

        public List<SampleCollect> getsampleStatus(string mrdno)
        {
            List<SampleCollect> lstsampleId = new List<SampleCollect>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select *  from  samplecollecter where MrdNo ='" + mrdno + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            SampleCollect sample = new SampleCollect();
                            sample.SampleContainer = dr["SampleName"].ToString();
                            sample.collected = dr["collected"].ToString();
                            sample.Notcollected = dr["Notcollected"].ToString();
                            sample.Later = dr["Later"].ToString();
                            sample.MrdNo = dr["MrdNo"].ToString();
                            sample.Later = dr["Later"].ToString();
                            sample.TestCode = dr["TestCode"].ToString();
                            sample.TestName = dr["TestName"].ToString();
                            sample.ProfileCode = dr["ProfileCode"].ToString();
                            sample.ProfileName = dr["ProfileName"].ToString();
                            lstsampleId.Add(sample);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstsampleId;
            }
        }

        #endregion

        #region checkforRejectedAll

        [Route("api/Account/checkforRejectedAll")]
        [HttpGet]
        public int checkforRejectedAll(string mrdno)
        {
            int rejectedCount = 0;
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select *  from  viewlistdetails where MrdNo ='" + mrdno + "' and RejectAll=1 and Reject=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        rejectedCount = 1;
                    }
                    else
                    {
                        rejectedCount = 0;
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return rejectedCount;
            }
        }

        #endregion

        #region getRejectedSamples

        [Route("api/Account/getRejectedSamples")]
        [HttpGet]
        public List<SampleCollect> getRejectedSamples(string mrdno, int checkFlag, string TestCode, int updFlag)
        {
            List<SampleCollect> lstsampleId = new List<SampleCollect>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (checkFlag == 1)
                    {
                        if (updFlag == 1)
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "'";
                        }
                        else
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "' and collected=0 and Notcollected=0 and Later=0";
                        }

                    }
                    else if (checkFlag == 2)
                    {
                        //strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "' and collected=1 and TestCode='"+ TestCode + "'";
                        if (updFlag == 1)
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "'";
                        }
                        else
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "' and collected=0 and Notcollected=0 and Later=0";
                        };
                    }
                    else if (checkFlag == 3)
                    {
                        //strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "' and Notcollected=1 and TestCode='" + TestCode + "'";
                        if (updFlag == 1)
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "'";
                        }
                        else
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "' and collected=0 and Notcollected=0 and Later=0";
                        }
                    }
                    else if (checkFlag == 4)
                    {
                        //strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "' and Later=1 and TestCode='" + TestCode + "'";
                        if (updFlag == 1)
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "'";
                        }
                        else
                        {
                            strSQL = "select *  from  rejectedsamplecollecter where MrdNo ='" + mrdno + "' and collected=0 and Notcollected=0 and Later=0";
                        }
                    }

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            SampleCollect sample = new SampleCollect();
                            sample.SampleContainer = dr["SampleName"].ToString();
                            sample.collected = dr["collected"].ToString();
                            sample.Notcollected = dr["Notcollected"].ToString();
                            sample.Later = dr["Later"].ToString();
                            sample.MrdNo = dr["MrdNo"].ToString();
                            sample.TestCode = dr["TestCode"].ToString();
                            sample.TestName = dr["TestName"].ToString();
                            sample.ProfileCode = dr["ProfileCode"].ToString();
                            sample.ProfileName = dr["ProfileName"].ToString();
                            lstsampleId.Add(sample);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstsampleId;
            }
        }

        #endregion

        #region getAllProfileDetailsForPriority
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllProfileDetailsForPriority")]
        [HttpGet]
        public List<Addprofile> getAllProfileDetailsForPriority()
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT distinct(ProfileCode),ProfileName,Priority,Amount,DisplayName FROM  createprofile order by Priority";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profileDetails = new Addprofile();
                            profileDetails.ProfileCode = dr["ProfileCode"].ToString();
                            profileDetails.ProfileName = dr["ProfileName"].ToString();
                            profileDetails.Amount = (double)dr["Amount"];
                            if (dr["Priority"] != DBNull.Value)
                            {
                                profileDetails.ProfilePriority = (double)dr["Priority"];
                            }
                            else
                            {
                                profileDetails.ProfilePriority = 0.0;
                            }
                            profileDetails.DisplayName = dr["DisplayName"].ToString();
                            lstDetails.Add(profileDetails);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }


        #endregion


        #region getAllProfileDetailsForPrioritybyMrd
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllProfileDetailsForPrioritybyMrd")]
        [HttpGet]
        public List<Addprofile> getAllProfileDetailsForPrioritybyMrd(string pCode)
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT distinct(ProfileCode),ProfileName,Priority,Amount FROM  createprofile where ProfileCode !='" + pCode + "' order by Priority";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profileDetails = new Addprofile();
                            profileDetails.ProfileCode = dr["ProfileCode"].ToString();
                            profileDetails.ProfileName = dr["ProfileName"].ToString();
                            profileDetails.Amount = (double)dr["Amount"];
                            if (dr["Priority"] != DBNull.Value)
                            {
                                profileDetails.ProfilePriority = (double)dr["Priority"];
                            }
                            else
                            {
                                profileDetails.ProfilePriority = 0.0;
                            }
                            lstDetails.Add(profileDetails);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }


        #endregion

        #region getAllProfileDetailsForPrioritybyMrdone
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllProfileDetailsForPrioritybyMrdone")]
        [HttpGet]
        public List<Addprofile> getAllProfileDetailsForPrioritybyMrdone(string pCode)
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT distinct(ProfileCode),ProfileName,Priority,Amount FROM  createprofile where ProfileName ='" + pCode + "' order by Priority";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Addprofile profileDetails = new Addprofile();
                            profileDetails.ProfileCode = dr["ProfileCode"].ToString();
                            profileDetails.ProfileName = dr["ProfileName"].ToString();
                            profileDetails.Amount = (double)dr["Amount"];
                            if (dr["Priority"] != DBNull.Value)
                            {
                                profileDetails.ProfilePriority = (double)dr["Priority"];
                            }
                            else
                            {
                                profileDetails.ProfilePriority = 0.0;
                            }
                            lstDetails.Add(profileDetails);

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }


        #endregion

        #region UpdateProfilePriority
        /// <summary>
        /// Modified by nandhini on 02/08/2018 to update the priority in profile details.
        /// </summary>
        ///
        /// <returns></returns>

        [Route("api/Account/UpdateProfilePriority")]
        [HttpPost]
        public void UpdateProfilePriority(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                //try
                //{
                //    string strSQL = "";

                //    strSQL = "UPDATE  createprofile SET Priority='" + addprofile.ProfilePriority + "',Amount='" + addprofile.Amount + "' where ProfileCode='" + addprofile.ProfileCode + "'";

                //    conn.Open();
                //    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                //    cmd.CommandType = CommandType.Text;
                //    cmd.ExecuteNonQuery();
                //}
                //catch (Exception Ex)
                //{
                //    string logdetails = Ex.InnerException.ToString();
                //}

                try
                {
                    conn.Open();
                    DataTable dts = new DataTable();
                    string priorityvalue = addprofile.ProfilePriority.ToString();

                    if (priorityvalue == "0")
                    {
                        string strSQL1 = "UPDATE  createprofile SET Priority='" + addprofile.ProfilePriority + "',Amount='" + addprofile.Amount + "' where ProfileCode='" + addprofile.ProfileCode + "'";
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        double d = addprofile.ProfilePriority;
                        if ((d - (int)d) != 0 && d < 1)
                        {
                            string[] parts = priorityvalue.Split('.');
                            string i1 = parts[0].ToString();
                            string i2 = parts[1].ToString();
                            if (i2.Length == 1)
                            {
                                double value = addprofile.ProfilePriority;
                                double number = value / 100;
                                string strSQL1 = "UPDATE  createprofile SET Priority='" + number + "',Amount='" + addprofile.Amount + "' where ProfileCode='" + addprofile.ProfileCode + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                cmd1.CommandType = CommandType.Text;
                                cmd1.ExecuteNonQuery();
                            }
                            else if (i2.Length == 2)
                            {
                                double value = addprofile.ProfilePriority;
                                double number = value / 10;
                                string strSQL1 = "UPDATE  createprofile SET Priority='" + number + "',Amount='" + addprofile.Amount + "' where ProfileCode='" + addprofile.ProfileCode + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                cmd1.CommandType = CommandType.Text;
                                cmd1.ExecuteNonQuery();
                            }
                            else
                            {
                                double number = addprofile.ProfilePriority;
                                string strSQL1 = "UPDATE  createprofile SET Priority='" + number + "',Amount='" + addprofile.Amount + "' where ProfileCode='" + addprofile.ProfileCode + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                cmd1.CommandType = CommandType.Text;
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        else
                        {
                            double number = addprofile.ProfilePriority;
                            string strSQL1 = "UPDATE  createprofile SET Priority='" + number + "',Amount='" + addprofile.Amount + "' where ProfileCode='" + addprofile.ProfileCode + "'";
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.CommandType = CommandType.Text;
                            cmd1.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }


        #endregion

        #region DeleteProfilePriority
        /// <summary>
        /// DeleteProfilePriority added by kalif
        /// </summary>
        /// <param name="addprofile"></param>
        [Route("api/Account/DeleteProfilePriority")]
        [HttpPost]
        public void DeleteProfilePriority(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    strSQL = "Delete FROM createprofile  where ProfileCode='" + addprofile.ProfileCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }


        #endregion

        #region insertPathoStatus
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/insertPathoStatus")]
        [HttpPost]
        public void insertPathoStatus(pathostatus statusDetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string count = "0";
                    string query = "Select count(*) from pathostatus where MrdNo='" + statusDetails.MrdNo + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            count = dr[0].ToString();
                        }
                    }
                    if (count == "0")
                    {
                        string strSQL = "INSERT INTO pathostatus(MrdNo,sampleid,labstatus) VALUES(@val1,@val2,@val3)";
                        conn.Open();
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", statusDetails.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", statusDetails.sampleid);
                        cmd.Parameters.AddWithValue("@val3", statusDetails.labstatus);
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        //conn.Open();
                        //string strSQL = "Update samplecollecter set MrdNo='" + sampleCollect.MrdNo + "' Where MrdNo='" + sampleCollect.MrdNo + "'";
                        //MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        //cmd.CommandType = CommandType.Text;
                        //cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertPathoStatusForHos
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/insertPathoStatusForHos")]
        [HttpPost]
        public void insertPathoStatusForHos(pathostatus statusDetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string count = "0";
                    string query = "Select count(*) from pathostatus where MrdNo='" + statusDetails.MrdNo + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            count = dr[0].ToString();
                        }
                    }
                    if (count == "0")
                    {
                        string strSQL = "INSERT INTO pathostatus(MrdNo,sampleid,labstatus) VALUES(@val1,@val2,@val3)";
                        conn.Open();
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", statusDetails.MrdNo);
                        cmd.Parameters.AddWithValue("@val2", statusDetails.sampleid);
                        cmd.Parameters.AddWithValue("@val3", statusDetails.labstatus);
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        //conn.Open();
                        //string strSQL = "Update samplecollecter set MrdNo='" + sampleCollect.MrdNo + "' Where MrdNo='" + sampleCollect.MrdNo + "'";
                        //MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        //cmd.CommandType = CommandType.Text;
                        //cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getTodayLaborderStatusLocationAndDate
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/getTodayLaborderStatusLocationAndDate")]
        [HttpGet]
        public List<LabOrderInprogressList> getTodayLaborderStatusLocationAndDate(string locationCode, string from, string to)
        {
            List<LabOrderInprogressList> lstLabInprogressDetails = new List<LabOrderInprogressList>();



            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //  string strSQL = "SELECT lo.PatientName, ls.MrdNo, ls.LabStatus FROM  laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo where ls.LabStatus = 'Inprogress'";

                    //string strSQL = "SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,lo.LocationName, pr.Age, pr.Sex,lo.ProviderName " +
                    //    " FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) "+
                    //    " where  lo.LocationCode='" + locationCode + "' AND ls.LabOrderDate Between '" + from + "' AND '" + to + "' and lo.ProviderName!='Hospital' ";

                    string strSQL = " SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,ls.FinalStatus,lo.LocationName, pr.Age, pr.Sex,lo.ProviderName, " +
                                   " ABS(DAY(CURDATE())-DAY(LabOrderDate)) as DayCount " +
                                   " FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) " +
                                   " where lo.LocationCode = '" + locationCode + "' and ls.LabOrderDate Between '" + from + "' AND '" + to + "' and lo.ProviderName != 'Hospital' " +
                                   " and lo.ProviderName not like '%_Camp' " +
                                   " union " +
                                   " SELECT ls.LabOrderDate, pr.RegID,pr.FirstName,pr.LastName,ls.MrdNo, ls.LabStatus,ls.FinalStatus,lo.LocationName, pr.Age, pr.Sex,lo.ProviderName, " +
                                   " ABS(DAY(CURDATE())-DAY(LabOrderDate)) as DayCount " +
                                   " FROM((laborderstatus ls INNER JOIN laborder lo ON ls.MrdNo = lo.MrdNo) INNER JOIN patientregistration pr ON lo.RegID = pr.RegID) " +
                                   " left join groupmaster gm on gm.GroupName = lo.ProviderName " +
                                   " where lo.LocationCode = '" + locationCode + "' and ls.LabOrderDate Between '" + from + "' AND '" + to + "' and lo.ProviderName like '%_Camp' " +
                                   " and gm.SampleCollect = 'Yes' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            LabOrderInprogressList labOrderView = new LabOrderInprogressList();

                            labOrderView.PatientName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                            labOrderView.FirstName = dr["FirstName"].ToString();
                            labOrderView.LastName = dr["LastName"].ToString();
                            labOrderView.LabStatus = dr["LabStatus"].ToString();
                            labOrderView.MrdNo = dr["MrdNo"].ToString();

                            string staSQL = "select * from laborderstatus where MrdNo='" + dr["MrdNo"].ToString() + "'";
                            MySqlDataAdapter staData = new MySqlDataAdapter(staSQL, conn);
                            MySqlCommandBuilder staCmd = new MySqlCommandBuilder(staData);
                            DataSet staDS = new DataSet();
                            DataTable StaDT = new DataTable();
                            staData.Fill(staDS);
                            StaDT = staDS.Tables[0];
                            if (StaDT.Rows.Count > 0)
                            {
                                foreach (DataRow sdr in StaDT.Rows)
                                {
                                    if (sdr != null)
                                    {
                                        if (sdr["FinalStatus"] == DBNull.Value)
                                        {
                                            labOrderView.FinalStatus = "";
                                        }
                                        else
                                        {
                                            labOrderView.FinalStatus = sdr["FinalStatus"].ToString();
                                        }
                                        labOrderView.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                                    }
                                }
                            }
                            labOrderView.RegID = dr["RegID"].ToString();
                            labOrderView.sex = dr["Sex"].ToString();
                            labOrderView.Age = dr["Age"].ToString();
                            //var d = Convert.ToDateTime(dr["CreateDate"]);
                            //var getdate = d.ToShortDateString();
                            //var gettime = d.ToShortTimeString();
                            labOrderView.CreateDate = dr["LabOrderDate"].ToString();
                            labOrderView.LocationName = dr["LocationName"].ToString();
                            labOrderView.PatientID = dr["RegID"].ToString();
                            lstLabInprogressDetails.Add(labOrderView);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstLabInprogressDetails;
            }
        }
        #endregion

        #region insertProfileDetails
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertProfileDetails")]
        [HttpPost]
        public void insertProfileDetails(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //DateTime today = DateTime.Today;
                    DateTime today = DateTime.Today;
                    addprofile.CreateDate = today.ToString();

                    //addprofile.CreateDate = today.ToShortDateString();
                    string strSQL = "INSERT INTO createProfile(ProfileName,ProfileCode,Amount,CreateDate,DisplayName) VALUES(@val1,@val2,@val3,@val4,@val5)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.Parameters.AddWithValue("@val1", addprofile.ProfileName);
                    cmd.Parameters.AddWithValue("@val2", addprofile.ProfileCode);
                    cmd.Parameters.AddWithValue("@val3", addprofile.Amount);
                    cmd.Parameters.AddWithValue("@val4", addprofile.CreateDate);
                    cmd.Parameters.AddWithValue("@val5", addprofile.DisplayName);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region Insertprofilewithintest
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/Insertprofilewithintest")]
        [HttpPost]
        public void Insertprofilewithintest(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string fetch = "Select TestCode from profilewithintest where ProfileCode='" + addprofile.ProfileCode + "'and TestCode='" + addprofile.TestCode + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(fetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    string testCode = "";
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            testCode = dr["TestCode"].ToString();
                        }
                    }

                    if (testCode != addprofile.TestCode)
                    {
                        //addprofile.CreateDate = today.ToShortDateString();
                        string strSQL = "INSERT INTO profilewithintest(ProfileCode,TestName,TestCode) VALUES(@val1,@val2,@val3)";

                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", addprofile.ProfileCode);
                        cmd.Parameters.AddWithValue("@val2", addprofile.TestName);
                        cmd.Parameters.AddWithValue("@val3", addprofile.TestCode);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region InsertprofilewithinSubProfileNEW
        /// <summary>
        /// Table
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/InsertprofilewithinSubProfileNEW")]
        [HttpPost]
        public void InsertprofilewithinSubProfileNEW(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    conn.Open();
                    string fetch = "Select SubProfileCode from profilewithinsubProfile where MainProfileCode='" + addprofile.ProfileCode + "'and SubProfileCode='" + addprofile.SubProfileCode + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(fetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    string SubProfileCode = "";
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            SubProfileCode = dr["SubProfileCode"].ToString();
                        }
                    }

                    if (SubProfileCode != addprofile.SubProfileCode)
                    {
                        //addprofile.CreateDate = today.ToShortDateString();
                        string strSQL = "INSERT INTO profilewithinsubProfile(MainProfileCode,SubProfileCode) VALUES(@val1,@val2)";
                        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                        cmd.Parameters.AddWithValue("@val1", addprofile.ProfileCode);
                        cmd.Parameters.AddWithValue("@val2", addprofile.SubProfileCode);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllTestandProfilePriority
        /// <summary>
        ///Modified by nandhini on 03/08/2018  to avoid the duplicate sub profile list in Priority-profile/Test page.
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllTestandProfilePriority")]
        [HttpGet]
        public List<Addprofile> getAllTestandProfilePriority(string profileCode)
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();

                    int testDetails = 0;
                    string testDetailsfetch = "Select count(Id) from profilewithintest where ProfileCode='" + profileCode + "'";
                    MySqlDataAdapter testDetailsfetchmydata = new MySqlDataAdapter(testDetailsfetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(testDetailsfetchmydata);
                    DataSet testDetailsfetchmydatads = new DataSet();
                    testDetailsfetchmydata.Fill(testDetailsfetchmydatads);
                    DataTable testDetailsfetchmydatadsdt = new DataTable();
                    testDetailsfetchmydatadsdt = testDetailsfetchmydatads.Tables[0];
                    foreach (DataRow dr in testDetailsfetchmydatadsdt.Rows)
                    {
                        if (dr != null)
                        {
                            testDetails = Convert.ToInt32(dr[0]);
                        }
                    }


                    int profileDetailsCount = 0;
                    string profileCheck = "Select count(Id) from profilewithinsubprofile where MainProfileCode='" + profileCode + "'";
                    MySqlDataAdapter profileCheckmydata = new MySqlDataAdapter(profileCheck, conn);
                    MySqlCommandBuilder profileCheckmydataCmd = new MySqlCommandBuilder(profileCheckmydata);
                    DataSet profileCheckDS = new DataSet();
                    profileCheckmydata.Fill(profileCheckDS);
                    DataTable profileCheckDT = new DataTable();
                    profileCheckDT = profileCheckDS.Tables[0];
                    foreach (DataRow dr in profileCheckDT.Rows)
                    {
                        if (dr != null)
                        {
                            profileDetailsCount = Convert.ToInt32(dr[0]);
                        }
                    }

                    if (testDetails > 0 && profileDetailsCount > 0)
                    {
                        //old query commented on 30/11/2018 for ordering based on profilecode

                        //string strSQL = "SELECT distinct(b.TestCode),a.SubProfileCode,a.SubProfilePriority, b.ProfileCode, a.MainProfileCode, b.TestCode,b.TestName,b.TestPriority FROM  profilewithinsubprofile a inner join profilewithintest b on a.MainProfileCode = b.ProfileCode  where (b.ProfileCode = '" + profileCode + "') order by b.TestPriority,a.SubProfilePriority";
                        // MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        //MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        //string mainProfileCode = "";
                        //DataSet ds = new DataSet();
                        //mydata.Fill(ds);
                        //dt = ds.Tables[0];
                        //string ProfileCode = "";
                        //double subProfilePrioriity = 0.0;
                        //foreach (DataRow dr in dt.Rows)
                        //{
                        //    Addprofile profileDetails = new Addprofile();

                        //    if (dr != null)
                        //    {
                        //        mainProfileCode = dr["MainProfileCode"].ToString();
                        //        ProfileCode = dr["SubProfileCode"].ToString();
                        //        profileDetails.ProfileCode = mainProfileCode;
                        //        profileDetails.TestCode = dr["TestCode"].ToString() + "-" + dr["TestName"].ToString();
                        //        if (dr["TestPriority"] != DBNull.Value)
                        //        {
                        //            profileDetails.TestPriority = (double)dr["TestPriority"];
                        //        }
                        //        else
                        //        {
                        //            profileDetails.TestPriority = 0.0;
                        //        }
                        //        if (dr["SubProfilePriority"] != DBNull.Value)
                        //        {
                        //            subProfilePrioriity = (double)dr["SubProfilePriority"];
                        //        }
                        //        else
                        //        {
                        //            subProfilePrioriity = 0.0;
                        //        }
                        //        lstDetails.Add(profileDetails);

                        //    }
                        //}
                        //if (ProfileCode != "")
                        //{
                        //    string strSQL1 = "SELECT ProfileCode, ProfileName From createprofile where ProfileCode = '" + ProfileCode + "'";

                        //    MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                        //    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                        //    DataSet ds1 = new DataSet();
                        //    DataTable dt1 = new DataTable();
                        //    mydata1.Fill(ds1);
                        //    dt1 = ds1.Tables[0];
                        //    foreach (DataRow dr1 in dt1.Rows)
                        //    {
                        //        if (dr1 != null)
                        //        {
                        //            Addprofile profileDetails2 = new Addprofile();
                        //            profileDetails2.ProfileCode = mainProfileCode;
                        //            profileDetails2.TestCode = dr1["ProfileName"].ToString() + "+" + ProfileCode;
                        //            profileDetails2.TestPriority = subProfilePrioriity;
                        //            lstDetails.Add(profileDetails2);
                        //        }
                        //    }
                        //}
                        string strSQL = "SELECT ProfileCode as MainProfileCode,'' SubProfile, TestCode, TestName, TestPriority as Priority,'1' as TestPriority, " +
                                        " '1' as IsMainProfile FROM  profilewithintest where (ProfileCode = '" + profileCode + "') Union " +
                                        " SELECT PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, PT.TestCode, PT.TestName,PS.SubProfilePriority as Priority, " +
                                        " PT.TestPriority as TestPriority, '0' as IsMainProfile FROM  profilewithintest PT inner join  profilewithinsubprofile PS " +
                                        " ON PS.SubProfileCode = PT.ProfileCode and PS.MainProfileCode = '" + profileCode + "' order by Priority, TestPriority asc";


                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        string mainProfileCode = "";
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        string ProfileCode = "";
                        double subProfilePrioriity = 0.0;
                        foreach (DataRow dr in dt.Rows)
                        {
                            Addprofile profileDetails = new Addprofile();
                            if (dr != null)
                            {
                                profileDetails.ProfileCode = dr["MainProfileCode"].ToString();
                                profileDetails.TestCode = dr["TestCode"].ToString();
                                profileDetails.SubProfileCode = dr["TestCode"].ToString() + "+" + dr["SubProfile"].ToString();
                                profileDetails.TestName = dr["TestName"].ToString();
                                if (dr["TestPriority"] != DBNull.Value)
                                {
                                    profileDetails.TestPriority = Convert.ToDouble(dr["TestPriority"]);
                                }
                                else
                                {
                                    profileDetails.TestPriority = 0.0;
                                }
                                if (dr["Priority"] != DBNull.Value)
                                {
                                    profileDetails.ProfilePriority = Convert.ToDouble(dr["Priority"]);
                                }
                                else
                                {
                                    profileDetails.ProfilePriority = 0.0;
                                }
                                profileDetails.flag = dr["IsMainProfile"].ToString();
                                lstDetails.Add(profileDetails);
                            }

                        }
                    }

                    else if (testDetails > 0 && profileDetailsCount == 0)
                    {
                        string strSQL1 = "SELECT ProfileCode,TestCode,TestPriority,TestName From profilewithintest where ProfileCode = '" + profileCode + "'";

                        MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                        DataSet ds1 = new DataSet();
                        DataTable dt1 = new DataTable();
                        mydata1.Fill(ds1);
                        dt1 = ds1.Tables[0];
                        foreach (DataRow dr1 in dt1.Rows)
                        {
                            if (dr1 != null)
                            {
                                Addprofile profileDetails2 = new Addprofile();
                                profileDetails2.ProfileCode = dr1["ProfileCode"].ToString();
                                profileDetails2.TestCode = dr1["TestCode"].ToString() + "-" + dr1["TestName"].ToString(); ;
                                if (dr1["TestPriority"] != DBNull.Value)
                                {
                                    profileDetails2.TestPriority = (double)dr1["TestPriority"];
                                }
                                else
                                {
                                    profileDetails2.TestPriority = 0.0;
                                }
                                lstDetails.Add(profileDetails2);
                            }
                        }

                    }
                    else if (testDetails == 0 && profileDetailsCount > 0)
                    {

                        string strSQL = "SELECT distinct(a.SubProfileCode),a.SubProfilePriority, a.MainProfileCode FROM  profilewithinsubprofile a where  a.MainProfileCode = '" + profileCode + "'";

                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        string ProfileCode = "";
                        string mainProfileCode = "";
                        double subProfilePrioriity = 0.0;
                        foreach (DataRow dr in dt.Rows)
                        {
                            Addprofile profileDetails = new Addprofile();

                            if (dr != null)
                            {

                                ProfileCode = dr["SubProfileCode"].ToString();
                                mainProfileCode = dr["MainProfileCode"].ToString();
                                if (dr["SubProfilePriority"] != DBNull.Value)
                                {
                                    subProfilePrioriity = (double)dr["SubProfilePriority"];
                                }
                                else
                                {
                                    subProfilePrioriity = 0.0;
                                }
                            }
                            if (ProfileCode != "")
                            {
                                string strSQL1 = "SELECT ProfileCode,TestCode,TestPriority,TestName From profilewithintest where ProfileCode = '" + ProfileCode + "'";

                                MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                                MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                                DataSet ds1 = new DataSet();
                                DataTable dt1 = new DataTable();
                                mydata1.Fill(ds1);
                                dt1 = ds1.Tables[0];
                                foreach (DataRow dr1 in dt1.Rows)
                                {
                                    if (dr1 != null)
                                    {
                                        Addprofile profileDetails2 = new Addprofile();
                                        profileDetails2.ProfileCode = mainProfileCode;
                                        profileDetails2.TestCode = dr1["TestCode"].ToString() + "-" + dr1["TestName"].ToString() + "+" + ProfileCode;
                                        profileDetails2.TestPriority = subProfilePrioriity;
                                        lstDetails.Add(profileDetails2);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstDetails;
        }


        #endregion

        #region getmainProfilePriority
        /// <summary>
        ///Modified by nandhini on 03/08/2018  to avoid the duplicate sub profile list in Priority-profile/Test page.
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getmainProfilePriority")]
        [HttpGet]
        public List<Addprofile> getmainProfilePriority(string profileCode)
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();

                    int testDetails = 0;
                    string testDetailsfetch = "Select count(Id) from profilewithintest where ProfileCode='" + profileCode + "'";
                    MySqlDataAdapter testDetailsfetchmydata = new MySqlDataAdapter(testDetailsfetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(testDetailsfetchmydata);
                    DataSet testDetailsfetchmydatads = new DataSet();
                    testDetailsfetchmydata.Fill(testDetailsfetchmydatads);
                    DataTable testDetailsfetchmydatadsdt = new DataTable();
                    testDetailsfetchmydatadsdt = testDetailsfetchmydatads.Tables[0];
                    foreach (DataRow dr in testDetailsfetchmydatadsdt.Rows)
                    {
                        if (dr != null)
                        {
                            testDetails = Convert.ToInt32(dr[0]);
                        }
                    }


                    int profileDetailsCount = 0;
                    string profileCheck = "Select count(Id) from profilewithinsubprofile where MainProfileCode='" + profileCode + "'";
                    MySqlDataAdapter profileCheckmydata = new MySqlDataAdapter(profileCheck, conn);
                    MySqlCommandBuilder profileCheckmydataCmd = new MySqlCommandBuilder(profileCheckmydata);
                    DataSet profileCheckDS = new DataSet();
                    profileCheckmydata.Fill(profileCheckDS);
                    DataTable profileCheckDT = new DataTable();
                    profileCheckDT = profileCheckDS.Tables[0];
                    foreach (DataRow dr in profileCheckDT.Rows)
                    {
                        if (dr != null)
                        {
                            profileDetailsCount = Convert.ToInt32(dr[0]);
                        }
                    }

                    if (testDetails > 0 && profileDetailsCount > 0)
                    {
                        //old query commented on 30/11/2018 for ordering based on profilecode

                        //string strSQL = "SELECT distinct(b.TestCode),a.SubProfileCode,a.SubProfilePriority, b.ProfileCode, a.MainProfileCode, b.TestCode,b.TestName,b.TestPriority FROM  profilewithinsubprofile a inner join profilewithintest b on a.MainProfileCode = b.ProfileCode  where (b.ProfileCode = '" + profileCode + "') order by b.TestPriority,a.SubProfilePriority";
                        // MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        //MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        //string mainProfileCode = "";
                        //DataSet ds = new DataSet();
                        //mydata.Fill(ds);
                        //dt = ds.Tables[0];
                        //string ProfileCode = "";
                        //double subProfilePrioriity = 0.0;
                        //foreach (DataRow dr in dt.Rows)
                        //{
                        //    Addprofile profileDetails = new Addprofile();

                        //    if (dr != null)
                        //    {
                        //        mainProfileCode = dr["MainProfileCode"].ToString();
                        //        ProfileCode = dr["SubProfileCode"].ToString();
                        //        profileDetails.ProfileCode = mainProfileCode;
                        //        profileDetails.TestCode = dr["TestCode"].ToString() + "-" + dr["TestName"].ToString();
                        //        if (dr["TestPriority"] != DBNull.Value)
                        //        {
                        //            profileDetails.TestPriority = (double)dr["TestPriority"];
                        //        }
                        //        else
                        //        {
                        //            profileDetails.TestPriority = 0.0;
                        //        }
                        //        if (dr["SubProfilePriority"] != DBNull.Value)
                        //        {
                        //            subProfilePrioriity = (double)dr["SubProfilePriority"];
                        //        }
                        //        else
                        //        {
                        //            subProfilePrioriity = 0.0;
                        //        }
                        //        lstDetails.Add(profileDetails);

                        //    }
                        //}
                        //if (ProfileCode != "")
                        //{
                        //    string strSQL1 = "SELECT ProfileCode, ProfileName From createprofile where ProfileCode = '" + ProfileCode + "'";

                        //    MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                        //    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                        //    DataSet ds1 = new DataSet();
                        //    DataTable dt1 = new DataTable();
                        //    mydata1.Fill(ds1);
                        //    dt1 = ds1.Tables[0];
                        //    foreach (DataRow dr1 in dt1.Rows)
                        //    {
                        //        if (dr1 != null)
                        //        {
                        //            Addprofile profileDetails2 = new Addprofile();
                        //            profileDetails2.ProfileCode = mainProfileCode;
                        //            profileDetails2.TestCode = dr1["ProfileName"].ToString() + "+" + ProfileCode;
                        //            profileDetails2.TestPriority = subProfilePrioriity;
                        //            lstDetails.Add(profileDetails2);
                        //        }
                        //    }
                        //}
                        string strSQL = "SELECT pt.Id,pt.ProfileCode, pt.TestCode, pt.TestName, pt.TestPriority,cp.Priority as profilepriority, '1' as IsMainProfile " +
                                        " FROM  profilewithintest pt inner join  createprofile cp on pt.ProfileCode = cp.ProfileCode" +
                                        " where cp.ProfileCode = '" + profileCode + "'";

                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        string mainProfileCode = "";
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        string ProfileCode = "";
                        double subProfilePrioriity = 0.0;
                        foreach (DataRow dr in dt.Rows)
                        {
                            Addprofile profileDetails = new Addprofile();
                            if (dr != null)
                            {
                                profileDetails.ProfileID = Convert.ToInt32(dr["Id"]);
                                profileDetails.ProfileCode = dr["ProfileCode"].ToString();
                                profileDetails.TestCode = dr["TestCode"].ToString();
                                profileDetails.SubProfileCode = dr["TestCode"].ToString() + "+" + dr["ProfileCode"].ToString();
                                profileDetails.TestName = dr["TestName"].ToString();
                                if (dr["TestPriority"] != DBNull.Value)
                                {
                                    profileDetails.TestPriority = Convert.ToDouble(dr["TestPriority"]);
                                }
                                else
                                {
                                    profileDetails.TestPriority = 0.0;
                                }
                                if (dr["profilepriority"] != DBNull.Value)
                                {
                                    profileDetails.ProfilePriority = Convert.ToDouble(dr["profilepriority"]);
                                }
                                else
                                {
                                    profileDetails.ProfilePriority = 0.0;
                                }
                                profileDetails.flag = dr["IsMainProfile"].ToString();
                                lstDetails.Add(profileDetails);
                            }
                        }
                    }
                    else if (testDetails > 0 && profileDetailsCount == 0)
                    {
                        string strSQL1 = "SELECT Id,ProfileCode,TestCode,TestPriority,TestName From profilewithintest where ProfileCode = '" + profileCode + "'";

                        MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                        DataSet ds1 = new DataSet();
                        DataTable dt1 = new DataTable();
                        mydata1.Fill(ds1);
                        dt1 = ds1.Tables[0];
                        foreach (DataRow dr1 in dt1.Rows)
                        {
                            if (dr1 != null)
                            {
                                Addprofile profileDetails2 = new Addprofile();
                                profileDetails2.ProfileID = Convert.ToInt32(dr1["Id"]);
                                profileDetails2.ProfileCode = dr1["ProfileCode"].ToString();
                                profileDetails2.TestCode = dr1["TestCode"].ToString() + "-" + dr1["TestName"].ToString();
                                if (dr1["TestPriority"] != DBNull.Value)
                                {
                                    profileDetails2.TestPriority = (double)dr1["TestPriority"];
                                }
                                else
                                {
                                    profileDetails2.TestPriority = 0.0;
                                }
                                lstDetails.Add(profileDetails2);
                            }
                        }

                    }
                    else if (testDetails == 0 && profileDetailsCount > 0)
                    {

                        string strSQL = "SELECT distinct(a.SubProfileCode),a.SubProfilePriority, a.MainProfileCode FROM  profilewithinsubprofile a where  a.MainProfileCode = '" + profileCode + "'";

                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        string ProfileCode = "";
                        string mainProfileCode = "";
                        double subProfilePrioriity = 0.0;
                        foreach (DataRow dr in dt.Rows)
                        {
                            Addprofile profileDetails = new Addprofile();

                            if (dr != null)
                            {
                                //profileDetails.ProfileID = Convert.ToInt32(dr["Id"]);

                                ProfileCode = dr["SubProfileCode"].ToString();
                                mainProfileCode = dr["MainProfileCode"].ToString();
                                if (dr["SubProfilePriority"] != DBNull.Value)
                                {
                                    subProfilePrioriity = (double)dr["SubProfilePriority"];
                                }
                                else
                                {
                                    subProfilePrioriity = 0.0;
                                }
                            }
                            if (ProfileCode != "")
                            {
                                string strSQL1 = "SELECT Id,ProfileCode,TestCode,TestPriority,TestName From profilewithintest where ProfileCode = '" + ProfileCode + "'";

                                MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                                MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                                DataSet ds1 = new DataSet();
                                DataTable dt1 = new DataTable();
                                mydata1.Fill(ds1);
                                dt1 = ds1.Tables[0];
                                foreach (DataRow dr1 in dt1.Rows)
                                {
                                    if (dr1 != null)
                                    {
                                        Addprofile profileDetails2 = new Addprofile();
                                        // profileDetails2.ProfileID = Convert.ToInt32(dr1["Id"]);
                                        profileDetails2.ProfileCode = mainProfileCode;
                                        profileDetails2.TestCode = dr1["TestCode"].ToString() + "-" + dr1["TestName"].ToString() + "+" + ProfileCode;
                                        profileDetails2.TestPriority = subProfilePrioriity;
                                        lstDetails.Add(profileDetails2);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstDetails;
        }
        #endregion

        #region getsubProfilePriority
        /// <summary>
        ///Modified by nandhini on 03/08/2018  to avoid the duplicate sub profile list in Priority-profile/Test page.
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getsubProfilePriority")]
        [HttpGet]
        public List<Addprofile> getsubProfilePriority(string profileCode)
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();

                    int testDetails = 0;
                    string testDetailsfetch = "Select count(Id) from profilewithintest where ProfileCode='" + profileCode + "'";
                    MySqlDataAdapter testDetailsfetchmydata = new MySqlDataAdapter(testDetailsfetch, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(testDetailsfetchmydata);
                    DataSet testDetailsfetchmydatads = new DataSet();
                    testDetailsfetchmydata.Fill(testDetailsfetchmydatads);
                    DataTable testDetailsfetchmydatadsdt = new DataTable();
                    testDetailsfetchmydatadsdt = testDetailsfetchmydatads.Tables[0];
                    foreach (DataRow dr in testDetailsfetchmydatadsdt.Rows)
                    {
                        if (dr != null)
                        {
                            testDetails = Convert.ToInt32(dr[0]);
                        }
                    }


                    int profileDetailsCount = 0;
                    string profileCheck = "Select count(Id) from profilewithinsubprofile where MainProfileCode='" + profileCode + "'";
                    MySqlDataAdapter profileCheckmydata = new MySqlDataAdapter(profileCheck, conn);
                    MySqlCommandBuilder profileCheckmydataCmd = new MySqlCommandBuilder(profileCheckmydata);
                    DataSet profileCheckDS = new DataSet();
                    profileCheckmydata.Fill(profileCheckDS);
                    DataTable profileCheckDT = new DataTable();
                    profileCheckDT = profileCheckDS.Tables[0];
                    foreach (DataRow dr in profileCheckDT.Rows)
                    {
                        if (dr != null)
                        {
                            profileDetailsCount = Convert.ToInt32(dr[0]);
                        }
                    }

                    if (testDetails > 0 && profileDetailsCount > 0)
                    {
                        //old query commented on 30/11/2018 for ordering based on profilecode

                        //string strSQL = "SELECT distinct(b.TestCode),a.SubProfileCode,a.SubProfilePriority, b.ProfileCode, a.MainProfileCode, b.TestCode,b.TestName,b.TestPriority FROM  profilewithinsubprofile a inner join profilewithintest b on a.MainProfileCode = b.ProfileCode  where (b.ProfileCode = '" + profileCode + "') order by b.TestPriority,a.SubProfilePriority";
                        // MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        //MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        //string mainProfileCode = "";
                        //DataSet ds = new DataSet();
                        //mydata.Fill(ds);
                        //dt = ds.Tables[0];
                        //string ProfileCode = "";
                        //double subProfilePrioriity = 0.0;
                        //foreach (DataRow dr in dt.Rows)
                        //{
                        //    Addprofile profileDetails = new Addprofile();

                        //    if (dr != null)
                        //    {
                        //        mainProfileCode = dr["MainProfileCode"].ToString();
                        //        ProfileCode = dr["SubProfileCode"].ToString();
                        //        profileDetails.ProfileCode = mainProfileCode;
                        //        profileDetails.TestCode = dr["TestCode"].ToString() + "-" + dr["TestName"].ToString();
                        //        if (dr["TestPriority"] != DBNull.Value)
                        //        {
                        //            profileDetails.TestPriority = (double)dr["TestPriority"];
                        //        }
                        //        else
                        //        {
                        //            profileDetails.TestPriority = 0.0;
                        //        }
                        //        if (dr["SubProfilePriority"] != DBNull.Value)
                        //        {
                        //            subProfilePrioriity = (double)dr["SubProfilePriority"];
                        //        }
                        //        else
                        //        {
                        //            subProfilePrioriity = 0.0;
                        //        }
                        //        lstDetails.Add(profileDetails);

                        //    }
                        //}
                        //if (ProfileCode != "")
                        //{
                        //    string strSQL1 = "SELECT ProfileCode, ProfileName From createprofile where ProfileCode = '" + ProfileCode + "'";

                        //    MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                        //    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                        //    DataSet ds1 = new DataSet();
                        //    DataTable dt1 = new DataTable();
                        //    mydata1.Fill(ds1);
                        //    dt1 = ds1.Tables[0];
                        //    foreach (DataRow dr1 in dt1.Rows)
                        //    {
                        //        if (dr1 != null)
                        //        {
                        //            Addprofile profileDetails2 = new Addprofile();
                        //            profileDetails2.ProfileCode = mainProfileCode;
                        //            profileDetails2.TestCode = dr1["ProfileName"].ToString() + "+" + ProfileCode;
                        //            profileDetails2.TestPriority = subProfilePrioriity;
                        //            lstDetails.Add(profileDetails2);
                        //        }
                        //    }
                        //}
                        string strSQL = "SELECT distinct PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, cp.ProfileName, PS.SubProfilePriority as Priority " +
                                        " FROM  profilewithintest PT inner join  profilewithinsubprofile PS ON PS.SubProfileCode = PT.ProfileCode and PS.MainProfileCode = '" + profileCode + "' " +
                                        " inner join  createprofile cp on PS.SubProfileCode = cp.ProfileCode";

                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        string mainProfileCode = "";
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        string ProfileCode = "";
                        double subProfilePrioriity = 0.0;
                        foreach (DataRow dr in dt.Rows)
                        {
                            Addprofile profileDetails = new Addprofile();
                            if (dr != null)
                            {
                                profileDetails.ProfileCode = dr["MainProfileCode"].ToString();
                                //profileDetails.TestCode = dr["TestCode"].ToString();
                                profileDetails.SubProfileCode = dr["SubProfile"].ToString();
                                profileDetails.ProfileName = dr["ProfileName"].ToString();
                                if (dr["Priority"] != DBNull.Value)
                                {
                                    profileDetails.ProfilePriority = Convert.ToDouble(dr["Priority"]);
                                }
                                else
                                {
                                    profileDetails.ProfilePriority = 0.0;
                                }
                                // profileDetails.flag = dr["IsMainProfile"].ToString();
                                lstDetails.Add(profileDetails);
                            }

                        }
                    }

                    else if (testDetails > 0 && profileDetailsCount == 0)
                    {
                        string strSQL1 = "SELECT ProfileCode,TestCode,TestPriority,TestName From profilewithintest where ProfileCode = '" + profileCode + "'";

                        MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                        DataSet ds1 = new DataSet();
                        DataTable dt1 = new DataTable();
                        mydata1.Fill(ds1);
                        dt1 = ds1.Tables[0];
                        foreach (DataRow dr1 in dt1.Rows)
                        {
                            if (dr1 != null)
                            {
                                Addprofile profileDetails2 = new Addprofile();
                                profileDetails2.ProfileCode = dr1["ProfileCode"].ToString();
                                profileDetails2.TestCode = dr1["TestCode"].ToString() + "-" + dr1["TestName"].ToString(); ;
                                if (dr1["TestPriority"] != DBNull.Value)
                                {
                                    profileDetails2.TestPriority = (double)dr1["TestPriority"];
                                }
                                else
                                {
                                    profileDetails2.TestPriority = 0.0;
                                }
                                lstDetails.Add(profileDetails2);
                            }
                        }
                    }
                    else if (testDetails == 0 && profileDetailsCount > 0)
                    {

                        string strSQL = "SELECT distinct(a.SubProfileCode),a.SubProfilePriority, a.MainProfileCode FROM  profilewithinsubprofile a where  a.MainProfileCode = '" + profileCode + "'";

                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        string ProfileCode = "";
                        string mainProfileCode = "";
                        double subProfilePrioriity = 0.0;
                        foreach (DataRow dr in dt.Rows)
                        {
                            Addprofile profileDetails = new Addprofile();

                            if (dr != null)
                            {

                                ProfileCode = dr["SubProfileCode"].ToString();
                                mainProfileCode = dr["MainProfileCode"].ToString();
                                if (dr["SubProfilePriority"] != DBNull.Value)
                                {
                                    subProfilePrioriity = (double)dr["SubProfilePriority"];
                                }
                                else
                                {
                                    subProfilePrioriity = 0.0;
                                }
                            }
                            if (ProfileCode != "")
                            {
                                string strSQL1 = "SELECT ProfileCode,TestCode,TestPriority,TestName From profilewithintest where ProfileCode = '" + ProfileCode + "'";

                                MySqlDataAdapter mydata1 = new MySqlDataAdapter(strSQL1, conn);
                                MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata1);
                                DataSet ds1 = new DataSet();
                                DataTable dt1 = new DataTable();
                                mydata1.Fill(ds1);
                                dt1 = ds1.Tables[0];
                                foreach (DataRow dr1 in dt1.Rows)
                                {
                                    if (dr1 != null)
                                    {
                                        Addprofile profileDetails2 = new Addprofile();
                                        profileDetails2.ProfileCode = mainProfileCode;
                                        profileDetails2.TestCode = dr1["TestCode"].ToString() + "-" + dr1["TestName"].ToString() + "+" + ProfileCode;
                                        profileDetails2.TestPriority = subProfilePrioriity;
                                        lstDetails.Add(profileDetails2);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstDetails;
        }
        #endregion


        #region UpdateProfileTestPrority
        /// <summary>
        ///
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/UpdateProfileTestPrority")]
        [HttpPost]
        public void UpdateProfileTestPrority(Addprofile addprofile)
        {

            var testcode = "";
            if (addprofile.TestCode.Contains('-'))
            {
                var code = addprofile.TestCode.Split('-');
                testcode = code[0];
            }
            else
            {
                testcode = addprofile.TestCode;
            }

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //  string strSQL = "UPDATE  profilewithintest SET TestPriority='" + addprofile.TestPriority + "'  where ProfileCode = '" + addprofile.ProfileCode + "' && TestCode = '" + addprofile.TestCode + "'";
                    string strSQL = "UPDATE  profilewithintest SET TestPriority='" + addprofile.TestPriority + "'  where ProfileCode = '" + addprofile.ProfileCode + "' && TestCode = '" + testcode + "' && Id='" + addprofile.ProfileID + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region DeleteProfileTestPrority
        /// <summary>
        ///DeleteProfileTestPrority added by kalif
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/DeleteProfileTestPrority")]
        [HttpPost]
        public void DeleteProfileTestPrority(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "Delete from  profilewithintest   where ProfileCode = '" + addprofile.ProfileCode + "' && TestCode = '" + addprofile.TestCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region DeleteSubProfileTestPrority
        /// <summary>
        ///DeleteSubProfileTestPrority added by kalif
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/DeleteSubProfileTestPrority")]
        [HttpPost]
        public void DeleteSubProfileTestPrority(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "Delete from  profilewithinsubprofile  where  SubProfileCode = '" + addprofile.SubProfileCode + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region UpdateSubProfileTestPrority
        /// <summary>
        ///Modified by nandhini on 02/08/2018 to update the priority in sub profile details.
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/UpdateSubProfileTestPrority")]
        [HttpPost]
        public void UpdateSubProfileTestPrority(Addprofile addprofile)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                //try
                //{
                //    string strSQL = "UPDATE  profilewithinsubprofile SET SubProfilePriority='" + addprofile.SubProfilePriority + "'  where MainProfileCode = '" + addprofile.MainProfileCode + "' && SubProfileCode = '" + addprofile.SubProfileCode + "'";
                //    conn.Open();
                //    MySqlCommand cmd = new MySqlCommand(strSQL, conn);

                //    cmd.CommandType = CommandType.Text;
                //    cmd.ExecuteNonQuery();

                //}
                //catch (Exception Ex)
                //{
                //    string logdetails = Ex.InnerException.ToString();
                //}

                try
                {
                    conn.Open();
                    DataTable dts = new DataTable();
                    string priorityvalue = addprofile.SubProfilePriority.ToString();

                    if (priorityvalue == "0")
                    {
                        string strSQL1 = "UPDATE  profilewithinsubprofile SET SubProfilePriority='" + priorityvalue + "'  where MainProfileCode = '" + addprofile.MainProfileCode + "' && SubProfileCode = '" + addprofile.SubProfileCode + "'";
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        double d = addprofile.SubProfilePriority;
                        if ((d - (int)d) != 0 && d < 1)
                        {
                            string[] parts = priorityvalue.Split('.');
                            string i1 = parts[0].ToString();
                            string i2 = parts[1].ToString();
                            if (i2.Length == 1)
                            {
                                double value = addprofile.SubProfilePriority;
                                double number = value / 10;
                                string strSQL1 = "UPDATE  profilewithinsubprofile SET SubProfilePriority='" + number + "'  where MainProfileCode = '" + addprofile.MainProfileCode + "' && SubProfileCode = '" + addprofile.SubProfileCode + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                cmd1.CommandType = CommandType.Text;
                                cmd1.ExecuteNonQuery();
                            }
                            else
                            {
                                double number = addprofile.SubProfilePriority;
                                string strSQL1 = "UPDATE  profilewithinsubprofile SET SubProfilePriority='" + number + "'  where MainProfileCode = '" + addprofile.MainProfileCode + "' && SubProfileCode = '" + addprofile.SubProfileCode + "'";
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                cmd1.CommandType = CommandType.Text;
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        else
                        {
                            double number = addprofile.SubProfilePriority;
                            string strSQL1 = "UPDATE  profilewithinsubprofile SET SubProfilePriority='" + number + "'  where MainProfileCode = '" + addprofile.MainProfileCode + "' && SubProfileCode = '" + addprofile.SubProfileCode + "'";
                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.CommandType = CommandType.Text;
                            cmd1.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region labviewgetAllSampleDetailsbyMrd

        [Route("api/Account/labviewgetAllSampleDetailsbyMrd")]
        [HttpGet]
        public List<Addprofile> labviewgetAllSampleDetailsbyMrd(string mrdNo)
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT MrdNo,TestCode,sampleName,ProfileCode from samplecollecter where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        Addprofile profileDetails = new Addprofile();
                        if (dr != null)
                        {
                            profileDetails.MainProfileCode = dr["MrdNo"].ToString();
                            profileDetails.TestCode = dr["TestCode"].ToString();
                            profileDetails.SampleName = dr["sampleName"].ToString();
                            profileDetails.ProfileCode = dr["ProfileCode"].ToString();
                            lstDetails.Add(profileDetails);

                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }



        #endregion

        #region getLabviewStatus
        /// <summary>
        /// Modified query for accept all button show hide by kalif
        /// </summary>
        /// <param name="mrdNo"></param>
        /// <returns></returns>
        [Route("api/Account/getLabviewStatus")]
        [HttpGet]
        public pathostatus getLabviewStatus(string mrdNo)
        {

            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            var CollCount = 0;
            var totcount = 0;

            pathostatus pathostatusDetails = new pathostatus();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "select ID,MrdNo,sampleid,labstatus from  pathostatus where MrdNo ='" + mrdNo + "'";
                    string strSQL = "select DISTINCT PS.ID,PS.MrdNo,PS.sampleid,PS.labstatus,VLD.AcceptAll,VLD.RejectAll from  pathostatus as PS left join  viewlistdetails as VLD on PS.MrdNo=VLD.MrdNo where PS.MrdNo ='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt1 = ds.Tables[0];



                    string SQLCount = "select Count(collected) as CollCount,(select Count(*) as sampCOUNT from samplecollecter where MrdNo = '" + mrdNo + "') as totcount from samplecollecter where MrdNo = '" + mrdNo + "' and collected = 1";
                    MySqlDataAdapter countData = new MySqlDataAdapter(SQLCount, conn);
                    MySqlCommandBuilder CountCmd = new MySqlCommandBuilder(countData);
                    DataSet countDs = new DataSet();
                    countData.Fill(countDs);
                    dt2 = countDs.Tables[0];
                    foreach (DataRow dr in dt2.Rows)
                    {
                        if (dr != null)
                        {
                            CollCount = Convert.ToInt32(dr["CollCount"].ToString());
                            totcount = Convert.ToInt32(dr["totcount"].ToString());

                        }
                    }

                    foreach (DataRow dr in dt1.Rows)
                    {
                        if (dr != null)
                        {
                            pathostatusDetails.ID = (int)dr["ID"];
                            //pathostatusDetails.PatientID = dr["MrdNo"].ToString();
                            pathostatusDetails.MrdNo = dr["MrdNo"].ToString();
                            pathostatusDetails.sampleid = dr["sampleid"].ToString();
                            pathostatusDetails.labstatus = dr["labstatus"].ToString();
                            pathostatusDetails.AcceptAll = dr["AcceptAll"].ToString();
                            pathostatusDetails.RejectAll = dr["RejectAll"].ToString();

                            if (CollCount < totcount)
                            {
                                pathostatusDetails.AcceptSatus = "0";
                            }
                            else { pathostatusDetails.AcceptSatus = "1"; }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }

            return pathostatusDetails;
        }


        #endregion

        #region getTestCodeTestPriorityByMrdno
        /// <summary>
        ///modified by nandhini on 09/08/2018 to lab view changes based on the accept all value.
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getTestCodeTestPriorityByMrdno")]
        [HttpGet]
        public List<TestCodeandPriority> getTestCodeTestPriorityByMrdno(string mrdNo)
        {
            List<TestCodeandPriority> lstTestCodeandPriority = new List<TestCodeandPriority>();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    int count = 0;

                    string query = "Select count(*) from samplecollecter Where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            count = Convert.ToInt32(dr[0]);
                        }
                    }
                    if (count > 0)
                    {
                        #region Fetching Test alone
                        string strSQL = " Select distinct(SC.TestCode), SC.ProfileCode, VL.AcceptAll, VL.Accept from  samplecollecter SC left join  viewlistdetails VL on SC.MrdNo = VL.MrdNo where SC.MrdNo ='" + mrdNo + "'";

                        MySqlDataAdapter SCmydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(SCmydata);
                        DataSet SCds = new DataSet();
                        DataTable tstCodeSamp = new DataTable();
                        string testCode = "";
                        string profileCode = "";
                        SCmydata.Fill(SCds);
                        tstCodeSamp = SCds.Tables[0];
                        foreach (DataRow dr in tstCodeSamp.Rows)
                        {
                            if (dr != null)
                            {
                                testCode = dr["TestCode"].ToString();
                                //profileCode= dr["ProfileCode"].ToString();

                                if ((testCode != null) && (dr["ProfileCode"] == DBNull.Value) || (dr["ProfileCode"].ToString() == ""))
                                {
                                    //string sqlchildTestDetails = "select distinct(testCode),TestName,SampleContainer,TestPriority,multiplecomponents,commonParagraph,UrineCulture from childtestlist where testCode='" + testCode + "' order by TestPriority";
                                    string sqlchildTestDetails = "select distinct(CL.testCode), CL.TestName, CL.SampleContainer,CL.DepartmentName, dept.Priority as DeptPrority, " +
                                        "CL.TestPriority,CL.ProfilePriority, CL.multiplecomponents, CL.commonParagraph, CL.UrineCulture, VL.AcceptAll," +
                                        "VL.Accept,VL.Reject,VL.RejectAll from childtestlist CL join  viewlistdetails VL on " +
                                        "CL.TestCode = VL.TestCodeRef left join department dept on dept.DepartmentName = CL.DepartmentName where CL.TestCode = '" + testCode + "' and MrdNo='" + mrdNo + "' group by CL.testCode,CL.TestName, CL.SampleContainer, " +
                                        " CL.DepartmentName,DeptPrority, CL.TestPriority,CL.ProfilePriority, CL.multiplecomponents," +
                                        "  CL.commonParagraph, CL.UrineCulture, VL.AcceptAll,VL.Accept,VL.Reject,VL.RejectAll " +
                                        " order by TestPriority, CL.TestName, CL.SampleContainer,CL.DepartmentName, DeptPrority," +
                                        " CL.TestPriority,CL.ProfilePriority, CL.multiplecomponents, CL.commonParagraph, CL.UrineCulture, VL.AcceptAll," +
                                        " VL.Accept,VL.Reject,VL.RejectAll ";

                                    MySqlDataAdapter S = new MySqlDataAdapter(sqlchildTestDetails, conn);
                                    MySqlCommandBuilder CmdDetails = new MySqlCommandBuilder(S);
                                    DataSet DSData = new DataSet();
                                    DataTable tstCode = new DataTable();
                                    string cmn = "";
                                    string pgr = "";
                                    string multi = "";
                                    S.Fill(DSData);
                                    tstCode = DSData.Tables[0];
                                    foreach (DataRow drTestData in tstCode.Rows)
                                    {
                                        if (drTestData != null)
                                        {
                                            TestCodeandPriority tstonlyPriority = new TestCodeandPriority();
                                            tstonlyPriority.TestCode = drTestData["testCode"].ToString();
                                            tstonlyPriority.TestName = drTestData["TestName"].ToString();
                                            tstonlyPriority.AcceptAll = drTestData["AcceptAll"].ToString();
                                            tstonlyPriority.Accept = drTestData["Accept"].ToString();
                                            tstonlyPriority.RejectAll = drTestData["RejectAll"].ToString();
                                            tstonlyPriority.Reject = drTestData["Reject"].ToString();
                                            if (drTestData["TestPriority"] != DBNull.Value)
                                            {
                                                tstonlyPriority.TestPriority = (double)drTestData["TestPriority"];
                                            }
                                            else
                                            {
                                                tstonlyPriority.TestPriority = 0.0;
                                            }
                                            if (drTestData["ProfilePriority"] != DBNull.Value)
                                            {
                                                tstonlyPriority.ProfilePriority = (double)drTestData["ProfilePriority"];
                                            }
                                            else
                                            {
                                                tstonlyPriority.ProfilePriority = 0.0;
                                            }
                                            if (drTestData["DeptPrority"] != DBNull.Value)
                                            {
                                                tstonlyPriority.DeptPriority = (double)drTestData["DeptPrority"];
                                            }
                                            else
                                            {
                                                tstonlyPriority.DeptPriority = 0.0;
                                            }

                                            tstonlyPriority.SampleContainer = drTestData["SampleContainer"].ToString();
                                            cmn = drTestData["commonParagraph"].ToString();
                                            pgr = drTestData["UrineCulture"].ToString();
                                            multi = drTestData["multiplecomponents"].ToString();
                                            if (cmn == "No" && pgr == "No" && multi == "No")
                                            {
                                                tstonlyPriority.TestType = 1;
                                            }
                                            else if (cmn == "Yes" && pgr == "No" && multi == "No")
                                            {
                                                tstonlyPriority.TestType = 2;
                                            }
                                            else if (cmn == "No" && pgr == "Yes" && multi == "No")
                                            {
                                                tstonlyPriority.TestType = 3;
                                            }
                                            else if (cmn == "No" && pgr == "No" && multi == "Yes")
                                            {
                                                tstonlyPriority.TestType = 4;
                                            }
                                            lstTestCodeandPriority.Add(tstonlyPriority);
                                        }
                                    }
                                }
                            }
                        }//individual test
                        #endregion Fetching Test alone

                        string strSQL3 = "Select distinct(s.ProfileCode),s.TestCode,VL.AcceptAll,c.Priority from  samplecollecter s inner join createprofile c on (s.ProfileCode=c.ProfileCode)" +
                                            "left join  viewlistdetails VL on s.MrdNo= VL.MrdNo where s.MrdNo='" + mrdNo + "' " +
                                            " group by s.ProfileCode,s.TestCode,VL.AcceptAll,c.Priority " +
                                            " order by c.Priority,s.ProfileCode,s.TestCode,VL.AcceptAll";

                        MySqlDataAdapter adpProfile = new MySqlDataAdapter(strSQL3, conn);
                        MySqlCommandBuilder cmdProdile = new MySqlCommandBuilder(adpProfile);
                        DataSet dsProfile = new DataSet();
                        DataTable dtProfile = new DataTable();
                        string ProfileCode = "";
                        string AcceptAll = "";
                        double profilepriority = 0.0;
                        adpProfile.Fill(dsProfile);
                        dtProfile = dsProfile.Tables[0];
                        foreach (DataRow dr in dtProfile.Rows)
                        {
                            if (dr != null)
                            {
                                testCode = dr["TestCode"].ToString();
                                ProfileCode = dr["ProfileCode"].ToString();
                                AcceptAll = dr["AcceptAll"].ToString();
                                profilepriority = Convert.ToDouble(dr["Priority"]);

                                if (ProfileCode != "")
                                {

                                    #region subprofile
                                    string strSubprofile = "select SubProfileCode,SubProfilePriority,MainProfileCode from  profilewithinsubprofile where MainProfileCode='" + ProfileCode + "' order by SubProfilePriority ";
                                    MySqlDataAdapter strSubprofileADP = new MySqlDataAdapter(strSubprofile, conn);
                                    DataSet strSubprofileADPDS1 = new DataSet();
                                    strSubprofileADP.Fill(strSubprofileADPDS1);
                                    string subprofileCode = "";
                                    double SubProfilePriority = 0.0;
                                    DataTable strSubprofileADPDT1 = new DataTable();
                                    strSubprofileADPDT1 = strSubprofileADPDS1.Tables[0];
                                    foreach (DataRow dr5 in strSubprofileADPDT1.Rows)
                                    {
                                        if (dr5 != null)
                                        {
                                            subprofileCode = dr5["SubProfileCode"].ToString();
                                            if (dr5["SubProfilePriority"] != DBNull.Value)
                                            {
                                                SubProfilePriority = (double)dr5["SubProfilePriority"];
                                            }
                                            if (subprofileCode != "")
                                            {
                                                string strFinal = "select TestCode,TestName,TestPriority from  profilewithintest where ProfileCode='" + subprofileCode + "'  order by TestPriority";
                                                MySqlDataAdapter mydataFinal = new MySqlDataAdapter(strFinal, conn);
                                                DataSet strDs1 = new DataSet();
                                                mydataFinal.Fill(strDs1);
                                                DataTable strDt1 = new DataTable();
                                                strDt1 = strDs1.Tables[0];
                                                foreach (DataRow strDr11 in strDt1.Rows)
                                                {
                                                    if (strDr11 != null)
                                                    {
                                                        string testcode3 = "";
                                                        TestCodeandPriority tstPriority1 = new TestCodeandPriority();
                                                        testcode3 = strDr11["TestCode"].ToString();
                                                        tstPriority1.TestCode = strDr11["TestCode"].ToString();
                                                        //tstPriority1.TestCode = strDr11["TestCode"].ToString() + "-" + "sub" + "-" + subprofileCode;
                                                        tstPriority1.TestName = strDr11["TestName"].ToString();
                                                        tstPriority1.SubProfilePriority = SubProfilePriority;
                                                        if (strDr11["TestPriority"] != DBNull.Value)
                                                        {
                                                            tstPriority1.TestPriority = (double)strDr11["TestPriority"];
                                                        }
                                                        tstPriority1.AcceptAll = AcceptAll;
                                                        if (tstPriority1.TestCode != "")
                                                        {
                                                            string cmn1 = "";
                                                            string pgr1 = "";
                                                            string sqlchildTestDetails = "select distinct(CL.testCode),CL.TestName,CL.SampleContainer,CL.TestPriority,CL.commonParagraph,CL.UrineCulture,CL.DepartmentName, dept.Priority from childtestlist CL join department dept on dept.DepartmentName = CL.DepartmentName where CL.testCode='" + testcode3 + "' order by Priority";
                                                            MySqlDataAdapter mydata13 = new MySqlDataAdapter(sqlchildTestDetails, conn);
                                                            DataSet ds11 = new DataSet();
                                                            mydata13.Fill(ds11);
                                                            DataTable dt11 = new DataTable();
                                                            dt11 = ds11.Tables[0];
                                                            foreach (DataRow dt13 in dt11.Rows)
                                                            {
                                                                if (dt13 != null)
                                                                {
                                                                    tstPriority1.ProfilePriority = profilepriority;
                                                                    //if (dt13["TestPriority"] != DBNull.Value)
                                                                    //{
                                                                    //    tstPriority1.TestPriority = (double)dt13["TestPriority"];
                                                                    //}
                                                                    if (dt13["Priority"] != DBNull.Value)
                                                                    {
                                                                        tstPriority1.DeptPriority = (double)dt13["Priority"];
                                                                    }
                                                                    cmn1 = dt13["commonParagraph"].ToString();
                                                                    pgr1 = dt13["UrineCulture"].ToString();
                                                                    if (cmn1 == "No" && pgr1 == "No")
                                                                    {
                                                                        tstPriority1.TestType = 1;
                                                                    }
                                                                    else if (cmn1 == "Yes" && pgr1 == "No")
                                                                    {
                                                                        tstPriority1.TestType = 2;
                                                                    }
                                                                    else if (cmn1 == "No" && pgr1 == "Yes")
                                                                    {
                                                                        tstPriority1.TestType = 3;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        lstTestCodeandPriority.Add(tstPriority1);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion subprofile

                                    #region Profilewithintest
                                    string strSQL1 = "select distinct(TestCode),TestName,TestPriority from  profilewithintest where ProfileCode='" + ProfileCode + "' order by TestPriority";
                                    MySqlDataAdapter mydata11 = new MySqlDataAdapter(strSQL1, conn);
                                    DataSet ds1 = new DataSet();
                                    mydata11.Fill(ds1);
                                    DataTable dt1 = new DataTable();
                                    dt1 = ds1.Tables[0];
                                    string testCode1 = "";

                                    foreach (DataRow dr1 in dt1.Rows)
                                    {
                                        if (dr1 != null)
                                        {
                                            TestCodeandPriority tstPriority = new TestCodeandPriority();
                                            testCode1 = dr1["TestCode"].ToString();
                                            tstPriority.TestCode = dr1["TestCode"].ToString();
                                            //tstPriority.TestCode = dr1["TestCode"].ToString() + "-" + ProfileCode;
                                            tstPriority.TestName = dr1["TestName"].ToString();
                                            tstPriority.AcceptAll = AcceptAll;
                                            tstPriority.ProfilePriority = profilepriority;
                                            if (dr1["TestPriority"] != DBNull.Value)
                                            {
                                                tstPriority.TestPriority = (double)dr1["TestPriority"];
                                            }
                                            else
                                            {
                                                tstPriority.TestPriority = 0.0;
                                            }
                                            if ((tstPriority.TestCode != "") && (ProfileCode != ""))
                                            {
                                                string cmn1 = "";
                                                string pgr1 = "";
                                                //string sqlchildTestDetails = "select distinct(testCode),TestName,SampleContainer,TestPriority,commonParagraph,UrineCulture from childtestlist where testCode='" + testCode1 + "' order by TestPriority";
                                                string sqlchildTestDetails = "select distinct(CL.testCode), CL.TestName, CL.SampleContainer,CL.DepartmentName,dept.Priority, CL.commonParagraph, CL.UrineCulture, VL.AcceptAll from childtestlist CL join  viewlistdetails VL on CL.TestCode = VL.TestCodeRef inner join department dept on dept.DepartmentName = CL.DepartmentName where CL.testCode = '" + testCode1 + "' and VL.MrdNo='" + mrdNo + "' " +
                                         " group by CL.testCode, CL.TestName, CL.SampleContainer,CL.DepartmentName,dept.Priority, " +
                                         " CL.commonParagraph, CL.UrineCulture, VL.AcceptAll";
                                                MySqlDataAdapter mydata13 = new MySqlDataAdapter(sqlchildTestDetails, conn);
                                                DataSet ds11 = new DataSet();
                                                mydata13.Fill(ds11);
                                                DataTable dt11 = new DataTable();
                                                dt11 = ds11.Tables[0];
                                                foreach (DataRow dt13 in dt11.Rows)
                                                {
                                                    if (dt13 != null)
                                                    {
                                                        if (dt13["Priority"] != DBNull.Value)
                                                        {
                                                            tstPriority.DeptPriority = (double)dt13["Priority"];
                                                        }
                                                        else
                                                        {
                                                            tstPriority.DeptPriority = 0.0;
                                                        }
                                                        cmn1 = dt13["commonParagraph"].ToString();
                                                        pgr1 = dt13["UrineCulture"].ToString();
                                                        if (cmn1 == "No" && pgr1 == "No")
                                                        {
                                                            tstPriority.TestType = 1;
                                                        }
                                                        else if (cmn1 == "Yes" && pgr1 == "No")
                                                        {
                                                            tstPriority.TestType = 2;
                                                        }
                                                        else if (cmn1 == "No" && pgr1 == "Yes")
                                                        {
                                                            tstPriority.TestType = 3;
                                                        }
                                                    }

                                                }
                                            }
                                            lstTestCodeandPriority.Add(tstPriority);
                                        }
                                    }

                                    #endregion Profilewithintest                                    

                                }
                            }
                        }
                    }

                }
                catch (Exception Ex)
                {
                    Console.Write(Ex);
                }

            }
            return lstTestCodeandPriority;
        }
        #endregion

        #region getTestCodeTestPriorityByMrdnoNew
        /// <summary>
        ///modified on 09/08/2018 to lab view changes based on the accept all value.
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getTestCodeTestPriorityByMrdnoNew")]
        [HttpPost]
        public List<TestCodeandPriority> getTestCodeTestPriorityByMrdnoNew(string mrdNo, int flag)
        {
            List<TestCodeandPriority> lstTestCodeandPriority = new List<TestCodeandPriority>();
            List<TestCodeandPriority> lstTestCodeandPrioritymulti = new List<TestCodeandPriority>();
            List<TestCodeandPriority> lstTestCodeandPrioritymultinew = new List<TestCodeandPriority>();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    int count = 0;
                    //string testCode = "";                    
                    //string multiprofilecode = "";
                    string query = "Select count(*) from samplecollecter Where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            count = Convert.ToInt32(dr[0]);
                        }
                    }
                    if (count > 0)
                    {
                        #region allprofiledata       
                        string strSubprofile1 = "";
                        if (flag == 1)
                        {
                            strSubprofile1 = "create temporary table TestInfo as " +
" Select PT.ProfileCode as MainProfileCode,'' SubProfile, PT.TestCode, PT.TestName, 1 as ReportPriority, CP.Priority as ProfilePriority, " +
" CAST(PT.TestPriority as unsigned) as Priority, 1 as TestPriority , '' as MultiComponent,0 as TestType  FROM  profilewithintest PT " +
" inner join  createprofile CP ON CP.ProfileCode = PT.ProfileCode  where Pt.ProfileCode" +
" in (Select distinct ProfileCode from  samplecollecter where MrdNo = '" + mrdNo + "'  and Collected = '1' and ProfileCode IS NOT NULL) and " +
" PT.TestCode in  (Select distinct sc.TestCode " +
" from  samplecollecter sc inner join childtestlist CT on sc.TestCode=CT.TestCode where sc.MrdNo = '" + mrdNo + "' and sc.Collected = '1' and CT.ActiveStatus=1 and sc.ProfileCode IS NOT NULL) " +
" Union " +
" SELECT PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, PT.TestCode,  PT.TestName, 1 as ReportPriority, CP.Priority as ProfilePriority, " +
" CAST(PS.SubProfilePriority as unsigned) as Priority, CAST(PT.TestPriority as unsigned) as TestPriority, '' as MultiComponent ,0 as TestType " +
" FROM  profilewithintest PT inner join  profilewithinsubprofile PS  ON PS.SubProfileCode = PT.ProfileCode " +
" inner join  createprofile CP ON CP.ProfileCode = PS.MainProfileCode  Where PS.MainProfileCode " +
" in (Select distinct ProfileCode from  samplecollecter where MrdNo = '" + mrdNo + "'  and Collected = '1' and ProfileCode IS NOT NULL) and PT.TestCode " +
" in (Select distinct sc.TestCode from  samplecollecter sc inner join childtestlist CT on sc.TestCode=CT.TestCode where sc.MrdNo = '" + mrdNo + "'  and sc.Collected = '1' and CT.ActiveStatus=1 and sc.ProfileCode IS NOT NULL) " +
" Union " +
" Select '' MainProfileCode,'' SubProfile, s.TestCode, s.TestName, 2 as ReportPriority, 999 as ProfilePriority, PD.Priority,CT.TestPriority,'' as MultiComponent ,0 as TestType " +
" from  samplecollecter s inner join  childtestlist CT ON CT.TestCode = s.TestCode " +
" inner join  Department PD  ON PD.DepartmentName = CT.DepartmentName  where s.MrdNo = '" + mrdNo + "' and s.Collected = '1' and s.ProfileCode IS NULL " +
" Order by ReportPriority, ProfilePriority, Priority, TestPriority; " +
" Update TestInfo AS TI SET TI.TestType = '4'; " +
" Update TestInfo AS TI Inner JOIN childtestlist AS CL ON CL.TestCode = TI.TestCode SET TI.TestType = '1'  Where CL.multiplecomponents = 'Yes'; " +
" Update TestInfo AS TI Inner JOIN childtestlist AS CL ON CL.TestCode = TI.TestCode SET TI.TestType = '2'  Where CL.commonParagraph = 'Yes'; " +
" Update TestInfo AS TI Inner JOIN childtestlist AS CL ON CL.TestCode = TI.TestCode SET TI.TestType = '3'  Where CL.UrineCulture = 'Yes'; " +
" create temporary table TestInfoView as SELECT TI.*,Case When TI.TestType = '1' then MC.ElementName Else TI.TestName END As DispalyTestName, Case " +
" When TI.TestType = '1' then MUCal.splcalculation Else 0 END As Calcu ,MC.ElementName,MC.Color,  MC.Units,MC.CriticalLow,MC.CriticalHigh,MC.ReferenceLow, " +
" MC.ReferenceHigh,MC.Methodology,MC.NormalValues,MC.Comments,MC.CommentsType ,MC.PriorityStatus as ElementPriority,0 as Accept,0 as AcceptAll,0 as Reject,0 as RejectAll " +
" from TestInfo TI  LEFT JOIN  testmultiplecomponents MC ON MC.TestCode = TI.TestCode and MC.ElementName is not null left join  calculationForTestDetails MUCal on MC.TestCode = MUCal.testCode " +
" and MUCal.Elements=MC.ElementName Order by TI.ReportPriority, TI.ProfilePriority,TI.Priority,TI.TestPriority ,MC.PriorityStatus; " +
" insert into viewlistdetails(TestName, TestCode, TestPriority, ProfilePriority, SubProfilePriority, ReportPriority, Accept, AcceptAll, Reject, RejectAll, MrdNo, TestType, TestCodeRef, " +
" DispalyName, viewlistdetailscol, Calculation) " +
" Select TIV.DispalyTestName,TIV.TestCode,TIV.TestPriority,TIV.ProfilePriority,TIV.Priority,TIV.ReportPriority,0,0,0,0,'" + mrdNo + "',TIV.TestType,TIV.TestCode, concat(TIV.TestCode, '-', TIV.TestName)," +
" TIV.CommentsType,TIV.Calcu from TestInfoView TIV; Drop table TestInfo; Drop Table TestInfoView; ";
                        }
                        else if (flag == 2)
                        {
                            //added to insert data for sample that are collected late.

                            strSubprofile1 = "create temporary table TestInfo as " +
" Select PT.ProfileCode as MainProfileCode,'' SubProfile, PT.TestCode, PT.TestName, 1 as ReportPriority, CP.Priority as ProfilePriority, " +
" CAST(PT.TestPriority as unsigned) as Priority, 1 as TestPriority , '' as MultiComponent,0 as TestType  FROM  profilewithintest PT " +
" inner join  createprofile CP ON CP.ProfileCode = PT.ProfileCode  where Pt.ProfileCode" +
" in (Select distinct ProfileCode from  samplecollecter where MrdNo = '" + mrdNo + "'  and Collected = '1' and ProfileCode IS NOT NULL) and " +
" PT.TestCode in  (Select distinct sc.TestCode " +
" from  samplecollecter sc inner join childtestlist CT on sc.TestCode=CT.TestCode where sc.MrdNo = '" + mrdNo + "' and sc.Collected = '1' and CT.ActiveStatus=1 and sc.ProfileCode IS NOT NULL) " +
" Union " +
" SELECT PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, PT.TestCode,  PT.TestName, 1 as ReportPriority, CP.Priority as ProfilePriority, " +
" CAST(PS.SubProfilePriority as unsigned) as Priority, CAST(PT.TestPriority as unsigned) as TestPriority, '' as MultiComponent ,0 as TestType " +
" FROM  profilewithintest PT inner join  profilewithinsubprofile PS  ON PS.SubProfileCode = PT.ProfileCode " +
" inner join  createprofile CP ON CP.ProfileCode = PS.MainProfileCode  Where PS.MainProfileCode " +
" in (Select distinct ProfileCode from  samplecollecter where MrdNo = '" + mrdNo + "'  and Collected = '1' and ProfileCode IS NOT NULL) and PT.TestCode " +
" in (Select distinct sc.TestCode from  samplecollecter sc inner join childtestlist CT on sc.TestCode=CT.TestCode where sc.MrdNo = '" + mrdNo + "'  and sc.Collected = '1' and CT.ActiveStatus=1 and sc.ProfileCode IS NOT NULL) " +
" Union " +
" Select '' MainProfileCode,'' SubProfile, s.TestCode, s.TestName, 2 as ReportPriority, 999 as ProfilePriority, PD.Priority,CT.TestPriority,'' as MultiComponent ,0 as TestType " +
" from  samplecollecter s inner join  childtestlist CT ON CT.TestCode = s.TestCode " +
" inner join  Department PD  ON PD.DepartmentName = CT.DepartmentName  where s.MrdNo = '" + mrdNo + "' and s.Collected = '1' and s.ProfileCode IS NULL " +
" Order by ReportPriority, ProfilePriority, Priority, TestPriority; " +
" Update TestInfo AS TI SET TI.TestType = '4'; " +
" Update TestInfo AS TI Inner JOIN childtestlist AS CL ON CL.TestCode = TI.TestCode SET TI.TestType = '1'  Where CL.multiplecomponents = 'Yes'; " +
" Update TestInfo AS TI Inner JOIN childtestlist AS CL ON CL.TestCode = TI.TestCode SET TI.TestType = '2'  Where CL.commonParagraph = 'Yes'; " +
" Update TestInfo AS TI Inner JOIN childtestlist AS CL ON CL.TestCode = TI.TestCode SET TI.TestType = '3'  Where CL.UrineCulture = 'Yes'; " +
" create temporary table TestInfoView as SELECT TI.*,Case When TI.TestType = '1' then MC.ElementName Else TI.TestName END As DispalyTestName, Case " +
" When TI.TestType = '1' then MUCal.splcalculation Else 0 END As Calcu ,MC.ElementName,MC.Color,  MC.Units,MC.CriticalLow,MC.CriticalHigh,MC.ReferenceLow, " +
" MC.ReferenceHigh,MC.Methodology,MC.NormalValues,MC.Comments,MC.CommentsType ,MC.PriorityStatus as ElementPriority,0 as Accept,0 as AcceptAll,0 as Reject,0 as RejectAll " +
" from TestInfo TI  LEFT JOIN  testmultiplecomponents MC ON MC.TestCode = TI.TestCode and MC.ElementName is not null left join  calculationForTestDetails MUCal on MC.TestCode = MUCal.testCode " +
" and MUCal.Elements=MC.ElementName Order by TI.ReportPriority, TI.ProfilePriority,TI.Priority,TI.TestPriority ,MC.PriorityStatus; " +

" CREATE temporary table NewlabDetails(TestName varchar(500) DEFAULT NULL, TestCode varchar(100) DEFAULT NULL, TestPriority double DEFAULT NULL, ProfilePriority double DEFAULT NULL, " +
" SubProfilePriority double DEFAULT NULL, ReportPriority double DEFAULT NULL, Accept varchar(10) DEFAULT NULL, AcceptAll varchar(10) DEFAULT NULL, Reject varchar(10) DEFAULT NULL, " +
" RejectAll varchar(10) DEFAULT NULL, MrdNo varchar(45) DEFAULT NULL, TestType int(11) DEFAULT NULL, TestCodeRef varchar(100) DEFAULT NULL, DispalyName varchar(200) DEFAULT NULL, " +
" viewlistdetailscol varchar(45) DEFAULT NULL, Calculation varchar(500) DEFAULT NULL); " +
" insert into NewlabDetails " +
" Select TIV.DispalyTestName,TIV.TestCode,TIV.TestPriority,TIV.ProfilePriority,TIV.Priority,TIV.ReportPriority,0,0,0,0,'" + mrdNo + "',TIV.TestType,TIV.TestCode, " +
" concat(TIV.TestCode, '-', TIV.TestName),TIV.CommentsType,TIV.Calcu from TestInfoView TIV; " +

" insert into viewlistdetails(TestName, TestCode, TestPriority, ProfilePriority, SubProfilePriority, ReportPriority, Accept, AcceptAll, Reject, RejectAll, MrdNo, TestType, TestCodeRef, " +
" DispalyName, viewlistdetailscol, Calculation) " +
" Select nd.TestName, nd.TestCode, nd.TestPriority, nd.ProfilePriority, nd.SubProfilePriority, nd.ReportPriority, nd.Accept, nd.AcceptAll, nd.Reject, nd.RejectAll, nd.MrdNo, nd.TestType, nd.TestCodeRef, " +
" nd.DispalyName,nd.viewlistdetailscol,nd.Calculation from NewlabDetails nd where nd.TestName not in(select TestName from viewlistdetails where MrdNo = '" + mrdNo + "'); " +
" Drop table TestInfo; Drop Table TestInfoView;Drop Table NewlabDetails; ";
                        }
                        MySqlCommand cmd = new MySqlCommand(strSubprofile1, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();

                        #endregion allprofiledata
                    }
                }
                catch (Exception Ex)
                {
                    Console.Write(Ex);
                }
            }

            return lstTestCodeandPriority;
        }
        #endregion

        #region deletelabViewDetails
        /// <summary>       
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/deletelabViewDetails")]
        [HttpPost]
        public void deletelabViewDetails(string mrdNo, int delFlag, string sampleName)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    //int count = 0;
                    //string testCode = "";                    
                    //string multiprofilecode = "";
                    if (delFlag == 1)
                    {
                        string query = "delete from viewlistdetails Where MrdNo='" + mrdNo + "'";
                        MySqlCommand deletecmd = new MySqlCommand(query, conn);
                        deletecmd.CommandType = CommandType.Text;
                        deletecmd.ExecuteNonQuery();
                    }
                    else if (delFlag == 2)
                    {
                        //string dlequery = "delete from rejectedsamplecollecter Where MrdNo='" + mrdNo + "'";
                        //MySqlCommand dlequerycmd = new MySqlCommand(dlequery, conn);
                        //dlequerycmd.CommandType = CommandType.Text;
                        //dlequerycmd.ExecuteNonQuery();

                        //string insrejQuery = "insert into rejectedsamplecollecter (MrdNo,TestCode,TestName,sampleName,ProfileCode,ProfileName,AlternativeSampleName,collected,Notcollected,Later)" +
                        //                " select MrdNo,TestCode,TestName,sampleName,ProfileCode,ProfileName,AlternativeSampleName,collected,Notcollected,Later from samplecollecter where MrdNo ='" + mrdNo + "' and collected=1";

                        string updQuery = "update  rejectedsamplecollecter set collected=1 where MrdNo='" + mrdNo + "' and sampleName='" + sampleName + "'";
                        MySqlCommand insertCmd = new MySqlCommand(updQuery, conn);
                        insertCmd.CommandType = CommandType.Text;
                        insertCmd.ExecuteNonQuery();
                    }

                }
                catch (Exception Ex)
                {
                    Console.Write(Ex);
                }
            }
        }
        #endregion

        #region getSamplesForHospitalView
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getSamplesForHospitalView")]
        [HttpGet]
        public List<LabTestandProfileDetails> getSamplesForHospitalView(string mrdNo)
        {
            List<LabTestandProfileDetails> lstDetails = new List<LabTestandProfileDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    int testListcount = 0;
                    conn.Open();
                    string querylabtestlist = "Select LabTestListId from labtestlist where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydatalabtestlist = new MySqlDataAdapter(querylabtestlist, conn);
                    MySqlCommandBuilder cmdlabtestlist = new MySqlCommandBuilder(mydatalabtestlist);
                    DataSet dslabtestlist = new DataSet();
                    mydatalabtestlist.Fill(dslabtestlist);
                    DataTable dtlabtestlist = new DataTable();
                    dtlabtestlist = dslabtestlist.Tables[0];
                    foreach (DataRow dr in dtlabtestlist.Rows)
                    {
                        if (dr != null)
                        {
                            if (dr["LabTestListId"] != DBNull.Value)
                            {
                                testListcount = (int)dr["LabTestListId"];
                            }

                        }
                    }

                    int profileListCount = 0;
                    string querylabProfile = "Select LabProfileListID from labprofilelist where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydatalabProfilelist = new MySqlDataAdapter(querylabProfile, conn);
                    MySqlCommandBuilder cmdProfile = new MySqlCommandBuilder(mydatalabProfilelist);
                    DataSet dsProfile = new DataSet();
                    mydatalabProfilelist.Fill(dsProfile);
                    DataTable dtPRofile = new DataTable();
                    dtPRofile = dsProfile.Tables[0];
                    foreach (DataRow dr in dtPRofile.Rows)
                    {
                        if (dr != null)
                        {
                            if (dr["LabProfileListID"] != DBNull.Value)
                            {
                                profileListCount = (int)dr["LabProfileListID"];
                            }

                        }
                    }
                    if (testListcount > 0 && profileListCount > 0)
                    {
                        #region profilewithsubprofile

                        if (profileListCount > 0)
                        {
                            string strSQL = "select PL.profilecode,PL.ProfileName from  labprofilelist PL where PL.MrdNo='" + mrdNo + "'";


                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    string ProfileCode = "";
                                    string ProfileName = "";

                                    LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                    ProfileCode = dr["ProfileCode"].ToString();
                                    ProfileName = dr["ProfileName"].ToString();
                                    if (ProfileCode != "")
                                    {
                                        //string strSQL1 = "select TestCode,TestName from  profilewithintest where ProfileCode='" + ProfileCode + "'";
                                        string strSQL1 = "SELECT ProfileCode as MainProfileCode,'' SubProfile, TestCode, TestName, CAST(TestPriority as unsigned) as Priority," +
                                                        " '1' as TestPriority , '1' as IsMainProfile FROM  profilewithintest where (ProfileCode = '" + ProfileCode + "') " +
                                                        " Union " +
                                                        " SELECT PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, PT.TestCode, PT.TestName, " +
                                                        " CAST(PS.SubProfilePriority as unsigned) as Priority, CAST(PT.TestPriority as unsigned) as TestPriority, '0' as IsMainProfile " +
                                                        " FROM  profilewithintest PT inner join  profilewithinsubprofile  PS " +
                                                        " ON PS.SubProfileCode = PT.ProfileCode and PS.MainProfileCode = '" + ProfileCode + "' " +
                                                        " order by Priority, TestPriority asc";

                                        MySqlDataAdapter mydata11 = new MySqlDataAdapter(strSQL1, conn);

                                        DataSet ds1 = new DataSet();
                                        mydata11.Fill(ds1);
                                        DataTable dt1 = new DataTable();
                                        dt1 = ds1.Tables[0];
                                        foreach (DataRow dr1 in dt1.Rows)
                                        {
                                            if (dr1 != null)
                                            {
                                                string tstc = "";
                                                tstc = dr1["TestCode"].ToString();

                                                if (tstc != "")
                                                {
                                                    string strSQL2 = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + tstc + "'";
                                                    MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL2, conn);
                                                    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                                    DataSet ds2 = new DataSet();
                                                    mydata12.Fill(ds2);
                                                    DataTable dt2 = new DataTable();
                                                    dt2 = ds2.Tables[0];
                                                    foreach (DataRow dr2 in dt2.Rows)
                                                    {
                                                        if (dr2 != null)
                                                        {
                                                            LabTestandProfileDetails Sampdetails = new LabTestandProfileDetails();
                                                            Sampdetails.SampleContainer = dr2["SampleContainer"].ToString();
                                                            Sampdetails.TestCode = dr2["TestCode"].ToString();
                                                            Sampdetails.TestName = dr2["TestName"].ToString();
                                                            Sampdetails.ProfileCode = ProfileCode;
                                                            Sampdetails.ProfileName = ProfileName;
                                                            Sampdetails.TableRequired = dr2["TableRequiredPrint"].ToString();
                                                            lstDetails.Add(Sampdetails);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ProfileCode = "";
                                    }

                                }
                            }

                            profileListCount = 0;
                        }
                        if (testListcount > 0)
                        {
                            string strSQL = "select LL.testcode from  labtestlist LL  where LL.MrdNo='" + mrdNo + "'";

                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {

                                    string testcode = "";
                                    LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                    testcode = dr["TestCode"].ToString();
                                    if (testcode != "")
                                    {
                                        string strSQL3 = "select SampleContainer,TestCode,TestName from  childtestlist where TestCode='" + testcode + "'";
                                        MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL3, conn);
                                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                        DataSet ds3 = new DataSet();
                                        mydata12.Fill(ds3);
                                        DataTable dt2 = new DataTable();
                                        dt2 = ds3.Tables[0];
                                        foreach (DataRow dr2 in dt2.Rows)
                                        {
                                            if (dr2 != null)
                                            {
                                                LabTestandProfileDetails SampdetailsDirect = new LabTestandProfileDetails();
                                                SampdetailsDirect.SampleContainer = dr2["SampleContainer"].ToString();
                                                SampdetailsDirect.TestCode = dr2["TestCode"].ToString();
                                                SampdetailsDirect.TestName = dr2["TestName"].ToString();
                                                lstDetails.Add(SampdetailsDirect);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        testcode = "";
                                    }

                                }
                            }
                            testListcount = 0;
                        }
                        #endregion profilewithsubprofile
                    }
                    else if (testListcount == 0 && profileListCount > 0)
                    {
                        #region Profile
                        string strSQL = "select PL.profilecode,PL.ProfileName from  labprofilelist PL where PL.MrdNo='" + mrdNo + "'";
                        //conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string ProfileCode = "";
                                string ProfileName = "";

                                LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                ProfileCode = dr["ProfileCode"].ToString();
                                ProfileName = dr["ProfileName"].ToString();
                                if (ProfileCode != "")
                                {
                                    // string strSQL1 = "select TestCode,TestName from  profilewithintest where ProfileCode='" + ProfileCode + "'";
                                    string strSQL1 = "SELECT ProfileCode as MainProfileCode,'' SubProfile, TestCode, TestName, CAST(TestPriority as unsigned) as Priority," +
                                                         " '1' as TestPriority , '1' as IsMainProfile FROM  profilewithintest where (ProfileCode = '" + ProfileCode + "') " +
                                                         " Union " +
                                                         " SELECT PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, PT.TestCode, PT.TestName, " +
                                                         " CAST(PS.SubProfilePriority as unsigned) as Priority, CAST(PT.TestPriority as unsigned) as TestPriority, '0' as IsMainProfile " +
                                                         " FROM  profilewithintest PT inner join  profilewithinsubprofile  PS " +
                                                         " ON PS.SubProfileCode = PT.ProfileCode and PS.MainProfileCode = '" + ProfileCode + "' " +
                                                         " order by Priority, TestPriority asc";
                                    MySqlDataAdapter mydata11 = new MySqlDataAdapter(strSQL1, conn);

                                    DataSet ds1 = new DataSet();
                                    mydata11.Fill(ds1);
                                    DataTable dt1 = new DataTable();
                                    dt1 = ds1.Tables[0];
                                    foreach (DataRow dr1 in dt1.Rows)
                                    {
                                        if (dr1 != null)
                                        {
                                            string tstc = "";
                                            tstc = dr1["TestCode"].ToString();

                                            if (tstc != "")
                                            {

                                                string strSQL2 = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + tstc + "'";
                                                MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL2, conn);
                                                MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                                DataSet ds2 = new DataSet();
                                                mydata12.Fill(ds2);
                                                DataTable dt2 = new DataTable();
                                                dt2 = ds2.Tables[0];
                                                foreach (DataRow dr2 in dt2.Rows)
                                                {
                                                    if (dr2 != null)
                                                    {
                                                        LabTestandProfileDetails Sampdetails = new LabTestandProfileDetails();
                                                        Sampdetails.SampleContainer = dr2["SampleContainer"].ToString();
                                                        Sampdetails.TestCode = dr2["TestCode"].ToString();
                                                        Sampdetails.TestName = dr2["TestName"].ToString();
                                                        Sampdetails.ProfileCode = ProfileCode;
                                                        Sampdetails.ProfileName = ProfileName;
                                                        Sampdetails.TableRequired = dr2["TableRequiredPrint"].ToString();
                                                        lstDetails.Add(Sampdetails);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ProfileCode = "";
                                }

                            }
                        }
                        #endregion profile
                    }
                    else if (testListcount > 0 && profileListCount == 0)
                    {
                        #region test alone
                        string strSQL = "select LL.testcode from  labtestlist LL  where LL.MrdNo='" + mrdNo + "'";
                        //conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {

                                string testcode = "";
                                LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                testcode = dr["TestCode"].ToString();
                                if (testcode != "")
                                {
                                    string strSQL3 = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + testcode + "'";
                                    MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL3, conn);
                                    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                    DataSet ds3 = new DataSet();
                                    mydata12.Fill(ds3);
                                    DataTable dt2 = new DataTable();
                                    dt2 = ds3.Tables[0];
                                    foreach (DataRow dr2 in dt2.Rows)
                                    {
                                        if (dr2 != null)
                                        {
                                            LabTestandProfileDetails SampdetailsDirect = new LabTestandProfileDetails();
                                            SampdetailsDirect.SampleContainer = dr2["SampleContainer"].ToString();
                                            SampdetailsDirect.TestCode = dr2["TestCode"].ToString();
                                            SampdetailsDirect.TestName = dr2["TestName"].ToString();
                                            SampdetailsDirect.TableRequired = dr2["TableRequiredPrint"].ToString();
                                            lstDetails.Add(SampdetailsDirect);
                                        }
                                    }
                                }
                                else
                                {
                                    testcode = "";
                                }

                            }
                        }
                        #endregion for test
                    }
                }



                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }


        #endregion

        #region getAllLabTestandProfileDetailsByMrdNo
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllLabTestandProfileDetailsByMrdNo")]
        [HttpGet]
        public List<LabTestandProfileDetails> getAllLabTestandProfileDetailsByMrdNo(string mrdNo)
        {
            List<LabTestandProfileDetails> lstDetails = new List<LabTestandProfileDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    int testListcount = 0;
                    conn.Open();
                    string querylabtestlist = "Select LabTestListId from labtestlist where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydatalabtestlist = new MySqlDataAdapter(querylabtestlist, conn);
                    MySqlCommandBuilder cmdlabtestlist = new MySqlCommandBuilder(mydatalabtestlist);
                    DataSet dslabtestlist = new DataSet();
                    mydatalabtestlist.Fill(dslabtestlist);
                    DataTable dtlabtestlist = new DataTable();
                    dtlabtestlist = dslabtestlist.Tables[0];
                    foreach (DataRow dr in dtlabtestlist.Rows)
                    {
                        if (dr != null)
                        {
                            if (dr["LabTestListId"] != DBNull.Value)
                            {
                                testListcount = (int)dr["LabTestListId"];
                            }

                        }
                    }

                    int profileListCount = 0;
                    string querylabProfile = "Select LabProfileListID from labprofilelist where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydatalabProfilelist = new MySqlDataAdapter(querylabProfile, conn);
                    MySqlCommandBuilder cmdProfile = new MySqlCommandBuilder(mydatalabProfilelist);
                    DataSet dsProfile = new DataSet();
                    mydatalabProfilelist.Fill(dsProfile);
                    DataTable dtPRofile = new DataTable();
                    dtPRofile = dsProfile.Tables[0];
                    foreach (DataRow dr in dtPRofile.Rows)
                    {
                        if (dr != null)
                        {
                            if (dr["LabProfileListID"] != DBNull.Value)
                            {
                                profileListCount = (int)dr["LabProfileListID"];
                            }

                        }
                    }
                    if (testListcount > 0 && profileListCount > 0)
                    {
                        #region profilewithsubprofile

                        if (profileListCount > 0)
                        {
                            string strSQL = "select PL.profilecode,PL.ProfileName from  labprofilelist PL where PL.MrdNo='" + mrdNo + "'";


                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    string ProfileCode = "";
                                    string ProfileName = "";

                                    LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                    ProfileCode = dr["ProfileCode"].ToString();
                                    ProfileName = dr["ProfileName"].ToString();
                                    if (ProfileCode != "")
                                    {
                                        //string strSQL1 = "select TestCode,TestName from  profilewithintest where ProfileCode='" + ProfileCode + "'";
                                        string strSQL1 = "SELECT ProfileCode as MainProfileCode,'' SubProfile, TestCode, TestName, CAST(TestPriority as unsigned) as Priority," +
                                                        " '1' as TestPriority , '1' as IsMainProfile FROM  profilewithintest where (ProfileCode = '" + ProfileCode + "') " +
                                                        " Union " +
                                                        " SELECT PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, PT.TestCode, PT.TestName, " +
                                                        " CAST(PS.SubProfilePriority as unsigned) as Priority, CAST(PT.TestPriority as unsigned) as TestPriority, '0' as IsMainProfile " +
                                                        " FROM  profilewithintest PT inner join  profilewithinsubprofile  PS " +
                                                        " ON PS.SubProfileCode = PT.ProfileCode and PS.MainProfileCode = '" + ProfileCode + "' " +
                                                        " order by Priority, TestPriority asc";

                                        MySqlDataAdapter mydata11 = new MySqlDataAdapter(strSQL1, conn);

                                        DataSet ds1 = new DataSet();
                                        mydata11.Fill(ds1);
                                        DataTable dt1 = new DataTable();
                                        dt1 = ds1.Tables[0];
                                        foreach (DataRow dr1 in dt1.Rows)
                                        {
                                            if (dr1 != null)
                                            {
                                                string tstc = "";
                                                tstc = dr1["TestCode"].ToString();

                                                if (tstc != "")
                                                {
                                                    string strSQL2 = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + tstc + "'";
                                                    MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL2, conn);
                                                    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                                    DataSet ds2 = new DataSet();
                                                    mydata12.Fill(ds2);
                                                    DataTable dt2 = new DataTable();
                                                    dt2 = ds2.Tables[0];
                                                    foreach (DataRow dr2 in dt2.Rows)
                                                    {
                                                        if (dr2 != null)
                                                        {
                                                            LabTestandProfileDetails Sampdetails = new LabTestandProfileDetails();
                                                            Sampdetails.SampleContainer = dr2["SampleContainer"].ToString();
                                                            Sampdetails.TestCode = dr2["TestCode"].ToString();
                                                            Sampdetails.TestName = dr2["TestName"].ToString();
                                                            Sampdetails.ProfileCode = ProfileCode;
                                                            Sampdetails.ProfileName = ProfileName;
                                                            Sampdetails.TableRequired = dr2["TableRequiredPrint"].ToString();
                                                            lstDetails.Add(Sampdetails);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ProfileCode = "";
                                    }

                                }
                            }

                            profileListCount = 0;
                        }
                        if (testListcount > 0)
                        {
                            string strSQL = "select LL.testcode from  labtestlist LL  where LL.MrdNo='" + mrdNo + "'";

                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {

                                    string testcode = "";
                                    LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                    testcode = dr["TestCode"].ToString();
                                    if (testcode != "")
                                    {
                                        string strSQL3 = "select SampleContainer,TestCode,TestName from  childtestlist where TestCode='" + testcode + "'";
                                        MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL3, conn);
                                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                        DataSet ds3 = new DataSet();
                                        mydata12.Fill(ds3);
                                        DataTable dt2 = new DataTable();
                                        dt2 = ds3.Tables[0];
                                        foreach (DataRow dr2 in dt2.Rows)
                                        {
                                            if (dr2 != null)
                                            {
                                                LabTestandProfileDetails SampdetailsDirect = new LabTestandProfileDetails();
                                                SampdetailsDirect.SampleContainer = dr2["SampleContainer"].ToString();
                                                SampdetailsDirect.TestCode = dr2["TestCode"].ToString();
                                                SampdetailsDirect.TestName = dr2["TestName"].ToString();
                                                lstDetails.Add(SampdetailsDirect);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        testcode = "";
                                    }

                                }
                            }
                            testListcount = 0;
                        }
                        #endregion profilewithsubprofile
                    }
                    else if (testListcount == 0 && profileListCount > 0)
                    {
                        #region Profile
                        string strSQL = "select PL.profilecode,PL.ProfileName from  labprofilelist PL where PL.MrdNo='" + mrdNo + "'";
                        //conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string ProfileCode = "";
                                string ProfileName = "";

                                LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                ProfileCode = dr["ProfileCode"].ToString();
                                ProfileName = dr["ProfileName"].ToString();
                                if (ProfileCode != "")
                                {
                                    // string strSQL1 = "select TestCode,TestName from  profilewithintest where ProfileCode='" + ProfileCode + "'";
                                    string strSQL1 = "SELECT ProfileCode as MainProfileCode,'' SubProfile, TestCode, TestName, CAST(TestPriority as unsigned) as Priority," +
                                                         " '1' as TestPriority , '1' as IsMainProfile FROM  profilewithintest where (ProfileCode = '" + ProfileCode + "') " +
                                                         " Union " +
                                                         " SELECT PS.MainProfileCode as MainProfileCode, PT.ProfileCode as SubProfile, PT.TestCode, PT.TestName, " +
                                                         " CAST(PS.SubProfilePriority as unsigned) as Priority, CAST(PT.TestPriority as unsigned) as TestPriority, '0' as IsMainProfile " +
                                                         " FROM  profilewithintest PT inner join  profilewithinsubprofile  PS " +
                                                         " ON PS.SubProfileCode = PT.ProfileCode and PS.MainProfileCode = '" + ProfileCode + "' " +
                                                         " order by Priority, TestPriority asc";
                                    MySqlDataAdapter mydata11 = new MySqlDataAdapter(strSQL1, conn);

                                    DataSet ds1 = new DataSet();
                                    mydata11.Fill(ds1);
                                    DataTable dt1 = new DataTable();
                                    dt1 = ds1.Tables[0];
                                    foreach (DataRow dr1 in dt1.Rows)
                                    {
                                        if (dr1 != null)
                                        {
                                            string tstc = "";
                                            tstc = dr1["TestCode"].ToString();

                                            if (tstc != "")
                                            {

                                                string strSQL2 = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + tstc + "'";
                                                MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL2, conn);
                                                MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                                DataSet ds2 = new DataSet();
                                                mydata12.Fill(ds2);
                                                DataTable dt2 = new DataTable();
                                                dt2 = ds2.Tables[0];
                                                foreach (DataRow dr2 in dt2.Rows)
                                                {
                                                    if (dr2 != null)
                                                    {
                                                        LabTestandProfileDetails Sampdetails = new LabTestandProfileDetails();
                                                        Sampdetails.SampleContainer = dr2["SampleContainer"].ToString();
                                                        Sampdetails.TestCode = dr2["TestCode"].ToString();
                                                        Sampdetails.TestName = dr2["TestName"].ToString();
                                                        Sampdetails.ProfileCode = ProfileCode;
                                                        Sampdetails.ProfileName = ProfileName;
                                                        Sampdetails.TableRequired = dr2["TableRequiredPrint"].ToString();
                                                        lstDetails.Add(Sampdetails);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ProfileCode = "";
                                }

                            }
                        }
                        #endregion profile
                    }
                    else if (testListcount > 0 && profileListCount == 0)
                    {
                        #region test alone
                        string strSQL = "select LL.testcode from  labtestlist LL  where LL.MrdNo='" + mrdNo + "'";
                        //conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {

                                string testcode = "";
                                LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                testcode = dr["TestCode"].ToString();
                                if (testcode != "")
                                {
                                    string strSQL3 = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + testcode + "'";
                                    MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL3, conn);
                                    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                    DataSet ds3 = new DataSet();
                                    mydata12.Fill(ds3);
                                    DataTable dt2 = new DataTable();
                                    dt2 = ds3.Tables[0];
                                    foreach (DataRow dr2 in dt2.Rows)
                                    {
                                        if (dr2 != null)
                                        {
                                            LabTestandProfileDetails SampdetailsDirect = new LabTestandProfileDetails();
                                            SampdetailsDirect.SampleContainer = dr2["SampleContainer"].ToString();
                                            SampdetailsDirect.TestCode = dr2["TestCode"].ToString();
                                            SampdetailsDirect.TestName = dr2["TestName"].ToString();
                                            SampdetailsDirect.TableRequired = dr2["TableRequiredPrint"].ToString();
                                            lstDetails.Add(SampdetailsDirect);
                                        }
                                    }
                                }
                                else
                                {
                                    testcode = "";
                                }

                            }
                        }
                        #endregion for test
                    }
                }



                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }


        #endregion


        #region getAllLabTestandProfileDetailsByMrdNoNew
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllLabTestandProfileDetailsByMrdNoNew")]
        [HttpGet]
        public List<LabTestandProfileDetails> getAllLabTestandProfileDetailsByMrdNoNew(string mrdNo)
        {
            List<LabTestandProfileDetails> lstDetails = new List<LabTestandProfileDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    int testListcount = 0;
                    conn.Open();
                    string querylabtestlist = "Select LabTestListId from labtestlist where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydatalabtestlist = new MySqlDataAdapter(querylabtestlist, conn);
                    MySqlCommandBuilder cmdlabtestlist = new MySqlCommandBuilder(mydatalabtestlist);
                    DataSet dslabtestlist = new DataSet();
                    mydatalabtestlist.Fill(dslabtestlist);
                    DataTable dtlabtestlist = new DataTable();
                    dtlabtestlist = dslabtestlist.Tables[0];
                    foreach (DataRow dr in dtlabtestlist.Rows)
                    {
                        if (dr != null)
                        {
                            if (dr["LabTestListId"] != DBNull.Value)
                            {
                                testListcount = (int)dr["LabTestListId"];
                            }

                        }
                    }

                    int profileListCount = 0;
                    string querylabProfile = "Select LabProfileListID from labprofilelist where MrdNo='" + mrdNo + "'";
                    MySqlDataAdapter mydatalabProfilelist = new MySqlDataAdapter(querylabProfile, conn);
                    MySqlCommandBuilder cmdProfile = new MySqlCommandBuilder(mydatalabProfilelist);
                    DataSet dsProfile = new DataSet();
                    mydatalabProfilelist.Fill(dsProfile);
                    DataTable dtPRofile = new DataTable();
                    dtPRofile = dsProfile.Tables[0];
                    foreach (DataRow dr in dtPRofile.Rows)
                    {
                        if (dr != null)
                        {
                            if (dr["LabProfileListID"] != DBNull.Value)
                            {
                                profileListCount = (int)dr["LabProfileListID"];
                            }

                        }
                    }
                    if (testListcount == 0 && profileListCount > 0)
                    {
                        if (testListcount > 0)
                        {
                            string strSQL = "select LL.testcode from  labtestlist LL  where LL.MrdNo='" + mrdNo + "'";

                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {

                                    string testcode = "";
                                    LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                    testcode = dr["TestCode"].ToString();
                                    if (testcode != "")
                                    {
                                        string strSQL3 = "select SampleContainer,TestCode,TestName from  childtestlist where TestCode='" + testcode + "'";
                                        MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL3, conn);
                                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                        DataSet ds3 = new DataSet();
                                        mydata12.Fill(ds3);
                                        DataTable dt2 = new DataTable();
                                        dt2 = ds3.Tables[0];
                                        foreach (DataRow dr2 in dt2.Rows)
                                        {
                                            if (dr2 != null)
                                            {
                                                LabTestandProfileDetails SampdetailsDirect = new LabTestandProfileDetails();
                                                SampdetailsDirect.SampleContainer = dr2["SampleContainer"].ToString();
                                                SampdetailsDirect.TestCode = dr2["TestCode"].ToString();
                                                SampdetailsDirect.TestName = dr2["TestName"].ToString();
                                                lstDetails.Add(SampdetailsDirect);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        testcode = "";
                                    }

                                }
                            }
                            testListcount = 0;
                        }
                        if (profileListCount > 0)
                        {
                            string strSQL = "select PL.profilecode,PL.ProfileName from  labprofilelist PL where PL.MrdNo='" + mrdNo + "'";

                            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                            DataSet ds = new DataSet();
                            mydata.Fill(ds);
                            dt = ds.Tables[0];
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    string ProfileCode = "";
                                    string ProfileName = "";

                                    LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                    ProfileCode = dr["ProfileCode"].ToString();
                                    ProfileName = dr["ProfileName"].ToString();
                                    if (ProfileCode != "")
                                    {
                                        string strSQL1 = "select TestCode,TestName from  profilewithintest where ProfileCode='" + ProfileCode + "'";
                                        MySqlDataAdapter mydata11 = new MySqlDataAdapter(strSQL1, conn);

                                        DataSet ds1 = new DataSet();
                                        mydata11.Fill(ds1);
                                        DataTable dt1 = new DataTable();
                                        dt1 = ds1.Tables[0];
                                        foreach (DataRow dr1 in dt1.Rows)
                                        {
                                            if (dr1 != null)
                                            {
                                                string tstc = "";
                                                tstc = dr1["TestCode"].ToString();

                                                if (tstc != "")
                                                {

                                                    string strSQL2 = "select SampleContainer,TestCode,TestName from  childtestlist where TestCode='" + tstc + "'";
                                                    MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL2, conn);
                                                    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                                    DataSet ds2 = new DataSet();
                                                    mydata12.Fill(ds2);
                                                    DataTable dt2 = new DataTable();
                                                    dt2 = ds2.Tables[0];
                                                    foreach (DataRow dr2 in dt2.Rows)
                                                    {
                                                        if (dr2 != null)
                                                        {
                                                            LabTestandProfileDetails Sampdetails = new LabTestandProfileDetails();
                                                            Sampdetails.SampleContainer = dr2["SampleContainer"].ToString();
                                                            Sampdetails.TestCode = dr2["TestCode"].ToString();
                                                            Sampdetails.TestName = dr2["TestName"].ToString();
                                                            Sampdetails.ProfileCode = ProfileCode;
                                                            Sampdetails.ProfileName = ProfileName;
                                                            lstDetails.Add(Sampdetails);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ProfileCode = "";
                                    }
                                }
                            }
                            profileListCount = 0;
                        }
                    }
                    else if (testListcount > 0 && profileListCount == 0)
                    {

                        string strSQL = "select LL.testcode from  labtestlist LL  where LL.MrdNo='" + mrdNo + "'";
                        //conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {

                                string testcode = "";
                                LabTestandProfileDetails Lt = new LabTestandProfileDetails();
                                testcode = dr["TestCode"].ToString();
                                if (testcode != "")
                                {
                                    string strSQL3 = "select SampleContainer,TestCode,TestName from  childtestlist where TestCode='" + testcode + "'";
                                    MySqlDataAdapter mydata12 = new MySqlDataAdapter(strSQL3, conn);
                                    MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                    DataSet ds3 = new DataSet();
                                    mydata12.Fill(ds3);
                                    DataTable dt2 = new DataTable();
                                    dt2 = ds3.Tables[0];
                                    foreach (DataRow dr2 in dt2.Rows)
                                    {
                                        if (dr2 != null)
                                        {
                                            LabTestandProfileDetails SampdetailsDirect = new LabTestandProfileDetails();
                                            SampdetailsDirect.SampleContainer = dr2["SampleContainer"].ToString();
                                            SampdetailsDirect.TestCode = dr2["TestCode"].ToString();
                                            SampdetailsDirect.TestName = dr2["TestName"].ToString();
                                            lstDetails.Add(SampdetailsDirect);
                                        }
                                    }
                                }
                                else
                                {
                                    testcode = "";
                                }

                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }
        #endregion

        #region insertViewListDetailsInLabOrder
        /// <summary>
        ///
        /// </summary>
        ///
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/insertViewListDetailsInLabOrder")]
        [HttpPost]
        public void insertViewListDetailsInLabOrder(ViewListDetails viewdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    int count = 0;
                    string ID = "0";
                    string testcodeRef = "0";
                    var checkTestCode = "";
                    if (viewdetails.TestCodeRef.Contains("-"))
                    {
                        testcodeRef = viewdetails.TestCodeRef.Split('-')[0];
                    }
                    else
                    {
                        testcodeRef = viewdetails.TestCodeRef;
                    }

                    if ((viewdetails.TestCode).Contains('-'))
                    {
                        checkTestCode = viewdetails.TestCode;
                    }
                    else
                    {
                        checkTestCode = viewdetails.TestCodeRef + '-' + viewdetails.TestCode;
                    }


                    #region codeto test existance of testcode
                    string query = "Select count(*) as count, ID from viewlistdetails where MrdNo='" + viewdetails.MrdNo + "' AND TestCode='" + checkTestCode + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(query, conn);
                    MySqlCommandBuilder cmd1 = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];

                    count = Convert.ToInt32(dt.Rows[0]["count"]);

                    //if (count == 0)
                    //{
                    //if (viewdetails.TestCodeRef.Contains("-"))
                    //{
                    //    testcodeRef = viewdetails.TestCodeRef.Split('-')[0];
                    //}
                    //else
                    //{
                    //    testcodeRef = viewdetails.TestCodeRef;
                    //}

                    string strSQL = "INSERT INTO viewlistdetails(MrdNo,TestName,TestCode,TestPriority,ProfilePriority,SubProfilePriority,AcceptAll,RejectAll,Accept,Reject,TestType,TestCodeRef,DeptPriority,ReportPriority) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", viewdetails.MrdNo);
                    cmd.Parameters.AddWithValue("@val2", viewdetails.TestName);
                    cmd.Parameters.AddWithValue("@val3", viewdetails.TestCode);
                    cmd.Parameters.AddWithValue("@val4", viewdetails.TestPriority);
                    cmd.Parameters.AddWithValue("@val5", viewdetails.ProfilePriority);
                    cmd.Parameters.AddWithValue("@val6", viewdetails.SubProfilePriority);
                    cmd.Parameters.AddWithValue("@val7", 0);
                    cmd.Parameters.AddWithValue("@val8", 0);
                    cmd.Parameters.AddWithValue("@val9", 0);
                    cmd.Parameters.AddWithValue("@val10", 0);
                    cmd.Parameters.AddWithValue("@val11", viewdetails.TestType);
                    cmd.Parameters.AddWithValue("@val12", viewdetails.TestCodeRef);
                    cmd.Parameters.AddWithValue("@val13", viewdetails.DeptPriority);
                    cmd.Parameters.AddWithValue("@val14", viewdetails.ReportPriority);
                    cmd.ExecuteNonQuery();
                    // }
                    ////else
                    ////{                        
                    ////    foreach (DataRow dr in dt.Rows)
                    ////    {
                    ////        if (dr != null)
                    ////        {
                    ////            ID = dr[1].ToString();
                    ////        }
                    ////        if (viewdetails.TestCodeRef.Contains("-"))
                    ////        {
                    ////            testcodeRef = viewdetails.TestCodeRef.Split('-')[0];
                    ////        }
                    ////        else
                    ////        {
                    ////            testcodeRef = viewdetails.TestCodeRef;
                    ////        }
                    ////        conn.Open();                            
                    ////        string strSQL = "Update viewlistdetails set TestPriority=" + viewdetails.TestPriority + ",ProfilePriority=" + viewdetails.ProfilePriority + ",SubProfilePriority=" + viewdetails.SubProfilePriority + ", DeptPriority=" + viewdetails.DeptPriority + ",TestType=" + viewdetails.TestType + " Where ID=" + ID + "";
                    ////        MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    ////        cmd.CommandType = CommandType.Text;
                    ////        cmd.ExecuteNonQuery();
                    ////    }
                    ////}
                    #endregion

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();

                }
            }
        }
        #endregion

        #region selectViewListDetailsCount

        [Route("api/Account/selectViewListDetailsCount")]
        [HttpGet]
        public List<ViewListCount> selectViewListDetailsCount(string mrdNo, int flag)
        {
            List<ViewListCount> lstDetails = new List<ViewListCount>();
            DataTable dt = new DataTable();

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (flag == 2)
                    {
                        strSQL = "SELECT Count(*) as MRCOUNT, (SELECT Count(*) from viewlistdetails where MrdNo = '" + mrdNo + "' and Accept = 1 and AcceptAll = 1 ) as MRAllAccpt, " +
                                   " (SELECT Count(*) from viewlistdetails where MrdNo = '" + mrdNo + "' and Accept = 1 ) as MRAccpt from viewlistdetails where MrdNo = '" + mrdNo + "' and Accept=0 and AcceptAll=0";
                    }
                    else if (flag == 1)
                    {
                        strSQL = "SELECT Count(*) as MRAccpt from viewlistdetails where MrdNo = '" + mrdNo + "' and Accept = 1";
                    }

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ViewListCount lst = new ViewListCount();
                            if (flag == 2)
                            {
                                lst.MRDCOUNT = Convert.ToInt32(dr["MRCOUNT"].ToString());
                                lst.MRAllAccpt = Convert.ToInt32(dr["MRAllAccpt"].ToString());
                            }
                            lst.MRAccpt = Convert.ToInt32(dr["MRAccpt"].ToString());
                            lstDetails.Add(lst);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstDetails;
        }
        #endregion

        #region UpdLabOrderStatus
        /// <summary>
        /// 
        ///
        /// </summary>
        ///<param name="UpdLabOrderStatus"
        [Route("api/Account/UpdLabOrderStatus")]
        [HttpPost]
        public void UpdLabOrderStatus(string mrdNo, string status)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string slctSQL = "select * from laborderstatus where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(slctSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string updSQL = "UPDATE laborderstatus SET FinalStatus ='" + status + "' where MrdNo ='" + mrdNo + "' and LaborderStatusId=" + dr["LaborderStatusId"].ToString() + " ";
                                MySqlCommand upCmd = new MySqlCommand(updSQL, conn);
                                upCmd.CommandType = CommandType.Text;
                                upCmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region acceptViewListDetailsCount

        [Route("api/Account/acceptViewListDetailsCount")]
        [HttpGet]
        public string acceptViewListDetailsCount(string mrdNo, int acceptFlag)
        {
            List<ViewListDetails> lstDetails = new List<ViewListDetails>();
            DataTable dt = new DataTable();
            string MRDCOUNT = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (acceptFlag == 1)
                    {
                        strSQL = "SELECT Count(*) as MRCOUNT from viewlistdetails where MrdNo='" + mrdNo + "' and Accept=1 and AcceptAll=1 ";
                    }
                    else
                    {
                        strSQL = "SELECT Count(*) as MRCOUNT from viewlistdetails where MrdNo='" + mrdNo + "' and Accept=1";
                    }

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            MRDCOUNT = dr["MRCOUNT"].ToString();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return MRDCOUNT;
        }
        #endregion

        #region selectViewListDetails

        [Route("api/Account/selectViewListDetails")]
        [HttpGet]
        public List<ViewListDetails> selectViewListDetails(string mrdNo)
        {
            List<ViewListDetails> lstDetails = new List<ViewListDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * from viewlistdetails where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ViewListDetails childTestDetails1 = new ViewListDetails();
                            childTestDetails1.ID = Convert.ToInt32(dr["ID"]);
                            childTestDetails1.MrdNo = dr["MrdNo"].ToString();
                            childTestDetails1.TestName = dr["TestName"].ToString();
                            childTestDetails1.TestType = Convert.ToInt32(dr["TestType"]);
                            childTestDetails1.TestCodeRef = dr["TestCodeRef"].ToString();
                            childTestDetails1.TestCode = dr["TestCode"].ToString();
                            childTestDetails1.TestPriority = Convert.ToInt32(dr["TestPriority"]);
                            //childTestDetails1.DeptPriority = Convert.ToDouble(dr["DeptPriority"]);
                            //childTestDetails1.ProfilePriority = Convert.ToInt32(dr["ProfilePriority"]);
                            //childTestDetails1.SubProfilePriority = Convert.ToDouble(dr["SubProfilePriority"]);

                            childTestDetails1.Reject = dr["Reject"].ToString();
                            childTestDetails1.Accept = dr["Accept"].ToString();

                            childTestDetails1.RejectAll = dr["RejectAll"].ToString();
                            childTestDetails1.AcceptAll = dr["AcceptAll"].ToString();
                            lstDetails.Add(childTestDetails1);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstDetails;
        }
        #endregion

        #region getAllViewListDetails

        [Route("api/Account/getAllViewListDetails")]
        [HttpGet]
        public List<ViewListDetails> getAllViewListDetails(string mrdNo)
        {
            List<ViewListDetails> lstDetails = new List<ViewListDetails>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * from viewlistdetails where MrdNo='" + mrdNo + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        ViewListDetails profileDetails = new ViewListDetails();
                        if (dr != null)
                        {
                            profileDetails.ID = (int)dr["ID"];
                            profileDetails.Accept = dr["Accept"].ToString();
                            lstDetails.Add(profileDetails);

                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }

            }
            return lstDetails;
        }



        #endregion


        #region updateAcceptAll
        /// <summary>
        /// 
        ///
        /// </summary>
        ///<param name="updateAcceptAll"
        [Route("api/Account/updateAcceptAll")]
        [HttpPost]
        public void updateAcceptAll(ViewListDetails viewlistdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE viewlistdetails SET AcceptAll =1,Accept=1  where MrdNo ='" + viewlistdetails.MrdNo + "'";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertAllRejectedSamples
        /// <summary>
        /// 
        ///
        /// </summary>
        ///<param name="insertAllRejectedSamples"
        [Route("api/Account/insertAllRejectedSamples")]
        [HttpPost]
        public void insertAllRejectedSamples(string MrdNo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string selctQuery = "select RejSampleCollecterId from  rejectedsamplecollecter where collected = 1 and MrdNo = '" + MrdNo + "'";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(selctQuery, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string updQuery = "update  rejectedsamplecollecter set collected = 0 where RejSampleCollecterId=" + dr["RejSampleCollecterId"] + "";
                                MySqlCommand UpdCmd = new MySqlCommand(updQuery, conn);
                                UpdCmd.CommandType = CommandType.Text;
                                UpdCmd.ExecuteNonQuery();
                            }
                        }
                    }
                    else
                    {
                        string insrejQuery = "insert into rejectedsamplecollecter (MrdNo,TestCode,TestName,sampleName,ProfileCode,ProfileName,AlternativeSampleName,collected,Notcollected,Later)" +
                                         " select MrdNo,TestCode,TestName,sampleName,ProfileCode,ProfileName,AlternativeSampleName,collected,Notcollected,Later from samplecollecter where MrdNo ='" + MrdNo + "' and collected=0";

                        MySqlCommand insertCmd = new MySqlCommand(insrejQuery, conn);
                        insertCmd.CommandType = CommandType.Text;
                        insertCmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region updateRejectAll
        /// <summary>
        /// 
        ///
        /// </summary>
        ///<param name="updateRejectAll"
        [Route("api/Account/updateRejectAll")]
        [HttpPost]
        public void updateRejectAll(ViewListDetails viewlistdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE viewlistdetails SET RejectAll =1, Reject=1,Accept=0, AcceptAll=0 where ID ='" + viewlistdetails.ID + "' and Accept<>1";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                    string updateStrSQL = "update samplecollecter set collected=0 where  MrdNo ='" + viewlistdetails.MrdNo + "'";
                    MySqlCommand updateCmd = new MySqlCommand(updateStrSQL, conn);
                    updateCmd.CommandType = CommandType.Text;
                    updateCmd.ExecuteNonQuery();


                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region updateElementPriorityStatusInTemplates
        /// <summary>
        ///
        ///
        /// </summary>
        /// <param name="progressTable"></param>
        [Route("api/Account/updateElementPriorityStatusInTemplates")]
        [HttpPost]
        public void updateElementPriorityStatusInTemplates(TestMultipleComponents testcomponents)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    conn.Open();
                    if (testcomponents.Flag == 1)
                    {
                        strSQL = "UPDATE  elements SET PriorityStatus='" + testcomponents.PriorityStatus + "' where ElementId='" + testcomponents.ElementId + "'";
                    }
                    else if (testcomponents.Flag == 2)
                    {
                        strSQL = "delete from elements where ElementId='" + testcomponents.ElementId + "'";
                    }
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }

        #endregion



        #region getAllChildTestListwithParagraphTest
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllChildTestListwithParagraphTest")]
        [HttpGet]
        public List<ChildTestList> getAllChildTestListwithParagraphTest()
        {
            List<ChildTestList> lstChildTestDetails = new List<ChildTestList>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ChildTestList where commonParagraph ='yes' and ActiveStatus=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            ChildTestList childTestList = new ChildTestList();

                            childTestList.TestID = (int)dr["TestID"];
                            childTestList.ProfileID = (int)dr["ProfileID"];
                            childTestList.TestName = dr["TestName"].ToString();
                            childTestList.TestCode = dr["TestCode"].ToString();
                            lstChildTestDetails.Add(childTestList);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstChildTestDetails;
            }
        }
        #endregion



        #region getAllElementNameByTestCodeInParagraph
        /// <summary>
        ///  Table - ChildTestList
        /// </summary>
        /// Listed all values from ChildTestList table
        /// <returns></returns>
        [Route("api/Account/getAllElementNameByTestCodeInParagraph")]
        [HttpGet]
        public List<TestMultipleComponents> getAllElementNameByTestCodeInParagraph(string testcode)
        {
            List<TestMultipleComponents> lstElementcomponentstDetails = new List<TestMultipleComponents>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  elements where TestCode = '" + testcode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            TestMultipleComponents Elementcomponents = new TestMultipleComponents();

                            Elementcomponents.ElementId = (int)dr["ElementId"];
                            Elementcomponents.ElementName = dr["ElementName"].ToString();
                            Elementcomponents.TestCode = dr["TestCode"].ToString();
                            if (dr["PriorityStatus"] != DBNull.Value)
                            {
                                Elementcomponents.PriorityStatus = Convert.ToInt32(dr["PriorityStatus"].ToString());
                            }
                            else
                            {
                                Elementcomponents.PriorityStatus = 0;
                            }
                            lstElementcomponentstDetails.Add(Elementcomponents);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstElementcomponentstDetails;
            }
        }
        #endregion


        #region insertBoneMarrowNewTemp
        /// <summary>
        /// Table - insert BoneMarrowAspiration
        /// </summary>
        /// <param name="insuranceprofilelist"></param>
        [Route("api/Account/insertBoneMarrowNewTemp")]
        [HttpPost]
        public void insertBoneMarrowNewTemp(BoneMarrowAspirationNew boneMarrowAspirationNew)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and TestCode = '" + boneMarrowAspirationNew.TestCode + "' and ElementId ='" + boneMarrowAspirationNew.ElementId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL1 = "INSERT INTO  bonemarrowaspiration(MrdNo,TestCode,TestName,ElementId,ElementName,TemplateId,TemplateName,TemplateDescription) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                        // conn.Open();
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@val1", boneMarrowAspirationNew.MrdNo);
                        cmd1.Parameters.AddWithValue("@val2", boneMarrowAspirationNew.TestCode);
                        cmd1.Parameters.AddWithValue("@val3", boneMarrowAspirationNew.TestName);
                        cmd1.Parameters.AddWithValue("@val4", boneMarrowAspirationNew.ElementId);
                        cmd1.Parameters.AddWithValue("@val5", boneMarrowAspirationNew.ElementName);
                        cmd1.Parameters.AddWithValue("@val6", boneMarrowAspirationNew.TemplateId);
                        cmd1.Parameters.AddWithValue("@val7", boneMarrowAspirationNew.TemplateName);
                        cmd1.Parameters.AddWithValue("@val8", boneMarrowAspirationNew.TemplateDescription);
                        cmd1.ExecuteNonQuery();
                    }
                    else
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string strSQL1 = "UPDATE bonemarrowaspiration SET TemplateDescription='" + boneMarrowAspirationNew.TemplateDescription + "' where MrdNo='" + boneMarrowAspirationNew.MrdNo + "' and TestCode='" + boneMarrowAspirationNew.TestCode + "' and ElementId='" + boneMarrowAspirationNew.ElementId + "' ";
                                // conn.Open();
                                MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                                cmd1.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion




        #region savedetailsForVerfication
        [Route("api/Account/savedetailsForVerfication")]
        [HttpPost]
        public void savedetailsForVerfication(string mrdNo)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL;
                    strSQL = "select * from labresultverification where MrdNo='" + mrdNo + "' ";
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        strSQL = "insert into labresultverification(Mrdno, TestCode, TestName, RegId,saveFlag,confirmFlag,CancelFlag) " +
                                 " select '" + mrdNo + "', vd.TestCode,SUBSTRING_INDEX(vd.TestName, '(', 1) as TestName,vd.ID as RegId,0,0,0 from viewlistdetails vd where vd.Mrdno = '" + mrdNo + "' ";
                        MySqlCommand scmd = new MySqlCommand(strSQL, conn);
                        scmd.CommandType = CommandType.Text;
                        scmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    string logdetails = ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllDetailsListWithAcceptOrReject
        /// <summary>
        /// modified by kalif for accept reject hide show
        /// </summary>
        /// <param name="mrdNo"></param>
        /// <returns></returns>
        [Route("api/Account/getAllDetailsListWithAcceptOrReject")]
        [HttpPost]
        public List<ViewListDetails> getAllDetailsListWithAcceptOrReject(ViewListDetails getviewData)
        {
            List<ViewListDetails> lstDetails = new List<ViewListDetails>();
            List<ViewListDetails> lstDetailsnew = new List<ViewListDetails>();
            string MrdNo = getviewData.MrdNo;
            string testcodeRef = getviewData.TestCode;
            int accept = Convert.ToInt32(getviewData.Accept);
            int acceptall = Convert.ToInt32(getviewData.AcceptAll);
            int reject = Convert.ToInt32(getviewData.Reject);
            int rejectall = Convert.ToInt32(getviewData.RejectAll);
            DataTable dt = new DataTable();
            var multiCompCode = "";
            var units = "";
            var preHistory = "";
            var finalResult = "";
            var ageDay = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL;
                    if ((accept == 1) && (acceptall == 0))
                    {
                        strSQL = "select distinct pr.RegID,vd.Id,rt.Result,rt.Comment1,rt.SpecialComments,rt.Status,rt.confirmFlag,rt.saveFlag,vd.Id,vd.Accept,vd.AcceptAll,vd.Reject,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode,vd.Calculation," +
                            "vd.TestPriority,vd.ProfilePriority,vd.SubProfilePriority,vd.DeptPriority,vd.ReportPriority,vd.TestCodeRef,vd.TestType,pr.Age,pr.AgeDay,pr.Sex,vd.DispalyName " +
                            "from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                            "inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo left join resultlabtest rt on vd.MrdNo = rt.MrdNo and vd.TestCode=rt.TestCode where vd.MrdNo = '" + MrdNo + "' " +
                            "and vd.Accept=" + accept + " Order by ReportPriority, ProfilePriority, SubProfilePriority, TestPriority,vd.ID";
                    }
                    else if ((acceptall == 1))
                    {
                        strSQL = "select distinct pr.RegID,vd.Id,rt.Result,rt.Comment1,rt.SpecialComments,rt.Status,rt.confirmFlag,rt.saveFlag,vd.Accept,vd.AcceptAll,vd.Reject,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode,vd.Calculation," +
                            "vd.TestPriority,vd.ProfilePriority,vd.SubProfilePriority,vd.DeptPriority,vd.ReportPriority,vd.TestCodeRef,vd.TestType,pr.Age,pr.AgeDay,pr.Sex,vd.DispalyName " +
                            "from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                            "inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo left join resultlabtest rt on vd.MrdNo = rt.MrdNo and vd.TestCode=rt.TestCode where vd.MrdNo = '" + MrdNo + "' " +
                            "and vd.AcceptAll=" + acceptall + " Order by ReportPriority, ProfilePriority, SubProfilePriority, TestPriority,vd.ID";
                    }
                    else if (((acceptall == 0) && (accept == 0)))
                    {
                        strSQL = "select distinct pr.RegID,vd.Id,rt.Result,rt.Comment1,rt.SpecialComments,rt.Status,rt.confirmFlag,rt.saveFlag,vd.Id,vd.Accept,vd.AcceptAll,vd.Reject,vd.MrdNo,vd.ID,vd.TestName,vd.TestCode," + "vd.Calculation,vd.TestPriority,vd.ProfilePriority,vd.SubProfilePriority,vd.DeptPriority,vd.ReportPriority,vd.TestCodeRef,vd.TestType,pr.Age,pr.AgeDay,pr.Sex,vd.DispalyName " +
                            "from laborderstatus ls inner join patientregistration pr on ls.RegID = pr.RegID " +
                            "inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo left join resultlabtest rt on vd.MrdNo = rt.MrdNo and vd.TestCode=rt.TestCode where vd.MrdNo = '" + MrdNo + "' " +
                            "and vd.Accept=" + accept + " and vd.AcceptAll=" + acceptall + " Order by ReportPriority, ProfilePriority, SubProfilePriority, TestPriority,vd.ID";
                    }
                    else
                    {
                        strSQL = "select distinct pr.RegID,vd.Id,rt.Result,rt.Comment1,rt.SpecialComments,rt.Status,rt.confirmFlag,vd.Calculation, rt.saveFlag,vd.TestPriority,vd.DeptPriority,vd.ProfilePriority,vd.Id,vd.AcceptAll,vd.Accept," +
                            " vd.Reject,vd.MrdNo,ID,vd.TestName,vd.TestCode,vd.TestPriority,vd.ReportPriority,vd.DispalyName," +
                            "vd.ProfilePriority,vd.SubProfilePriority,vd.TestCodeRef,vd.TestType,pr.Age,pr.AgeDay,pr.Sex from laborderstatus ls " +
                            "inner join patientregistration pr on ls.RegID = pr.RegID inner join viewlistdetails vd on ls.MrdNo = vd.MrdNo " +
                            "left join resultlabtest rt on vd.MrdNo = rt.MrdNo and vd.TestCode=rt.TestCode where vd.MrdNo = '" + MrdNo + "' Order by ReportPriority, ProfilePriority, SubProfilePriority, TestPriority,vd.ID ";
                    }
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        ViewListDetails profileDetails = new ViewListDetails();
                        if (dr != null)
                        {
                            profileDetails.RegID = dr["RegID"].ToString();
                            profileDetails.ID = (int)dr["ID"];
                            profileDetails.TestCode = dr["TestCode"].ToString();
                            profileDetails.TestName = dr["TestName"].ToString();
                            profileDetails.DispalyName = dr["DispalyName"].ToString();

                            profileDetails.TestType = (int)dr["TestType"];
                            profileDetails.AcceptAll = dr["AcceptAll"].ToString();
                            profileDetails.Accept = dr["Accept"].ToString();
                            profileDetails.Reject = dr["Reject"].ToString();
                            profileDetails.MrdNo = dr["MrdNo"].ToString();
                            string patientAge = dr["Age"].ToString();
                            profileDetails.Age = patientAge.Split('-')[0];
                            string ageFlag = patientAge.Split('-')[1];
                            string Sex = dr["Sex"].ToString();

                            ageDay = Convert.ToInt32(dr["AgeDay"].ToString());

                            profileDetails.Sex = dr["Sex"].ToString();
                            profileDetails.TestCodeRef = dr["TestCodeRef"].ToString();

                            profileDetails.Result = dr["Result"].ToString();
                            profileDetails.Comments = dr["Comment1"].ToString();

                            //profileDetails.TestPriority = Convert.ToDouble(dr["TestPriority"]);
                            //profileDetails.ProfilePriority = Convert.ToDouble(dr["ProfilePriority"]);
                            //profileDetails.SubProfilePriority = Convert.ToDouble(dr["SubProfilePriority"]);

                            if ((dr["TestPriority"]) != DBNull.Value)
                            {
                                profileDetails.TestPriority = Convert.ToDouble(dr["TestPriority"]);
                            }
                            else
                            {
                                profileDetails.TestPriority = 0;
                            }
                            if ((dr["ProfilePriority"]) != DBNull.Value)
                            {
                                profileDetails.ProfilePriority = Convert.ToDouble(dr["ProfilePriority"]);
                            }
                            else
                            {
                                profileDetails.ProfilePriority = 0;
                            }
                            if ((dr["SubProfilePriority"]) != DBNull.Value)
                            {
                                profileDetails.SubProfilePriority = Convert.ToDouble(dr["SubProfilePriority"]);
                            }
                            else
                            {
                                profileDetails.SubProfilePriority = 0;
                            }
                            if ((dr["Result"].ToString()) != null)
                            {
                                profileDetails.Result = dr["Result"].ToString();
                            }
                            else { profileDetails.Result = ""; }
                            if ((dr["Comment1"].ToString()) != null)
                            {
                                profileDetails.Comments = dr["Comment1"].ToString();
                            }
                            else { profileDetails.Comments = ""; }
                            if ((dr["SpecialComments"].ToString()) != null)
                            {
                                profileDetails.SpecialComments = dr["SpecialComments"].ToString();
                            }
                            else { profileDetails.SpecialComments = ""; }

                            if ((dr["Status"]) != DBNull.Value)
                            {
                                profileDetails.Status = Convert.ToInt32(dr["Status"]);
                            }
                            else
                            {
                                profileDetails.Status = 0;
                            }
                            if ((dr["confirmFlag"]) != DBNull.Value)
                            {
                                profileDetails.confirmFlag = Convert.ToInt32(dr["confirmFlag"]);
                            }
                            else { profileDetails.confirmFlag = 0; }
                            if ((dr["saveFlag"]) != DBNull.Value)
                            {
                                profileDetails.saveFlag = Convert.ToInt32(dr["saveFlag"]);
                            }
                            else { profileDetails.saveFlag = 0; }

                            #region multicomponents
                            if (profileDetails.TestCodeRef != "" && profileDetails.TestType == 1)
                            {
                                if (profileDetails.TestCodeRef.ToString() != multiCompCode)
                                {
                                    DataTable testDetailsDT = new DataTable();
                                    string strTestDetails = "";
                                    string mulpregRefRange = "";
                                    if (getviewData.CheckFlag == 1)
                                    {
                                        strTestDetails = "SELECT distinct * from  testmultiplecomponents where TestCode='" + profileDetails.TestCodeRef + "' and ElementName is not null " +
                                                            " and ElementName not in(SELECT TestName from viewlistdetails where MrdNo= '" + MrdNo + "' and Accept=1) order by PriorityStatus";
                                    }
                                    else if (getviewData.CheckFlag == 2)
                                    {
                                        strTestDetails = "SELECT distinct * from  testmultiplecomponents where TestCode='" + profileDetails.TestCodeRef + "' and ElementName is not null " +
                                                           " and ElementName in(SELECT TestName from viewlistdetails where MrdNo= '" + MrdNo + "' and TestCode='" + profileDetails.TestCodeRef + "' and Accept=1) order by PriorityStatus";
                                    }
                                    else
                                    {
                                        strTestDetails = "SELECT distinct * from  testmultiplecomponents where TestCode='" + profileDetails.TestCodeRef + "' order by PriorityStatus";
                                    }

                                    MySqlDataAdapter strTestDetailsData = new MySqlDataAdapter(strTestDetails, conn);
                                    MySqlCommandBuilder strDetailsCmd = new MySqlCommandBuilder(strTestDetailsData);
                                    DataSet strDetailsDataSet = new DataSet();
                                    strTestDetailsData.Fill(strDetailsDataSet);
                                    testDetailsDT = strDetailsDataSet.Tables[0];

                                    string TestMultiChild = "SELECT  distinct * from childtestlist where TestCode='" + profileDetails.TestCodeRef + "' ";
                                    MySqlDataAdapter MultiChildData = new MySqlDataAdapter(TestMultiChild, conn);
                                    MySqlCommandBuilder MultiChildCmd = new MySqlCommandBuilder(MultiChildData);
                                    DataSet childDataSet = new DataSet();
                                    DataTable childDataDT = new DataTable();
                                    MultiChildData.Fill(childDataSet);
                                    childDataDT = childDataSet.Tables[0];
                                    mulpregRefRange = GetPregRefRange(profileDetails.TestCodeRef, MrdNo);

                                    foreach (DataRow Chlddr1 in childDataDT.Rows)
                                    {
                                        if (Chlddr1 != null)
                                        {
                                            var agewiseCriticalValue = Chlddr1["AgewiseCriticalValue"].ToString();
                                            var agewiseReferenceRange = Chlddr1["AgewiseReferenceRange"].ToString();
                                            var calculationPresent = Chlddr1["CalculationPresent"].ToString();
                                            var agewiseSexReferenceValue = Chlddr1["AgewiseSexReferenceValue"].ToString();
                                            if ((Chlddr1["units"].ToString()) != "NULL")
                                            {
                                                units = Chlddr1["units"].ToString();
                                            }
                                            else { units = null; }
                                            #region newlyadded
                                            foreach (DataRow dr1 in testDetailsDT.Rows)
                                            {
                                                ViewListDetails MultiDetailsDetails = new ViewListDetails();
                                                if (dr1 != null)
                                                {
                                                    // added to retrive result from resultlabtest table for multicomponents
                                                    #region addmulticomponentsresult
                                                    var element = dr1["ElementName"].ToString();
                                                    string getResult = "SELECT rt.Result,rt.Comment1,rt.SpecialComments,rt.Status,rt.confirmFlag,rt.saveFlag,rt.CalculationInformation,rt.ResultLabId " +
                                                        " from  resultlabtest rt where rt.MrdNo = '" + MrdNo + "' and rt.TestName = '" + element + "' and rt.TestCode='" + profileDetails.TestCodeRef + "'";
                                                    MySqlDataAdapter getResultData = new MySqlDataAdapter(getResult, conn);
                                                    MySqlCommandBuilder getResultCmd = new MySqlCommandBuilder(getResultData);
                                                    DataSet getResultSet = new DataSet();
                                                    getResultData.Fill(getResultSet);
                                                    DataTable getResultdt = new DataTable();
                                                    getResultdt = getResultSet.Tables[0];

                                                    var currDate = DateTime.Now.ToString("MM/dd/yyyy");

                                                    string preHistSql = "SELECT Result FROM  labtesthistory where PatientID='" + profileDetails.RegID + "' and TestCode='" + profileDetails.TestCodeRef + "' and TestName='" + element + "' " +
                                                                        " and MrdNo <>'" + MrdNo + "' ORDER BY CreateDate DESC,ResultLabId DESC LIMIT  1;";
                                                    MySqlDataAdapter preHistData = new MySqlDataAdapter(preHistSql, conn);
                                                    MySqlCommandBuilder preHistCmd = new MySqlCommandBuilder(preHistData);
                                                    DataSet preHistDS = new DataSet();
                                                    preHistData.Fill(preHistDS);
                                                    DataTable preHistDT = new DataTable();
                                                    preHistDT = preHistDS.Tables[0];
                                                    preHistory = "";
                                                    if (preHistDT.Rows.Count > 0)
                                                    {
                                                        preHistory = preHistDT.Rows[0]["Result"].ToString();
                                                        if (preHistory == "")
                                                        { preHistory = "-NA-"; }
                                                    }
                                                    else { preHistory = "-NA-"; }
                                                    if ((getResultdt.Rows.Count > 0) && (getviewData.ResultFlag == 0))
                                                    {
                                                        foreach (DataRow refdr in getResultdt.Rows)
                                                        {
                                                            if (refdr != null)
                                                            {
                                                                if ((getResultdt.Rows[0]["Result"].ToString()) != null)
                                                                {
                                                                    MultiDetailsDetails.MultiResult = getResultdt.Rows[0]["Result"].ToString();
                                                                }
                                                                else { MultiDetailsDetails.MultiResult = ""; }


                                                                if ((getResultdt.Rows[0]["Status"].ToString()) != null)
                                                                {
                                                                    MultiDetailsDetails.Status = Convert.ToInt32(getResultdt.Rows[0]["Status"]);
                                                                }
                                                                else { MultiDetailsDetails.Status = 0; }
                                                                if ((getResultdt.Rows[0]["confirmFlag"].ToString()) != null)
                                                                {
                                                                    MultiDetailsDetails.confirmFlag = Convert.ToInt32(getResultdt.Rows[0]["confirmFlag"]);
                                                                }
                                                                else { MultiDetailsDetails.confirmFlag = 0; }
                                                                if ((getResultdt.Rows[0]["saveFlag"].ToString()) != null)
                                                                {
                                                                    MultiDetailsDetails.saveFlag = Convert.ToInt32(getResultdt.Rows[0]["saveFlag"]);
                                                                }
                                                                else { MultiDetailsDetails.saveFlag = 0; }
                                                                MultiDetailsDetails.Comments = getResultdt.Rows[0]["Comment1"].ToString();
                                                                MultiDetailsDetails.SpecialComments = getResultdt.Rows[0]["SpecialComments"].ToString();
                                                                MultiDetailsDetails.MultCalResult = getResultdt.Rows[0]["CalculationInformation"].ToString();
                                                                MultiDetailsDetails.PrevHistory = preHistory;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ((getviewData.ResultFlag == 1))
                                                        {
                                                            DataTable calDT = new DataTable();
                                                            string calSql = "SELECT * FROM  labresultverification where PatientID='" + profileDetails.RegID + "' " +
                                                                " and TestCode='" + profileDetails.TestCodeRef + "' and TestName='" + element + "' and  MrdNo='" + MrdNo + "' ";
                                                            MySqlDataAdapter calData = new MySqlDataAdapter(calSql, conn);
                                                            MySqlCommandBuilder calCmd = new MySqlCommandBuilder(calData);
                                                            DataSet calDS = new DataSet();
                                                            calData.Fill(calDS);
                                                            calDT = calDS.Tables[0];
                                                            if (calDT.Rows.Count > 0)
                                                            {
                                                                foreach (DataRow refdr in calDT.Rows)
                                                                {
                                                                    if (refdr != null)
                                                                    {
                                                                        //modified on 13/5/2020 for bringing already saved data
                                                                        if ((calDT.Rows[0]["FinalResult"]) != DBNull.Value)
                                                                        {
                                                                            MultiDetailsDetails.MultiFinalResult = calDT.Rows[0]["FinalResult"].ToString();
                                                                        }
                                                                        else
                                                                        {
                                                                            MultiDetailsDetails.MultiFinalResult = "";
                                                                        }

                                                                        if ((calDT.Rows[0]["Result"]) != DBNull.Value)
                                                                        {
                                                                            MultiDetailsDetails.MultiResult = calDT.Rows[0]["Result"].ToString();
                                                                        }
                                                                        else
                                                                        {

                                                                            MultiDetailsDetails.MultiResult = "";

                                                                        }

                                                                        if ((calDT.Rows[0]["Status"].ToString()) != null)
                                                                        {
                                                                            if (getResultdt.Rows.Count > 0)
                                                                            {
                                                                                if (getResultdt.Rows[0]["Status"] != DBNull.Value)
                                                                                {
                                                                                    MultiDetailsDetails.Status = Convert.ToInt32(getResultdt.Rows[0]["Status"].ToString());
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                MultiDetailsDetails.Status = Convert.ToInt32(calDT.Rows[0]["Status"]);
                                                                            }
                                                                        }
                                                                        else
                                                                        {

                                                                            MultiDetailsDetails.Status = 0;

                                                                        }
                                                                        if ((calDT.Rows[0]["confirmFlag"].ToString()) != null)
                                                                        {
                                                                            if (getResultdt.Rows.Count > 0)
                                                                            {
                                                                                if (getResultdt.Rows[0]["confirmFlag"] != DBNull.Value)
                                                                                {
                                                                                    MultiDetailsDetails.confirmFlag = Convert.ToInt32(getResultdt.Rows[0]["confirmFlag"].ToString());
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                MultiDetailsDetails.confirmFlag = Convert.ToInt32(calDT.Rows[0]
                                                                                    ["confirmFlag"]);
                                                                            }

                                                                        }
                                                                        else
                                                                        {


                                                                            MultiDetailsDetails.confirmFlag = 0;

                                                                        }
                                                                        if ((calDT.Rows[0]["saveFlag"].ToString()) != null)
                                                                        {
                                                                            if (getResultdt.Rows.Count > 0)
                                                                            {
                                                                                if (getResultdt.Rows[0]["saveFlag"] != DBNull.Value)
                                                                                {
                                                                                    MultiDetailsDetails.saveFlag = Convert.ToInt32(getResultdt.Rows[0]["saveFlag"].ToString());
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                MultiDetailsDetails.saveFlag = Convert.ToInt32(calDT.Rows[0]["saveFlag"]);
                                                                            }

                                                                        }
                                                                        else
                                                                        {

                                                                            MultiDetailsDetails.saveFlag = 0;

                                                                        }
                                                                        if ((calDT.Rows[0]["Comment1"].ToString()) != null)
                                                                        {
                                                                            MultiDetailsDetails.Comments = calDT.Rows[0]["Comment1"].ToString();
                                                                        }
                                                                        else
                                                                        {

                                                                            MultiDetailsDetails.Comments = "";

                                                                        }
                                                                        if ((calDT.Rows[0]["SpecialComments"].ToString()) != null)
                                                                        {
                                                                            MultiDetailsDetails.SpecialComments = calDT.Rows[0]["SpecialComments"].ToString();
                                                                        }
                                                                        else
                                                                        {
                                                                            MultiDetailsDetails.SpecialComments = "";

                                                                        }
                                                                        MultiDetailsDetails.MultCalResult = calDT.Rows[0]["CalculationInformation"].ToString();
                                                                        MultiDetailsDetails.PrevHistory = preHistory;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                MultiDetailsDetails.MultiFinalResult = "";
                                                                //if (getResultdt.Rows.Count > 0)
                                                                //{
                                                                //    if ((getResultdt.Rows[0]["Result"].ToString()) != null)
                                                                //    {
                                                                //        MultiDetailsDetails.MultiResult = getResultdt.Rows[0]["Result"].ToString();
                                                                //    }
                                                                //    else { MultiDetailsDetails.MultiResult = ""; }


                                                                //    if ((getResultdt.Rows[0]["Status"].ToString()) != null)
                                                                //    {
                                                                //        MultiDetailsDetails.Status = Convert.ToInt32(getResultdt.Rows[0]["Status"]);
                                                                //    }
                                                                //    else { MultiDetailsDetails.Status = 0; }
                                                                //    if ((getResultdt.Rows[0]["confirmFlag"].ToString()) != null)
                                                                //    {
                                                                //        MultiDetailsDetails.confirmFlag = Convert.ToInt32(getResultdt.Rows[0]["confirmFlag"]);
                                                                //    }
                                                                //    else { MultiDetailsDetails.confirmFlag = 0; }
                                                                //    if ((getResultdt.Rows[0]["saveFlag"].ToString()) != null)
                                                                //    {
                                                                //        MultiDetailsDetails.saveFlag = Convert.ToInt32(getResultdt.Rows[0]["saveFlag"]);
                                                                //    }
                                                                //    else { MultiDetailsDetails.saveFlag = 0; }
                                                                //    MultiDetailsDetails.Comments = getResultdt.Rows[0]["Comment1"].ToString();
                                                                //    MultiDetailsDetails.SpecialComments = getResultdt.Rows[0]["SpecialComments"].ToString();
                                                                //    MultiDetailsDetails.MultCalResult = getResultdt.Rows[0]["CalculationInformation"].ToString();

                                                                //}
                                                            }
                                                        }
                                                        MultiDetailsDetails.PrevHistory = preHistory;

                                                    }
                                                    // string getId = "SELECT ID,Calculation,Accept,AcceptAll,Reject from  viewlistdetails rt where rt.MrdNo = '" + MrdNo + "' and TestName = '" + element + "'";
                                                    string getId = "";
                                                    string tstELement = "select * from calculationForTestDetails where TestCode='" + profileDetails.TestCodeRef.ToString() + "' and Elements='" + element + "'";
                                                    MySqlDataAdapter getEleData = new MySqlDataAdapter(tstELement, conn);
                                                    MySqlCommandBuilder rstCmd = new MySqlCommandBuilder(getEleData);
                                                    DataSet rstIdSet = new DataSet();
                                                    getEleData.Fill(rstIdSet);
                                                    DataTable rstIddt = new DataTable();
                                                    rstIddt = rstIdSet.Tables[0];
                                                    if (rstIddt.Rows.Count > 0)
                                                    {
                                                        getId = "SELECT rt.ID,Calculation,Accept,AcceptAll,Reject,cal.splcalculation from  viewlistdetails rt " +
                                                                   " left join calculationForTestDetails cal on rt.TestCode=cal.TestCode " +
                                                                   " where rt.MrdNo = '" + MrdNo + "' and TestName = '" + element + "' and cal.Elements= '" + element + "' and rt.TestCode='" + profileDetails.TestCodeRef + "' and cal.splcalculation is not null ";
                                                    }
                                                    else
                                                    {
                                                        getId = "SELECT rt.ID,Calculation,Accept,AcceptAll,Reject,cal.splcalculation from  viewlistdetails rt " +
                                                                   " left join calculationForTestDetails cal on rt.TestCode=cal.TestCode " +
                                                                   " where rt.MrdNo = '" + MrdNo + "' and TestName = '" + element + "' and rt.TestCode='" + profileDetails.TestCodeRef + "' ";
                                                    }

                                                    MySqlDataAdapter getIDData = new MySqlDataAdapter(getId, conn);
                                                    MySqlCommandBuilder getIDCmd = new MySqlCommandBuilder(getIDData);
                                                    DataSet getIdSet = new DataSet();
                                                    getIDData.Fill(getIdSet);
                                                    DataTable getIddt = new DataTable();
                                                    getIddt = getIdSet.Tables[0];
                                                    if (getIddt.Rows.Count > 0)
                                                    {
                                                        foreach (DataRow refdr1 in getIddt.Rows)
                                                        {
                                                            if (refdr1 != null)
                                                            {
                                                                if (getIddt.Rows[0]["ID"] != null)
                                                                {
                                                                    MultiDetailsDetails.ID = Convert.ToInt32(getIddt.Rows[0]["ID"]);
                                                                }
                                                                if (getIddt.Rows[0]["Calculation"] != null)
                                                                {
                                                                    MultiDetailsDetails.MultiCalculation = getIddt.Rows[0]["Calculation"].ToString();
                                                                }
                                                                else if (getIddt.Rows[0]["splcalculation"] != null)
                                                                {
                                                                    MultiDetailsDetails.MultiCalculation = getIddt.Rows[0]["Calculation"].ToString();
                                                                }
                                                                else { MultiDetailsDetails.MultiCalculation = "0"; }
                                                                if (getIddt.Rows[0]["Accept"] != null)
                                                                {
                                                                    MultiDetailsDetails.Accept = getIddt.Rows[0]["Accept"].ToString();
                                                                }
                                                                else { MultiDetailsDetails.Accept = "0"; }
                                                                if (getIddt.Rows[0]["AcceptAll"] != null)
                                                                {
                                                                    MultiDetailsDetails.AcceptAll = getIddt.Rows[0]["AcceptAll"].ToString();
                                                                }
                                                                else { MultiDetailsDetails.AcceptAll = "0"; }
                                                                if (getIddt.Rows[0]["Reject"] != null)
                                                                {
                                                                    MultiDetailsDetails.Reject = getIddt.Rows[0]["Reject"].ToString();
                                                                }
                                                                else { MultiDetailsDetails.Reject = "0"; }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        string getlabId = "SELECT vd.ID from  viewlistdetails vd where vd.MrdNo = '" + MrdNo + "' and vd.TestName = '" + element + "' and vd.TestCode='" + profileDetails.TestCodeRef + "' ";
                                                        MySqlDataAdapter getlabIDData = new MySqlDataAdapter(getlabId, conn);
                                                        MySqlCommandBuilder getlabIDCmd = new MySqlCommandBuilder(getlabIDData);
                                                        DataSet getlabIdSet = new DataSet();
                                                        getlabIDData.Fill(getlabIdSet);
                                                        DataTable getlabIddt = new DataTable();
                                                        getlabIddt = getlabIdSet.Tables[0];
                                                        if (getlabIddt.Rows.Count > 0)
                                                        {
                                                            MultiDetailsDetails.ID = Convert.ToInt32(getlabIddt.Rows[0]["ID"]);
                                                        }
                                                        MultiDetailsDetails.Accept = "0";
                                                        MultiDetailsDetails.AcceptAll = "0";
                                                        MultiDetailsDetails.Reject = "0";
                                                    }
                                                    #endregion
                                                    //ends
                                                    // added to retrive freetext or Displayvalue for multicomponents
                                                    #region addmultifreetextorDisplayvalue

                                                    #region multiCriticalValue
                                                    if (agewiseCriticalValue == "Yes" && agewiseReferenceRange != "Yes")
                                                    {
                                                        DataSet Referenceds1 = new DataSet();
                                                        DataTable Referencedt1 = new DataTable();

                                                        Referenceds1 = MultiValue(profileDetails.TestCodeRef, Convert.ToInt32(profileDetails.Age), element, ageFlag, ageDay);

                                                        Referencedt1 = Referenceds1.Tables[0];
                                                        if (Referencedt1.Rows.Count > 0)
                                                        {
                                                            foreach (DataRow valdr in Referencedt1.Rows)
                                                            {
                                                                if (valdr != null)
                                                                {
                                                                    if (mulpregRefRange.ToString() != "")
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = mulpregRefRange;
                                                                    }
                                                                    else if (((valdr["age1"] != DBNull.Value) || (valdr["age1"].ToString() != "")) && ((valdr["age1"].ToString() != "-") && (valdr["age1"].ToString() != "undefined-undefined")))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["age1"].ToString();
                                                                    }
                                                                    else if (((valdr["agedisp"] != DBNull.Value) && (valdr["agedisp"].ToString() != "")))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["agedisp"].ToString();
                                                                    }
                                                                    else if ((valdr["agefree"] != DBNull.Value) && (valdr["agefree"].ToString() != ""))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["agefree"].ToString();
                                                                    }
                                                                    else
                                                                    { MultiDetailsDetails.AgewiseNormalValue = ""; }
                                                                    if ((units != null))
                                                                    {
                                                                        MultiDetailsDetails.units = units;
                                                                    }
                                                                    else if ((dr1["Units"] != DBNull.Value))
                                                                    {
                                                                        MultiDetailsDetails.units = dr1["Units"].ToString();
                                                                    }
                                                                    else { MultiDetailsDetails.units = ""; }
                                                                    if ((valdr["agedisp"] != DBNull.Value))
                                                                    {
                                                                        MultiDetailsDetails.MultiDisplayValue = valdr["agedisp"].ToString();
                                                                    }
                                                                    else
                                                                    { MultiDetailsDetails.MultiDisplayValue = ""; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion multiCriticalValue

                                                    #region multiagewiseReference
                                                    else if (agewiseReferenceRange == "Yes" && agewiseCriticalValue != "Yes")
                                                    {
                                                        DataSet Referenceds = new DataSet();
                                                        DataTable Referencedt = new DataTable();

                                                        Referenceds = MultiValue(profileDetails.TestCodeRef, Convert.ToInt32(profileDetails.Age), element, ageFlag, ageDay);

                                                        Referencedt = Referenceds.Tables[0];

                                                        if (Referencedt.Rows.Count > 0)
                                                        {
                                                            foreach (DataRow valdr in Referencedt.Rows)
                                                            {
                                                                if (valdr != null)
                                                                {
                                                                    //MultiDetailsDetails.AgewiseNormalValue = valdr["age1"].ToString();                                                                    
                                                                    if (mulpregRefRange.ToString() != "")
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = mulpregRefRange;
                                                                    }
                                                                    else if (((valdr["age1"] != DBNull.Value) || (valdr["age1"].ToString() != "")) && ((valdr["age1"].ToString() != "-") && (valdr["age1"].ToString() != "undefined-undefined")))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["age1"].ToString();
                                                                    }
                                                                    else if (((valdr["agedisp"] != DBNull.Value) && (valdr["agedisp"].ToString() != "")))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["agedisp"].ToString();
                                                                    }
                                                                    else if ((valdr["agefree"] != DBNull.Value) && (valdr["agefree"].ToString() != ""))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["agefree"].ToString();
                                                                    }
                                                                    else
                                                                    { MultiDetailsDetails.AgewiseNormalValue = ""; }
                                                                    if ((units != null))
                                                                    {
                                                                        MultiDetailsDetails.units = units;
                                                                    }
                                                                    else if ((dr1["Units"] != DBNull.Value))
                                                                    {
                                                                        MultiDetailsDetails.units = dr1["Units"].ToString();
                                                                    }
                                                                    else { MultiDetailsDetails.units = ""; }
                                                                    if ((valdr["agedisp"] != DBNull.Value))
                                                                    {
                                                                        MultiDetailsDetails.MultiDisplayValue = valdr["agedisp"].ToString();
                                                                    }
                                                                    else
                                                                    { MultiDetailsDetails.MultiDisplayValue = ""; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    #region bothagewiseCriticalValueandagewiseReferenceRange
                                                    else if (agewiseReferenceRange == "Yes" && agewiseCriticalValue == "Yes")
                                                    {

                                                        DataSet multidsAll = new DataSet();
                                                        DataTable multidtAll = new DataTable();
                                                        multidsAll = MultiValue(profileDetails.TestCodeRef, Convert.ToInt32(profileDetails.Age), element, ageFlag, ageDay);

                                                        multidtAll = multidsAll.Tables[0];
                                                        if (multidtAll.Rows.Count > 0)
                                                        {
                                                            foreach (DataRow valdr in multidtAll.Rows)
                                                            {
                                                                if (valdr != null)
                                                                {
                                                                    //MultiDetailsDetails.AgewiseNormalValue = valdr["age1"].ToString();                                                                   
                                                                    if (mulpregRefRange.ToString() != "")
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = mulpregRefRange;
                                                                    }
                                                                    else if (((valdr["age1"] != DBNull.Value) || (valdr["age1"].ToString() != "")) && ((valdr["age1"].ToString() != "-") && (valdr["age1"].ToString() != "undefined-undefined")))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["age1"].ToString();
                                                                    }
                                                                    else if (((valdr["agedisp"] != DBNull.Value) && (valdr["agedisp"].ToString() != "")))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["agedisp"].ToString();
                                                                    }
                                                                    else if ((valdr["agefree"] != DBNull.Value) && (valdr["agefree"].ToString() != ""))
                                                                    {
                                                                        MultiDetailsDetails.AgewiseNormalValue = valdr["agefree"].ToString();
                                                                    }
                                                                    else
                                                                    { MultiDetailsDetails.AgewiseNormalValue = ""; }

                                                                    if ((dr1["Units"] != DBNull.Value))
                                                                    {
                                                                        MultiDetailsDetails.units = dr1["Units"].ToString();
                                                                    }
                                                                    if ((units != null))
                                                                    {
                                                                        MultiDetailsDetails.units = units;
                                                                    }
                                                                    else if ((dr1["Units"] != DBNull.Value))
                                                                    {
                                                                        MultiDetailsDetails.units = dr1["Units"].ToString();
                                                                    }
                                                                    else { MultiDetailsDetails.units = ""; }

                                                                    if (valdr["LowUpperCricticalValue"] != DBNull.Value)
                                                                    {
                                                                        MultiDetailsDetails.LowerCriticalValue = valdr["LowUpperCricticalValue"].ToString();
                                                                    }
                                                                    else
                                                                    {
                                                                        MultiDetailsDetails.LowerCriticalValue = null;
                                                                    }
                                                                    if ((valdr["agedisp"] != DBNull.Value))
                                                                    {
                                                                        MultiDetailsDetails.MultiDisplayValue = valdr["agedisp"].ToString();
                                                                    }
                                                                    else
                                                                    { MultiDetailsDetails.MultiDisplayValue = ""; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    #endregion
                                                    //ends                                                 
                                                    if ((dr1["Units"] != DBNull.Value))
                                                    {
                                                        MultiDetailsDetails.units = dr1["Units"].ToString();
                                                    }
                                                    MultiDetailsDetails.TestName = dr1["ElementName"].ToString();
                                                    MultiDetailsDetails.TestType = profileDetails.TestType;
                                                    MultiDetailsDetails.DispalyName = profileDetails.DispalyName;
                                                    MultiDetailsDetails.TestCode = profileDetails.DispalyName;
                                                    //MultiDetailsDetails.Reject = profileDetails.Reject;
                                                    MultiDetailsDetails.ProfilePriority = profileDetails.ProfilePriority;
                                                    MultiDetailsDetails.SubProfilePriority = profileDetails.SubProfilePriority;
                                                    MultiDetailsDetails.TestPriority = profileDetails.TestPriority;
                                                    MultiDetailsDetails.RegID = profileDetails.RegID;
                                                    MultiDetailsDetails.MrdNo = MrdNo;
                                                    MultiDetailsDetails.PregRefRange = mulpregRefRange;
                                                    MultiDetailsDetails.OutSourced = Chlddr1["Outsourced"].ToString();
                                                    if ((MultiDetailsDetails.AgewiseNormalValue == "") || MultiDetailsDetails.AgewiseNormalValue == null)
                                                    {
                                                        MultiDetailsDetails.AgewiseNormalValue = "";
                                                    }
                                                    lstDetails.Add(MultiDetailsDetails);
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                }
                                multiCompCode = profileDetails.TestCodeRef;
                            }
                            #endregion multicomponents
                            else if (profileDetails.TestCodeRef != "" && profileDetails.TestType == 4)
                            {
                                #region fortestonly
                                DataTable testDetailsDT = new DataTable();
                                //string strTestDetails = "SELECT  distinct * from childtestlist where TestCode='" + profileDetails.TestCodeRef + "' group by TestName";

                                string strTestDetails = "SELECT  distinct * from childtestlist where TestCode='" + profileDetails.TestCodeRef + "'";

                                //string strTestDetails = "select * from  childtestlist CL join  viewlistdetails VL on CL.TestCode = VL.TestCode where CL.TestCode='" + profileDetails.TestCode + "'";
                                MySqlDataAdapter strTestDetailsData = new MySqlDataAdapter(strTestDetails, conn);
                                MySqlCommandBuilder strDetailsCmd = new MySqlCommandBuilder(strTestDetailsData);
                                DataSet strDetailsDataSet = new DataSet();
                                strTestDetailsData.Fill(strDetailsDataSet);
                                testDetailsDT = strDetailsDataSet.Tables[0];

                                var currDate = DateTime.Now.ToString("MM/dd/yyyy");

                                DataTable preHistDT = new DataTable();
                                string preHistorySql = "SELECT Result FROM  labtesthistory where PatientID='" + profileDetails.RegID + "' and TestCode='" + profileDetails.TestCodeRef + "' " +
                                                       " and MrdNo <> '" + MrdNo + "'ORDER BY CreateDate DESC,ResultLabId DESC LIMIT  1";
                                MySqlDataAdapter preHistData = new MySqlDataAdapter(preHistorySql, conn);
                                MySqlCommandBuilder preHistCmd = new MySqlCommandBuilder(preHistData);
                                DataSet preHistDS = new DataSet();
                                preHistData.Fill(preHistDS);
                                preHistDT = preHistDS.Tables[0];

                                if (preHistDT.Rows.Count > 0)
                                {
                                    preHistory = preHistDT.Rows[0]["Result"].ToString();
                                    if (preHistory == "")
                                    { preHistory = "-NA-"; }
                                }
                                else { preHistory = "-NA-"; }

                                if ((getviewData.ResultFlag == 1))
                                {
                                    DataTable calDT = new DataTable();
                                    string calSql = "SELECT Result,FinalResult,Comment1,SpecialComments FROM  labresultverification where PatientID='" + profileDetails.RegID + "' and TestCode='" + profileDetails.TestCodeRef + "' and RegId='" + profileDetails.ID + "' ";
                                    MySqlDataAdapter calData = new MySqlDataAdapter(calSql, conn);
                                    MySqlCommandBuilder calCmd = new MySqlCommandBuilder(calData);
                                    DataSet calDS = new DataSet();
                                    calData.Fill(calDS);
                                    calDT = calDS.Tables[0];

                                    if (calDT.Rows.Count > 0)
                                    {
                                        finalResult = calDT.Rows[0]["FinalResult"].ToString();
                                        profileDetails.Result = calDT.Rows[0]["Result"].ToString();
                                        profileDetails.Comments = calDT.Rows[0]["Comment1"].ToString();
                                        profileDetails.SpecialComments = calDT.Rows[0]["SpecialComments"].ToString();
                                    }
                                    else
                                    {
                                        finalResult = "";
                                        profileDetails.Result = "";
                                    }
                                }
                                var mrno = profileDetails.MrdNo;
                                var testcode = profileDetails.TestCode;
                                //var testtype = profileDetails.TestType;
                                var testCodeRef = profileDetails.TestCodeRef;

                                foreach (DataRow dr1 in testDetailsDT.Rows)
                                {
                                    if (dr1 != null)
                                    {
                                        string TestName = dr1["TestName"].ToString();
                                        string pregRefRange = "";
                                        var agewiseCriticalValue = dr1["AgewiseCriticalValue"].ToString();
                                        var agewiseReferenceRange = dr1["AgewiseReferenceRange"].ToString();
                                        var calculationPresent = dr1["CalculationPresent"].ToString();
                                        var agewiseSexReferenceValue = dr1["AgewiseSexReferenceValue"].ToString();

                                        if ((dr1["units"].ToString()) != "NULL")
                                        {
                                            units = dr1["units"].ToString();
                                        }
                                        else { units = null; }

                                        #region CriticalValue
                                        if (agewiseCriticalValue == "Yes" && agewiseReferenceRange != "Yes")
                                        {

                                            DataSet ds2 = new DataSet();
                                            DataTable dt2 = new DataTable();
                                            if (dr1["Pregnancyrefrange"].ToString() == "Yes")
                                            {
                                                pregRefRange = GetPregRefRange(profileDetails.TestCodeRef, MrdNo);
                                            }
                                            if (ageFlag == "y")
                                            {
                                                ds2 = YearValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex, ageDay);
                                            }
                                            else if (ageFlag == "d")
                                            {
                                                ds2 = DateValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex);
                                            }
                                            dt2 = ds2.Tables[0];
                                            ViewListDetails childTestDetails = new ViewListDetails();
                                            if (dt2.Rows.Count > 0)
                                            {
                                                foreach (DataRow refdr in dt2.Rows)
                                                {
                                                    if (refdr != null)
                                                    {
                                                        childTestDetails.RegID = profileDetails.RegID;
                                                        childTestDetails.ID = profileDetails.ID;
                                                        childTestDetails.TestName = TestName;
                                                        childTestDetails.LowerCriticalValue = refdr["LowUpperCricticalValue"].ToString();
                                                        //childTestDetails.UnitMesurementFreeText = refdr["FreeText"].ToString();
                                                        //childTestDetails.MultiDisplayValue = refdr["DisplayValue"].ToString();
                                                        childTestDetails.Accept = profileDetails.Accept;
                                                        childTestDetails.AcceptAll = profileDetails.AcceptAll;
                                                        childTestDetails.MrdNo = profileDetails.MrdNo;
                                                        childTestDetails.TestCodeRef = profileDetails.TestCodeRef;
                                                        childTestDetails.TestCode = profileDetails.TestCode;
                                                        childTestDetails.TestType = profileDetails.TestType;
                                                        childTestDetails.Result = profileDetails.Result;
                                                        childTestDetails.Comments = profileDetails.Comments;
                                                        childTestDetails.TestPriority = profileDetails.TestPriority;
                                                        childTestDetails.SpecialComments = profileDetails.SpecialComments;
                                                        childTestDetails.ProfilePriority = profileDetails.ProfilePriority;
                                                        childTestDetails.SubProfilePriority = profileDetails.SubProfilePriority;
                                                        childTestDetails.Reject = profileDetails.Reject;
                                                        childTestDetails.Status = profileDetails.Status;
                                                        childTestDetails.confirmFlag = profileDetails.confirmFlag;
                                                        childTestDetails.saveFlag = profileDetails.saveFlag;
                                                        childTestDetails.PrevHistory = preHistory;
                                                        childTestDetails.FinalResult = finalResult;
                                                        childTestDetails.PregRefRange = pregRefRange;
                                                        childTestDetails.OutSourced = dr1["Outsourced"].ToString();
                                                        childTestDetails.MultiCalculation = "";

                                                        if ((refdr["agedisp"] != DBNull.Value))
                                                        {
                                                            childTestDetails.MultiDisplayValue = refdr["agedisp"].ToString();
                                                        }
                                                        else
                                                        { childTestDetails.MultiDisplayValue = ""; }
                                                        if (pregRefRange.ToString() != "")
                                                        {
                                                            childTestDetails.AgewiseNormalValue = pregRefRange;
                                                        }
                                                        else if (((refdr["age1"] != DBNull.Value) || (refdr["age1"].ToString() != "")) && ((refdr["age1"].ToString() != "-") && (refdr["age1"].ToString() != "undefined-undefined")))
                                                        {
                                                            childTestDetails.AgewiseNormalValue = refdr["age1"].ToString();
                                                        }
                                                        else if (((refdr["agedisp"] != DBNull.Value) && (refdr["agedisp"].ToString() != "")))
                                                        {
                                                            childTestDetails.AgewiseNormalValue = refdr["agedisp"].ToString();
                                                        }
                                                        else if ((refdr["agefree"] != DBNull.Value) && (refdr["agefree"].ToString() != ""))
                                                        {
                                                            childTestDetails.AgewiseNormalValue = refdr["agefree"].ToString();
                                                        }
                                                        else
                                                        { childTestDetails.AgewiseNormalValue = ""; }
                                                        if (units != null)
                                                        {
                                                            childTestDetails.units = units;
                                                        }
                                                        else
                                                        { childTestDetails.units = ""; }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (units != null)
                                                {
                                                    childTestDetails.units = units;
                                                }
                                                else
                                                { childTestDetails.units = ""; }
                                                childTestDetails.TestName = TestName;
                                                childTestDetails.TestType = profileDetails.TestType;
                                                childTestDetails.units = units;
                                                childTestDetails.ID = profileDetails.ID;
                                                childTestDetails.Accept = profileDetails.Accept;
                                                childTestDetails.AcceptAll = profileDetails.AcceptAll;
                                                childTestDetails.MrdNo = profileDetails.MrdNo;
                                                childTestDetails.TestCodeRef = profileDetails.TestCodeRef;
                                                childTestDetails.TestCode = profileDetails.TestCode;
                                                childTestDetails.Result = profileDetails.Result;
                                                childTestDetails.Comments = profileDetails.Comments;
                                                childTestDetails.SpecialComments = profileDetails.SpecialComments;
                                                childTestDetails.TestPriority = profileDetails.TestPriority;
                                                //childTestDetails.DeptPriority = profileDetails.DeptPriority;
                                                childTestDetails.ProfilePriority = profileDetails.ProfilePriority;
                                                childTestDetails.SubProfilePriority = profileDetails.SubProfilePriority;
                                                childTestDetails.Reject = profileDetails.Reject;
                                                childTestDetails.Status = profileDetails.Status;
                                                childTestDetails.confirmFlag = profileDetails.confirmFlag;
                                                childTestDetails.saveFlag = profileDetails.saveFlag;
                                                childTestDetails.RegID = profileDetails.RegID;
                                                childTestDetails.PrevHistory = preHistory;
                                                childTestDetails.FinalResult = finalResult;
                                                childTestDetails.MultiCalculation = "";
                                                if (pregRefRange.ToString() != "")
                                                {
                                                    childTestDetails.AgewiseNormalValue = pregRefRange;
                                                }
                                                else
                                                {
                                                    childTestDetails.AgewiseNormalValue = "";
                                                }
                                                childTestDetails.PregRefRange = pregRefRange;
                                                childTestDetails.OutSourced = dr1["Outsourced"].ToString();
                                            }
                                            if (calculationPresent == "Yes")
                                            {
                                                DataTable DTCalc = new DataTable();
                                                string strCalc = "SELECT  distinct units,splcalculation,formulaLabel,TestCode from calculationfortestdetails where TestCode='" + profileDetails.TestCodeRef + "' group by TestCode,units,splcalculation,formulaLabel";
                                                //string strTestDetails = "select * from  childtestlist CL join  viewlistdetails VL on CL.TestCode = VL.TestCode where CL.TestCode='" + profileDetails.TestCode + "'";
                                                MySqlDataAdapter strCalcData = new MySqlDataAdapter(strCalc, conn);
                                                MySqlCommandBuilder strCalcCmd = new MySqlCommandBuilder(strCalcData);
                                                DataSet DSCalc = new DataSet();
                                                strCalcData.Fill(DSCalc);
                                                DTCalc = DSCalc.Tables[0];
                                                foreach (DataRow Caldr in DTCalc.Rows)
                                                {
                                                    if (Caldr != null)
                                                    {
                                                        childTestDetails.Calcunits = Caldr["units"].ToString();
                                                        childTestDetails.splcalculation = Caldr["splcalculation"].ToString();
                                                        childTestDetails.formulaLabel = Caldr["formulaLabel"].ToString();
                                                        //lstDetails.Add(childTestDetails);
                                                    }
                                                }
                                                lstDetails.Add(childTestDetails);
                                            }
                                            else
                                            {
                                                lstDetails.Add(childTestDetails);
                                            }
                                        }
                                        #endregion CriticalValue

                                        #region agewiseReference
                                        else if (agewiseReferenceRange == "Yes" && agewiseCriticalValue != "Yes")
                                        {
                                            DataSet ds3 = new DataSet();
                                            DataTable dt3 = new DataTable();
                                            if (dr1["Pregnancyrefrange"].ToString() == "Yes")
                                            {
                                                pregRefRange = GetPregRefRange(profileDetails.TestCodeRef, MrdNo);
                                            }
                                            if (ageFlag == "y")
                                            {
                                                ds3 = YearValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex, ageDay);
                                            }
                                            //else if (ageFlag == "m")
                                            //{
                                            //    ds3 = MonthValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex);
                                            //}
                                            else if (ageFlag == "d")
                                            {
                                                ds3 = DateValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex);
                                            }
                                            dt3 = ds3.Tables[0];
                                            ViewListDetails childTestDetails1 = new ViewListDetails();
                                            if (dt3.Rows.Count > 0)
                                            {
                                                foreach (DataRow valdr in dt3.Rows)
                                                {
                                                    if (valdr != null)
                                                    {
                                                        if (pregRefRange.ToString() != "")
                                                        {
                                                            childTestDetails1.AgewiseNormalValue = pregRefRange;
                                                        }
                                                        else if (((valdr["age1"] != DBNull.Value) || (valdr["age1"].ToString() != "")) && ((valdr["age1"].ToString() != "-") && (valdr["age1"].ToString() != "undefined-undefined")))
                                                        {
                                                            //MultiDetailsDetails.MultiDisplayValue = valdr["agedisp"].ToString();
                                                            childTestDetails1.AgewiseNormalValue = valdr["age1"].ToString();
                                                        }
                                                        else if (((valdr["agedisp"] != DBNull.Value) && (valdr["agedisp"].ToString() != "")))
                                                        {
                                                            //MultiDetailsDetails.MultiDisplayValue = valdr["agedisp"].ToString();
                                                            childTestDetails1.AgewiseNormalValue = valdr["agedisp"].ToString();
                                                        }
                                                        else if ((valdr["agefree"] != DBNull.Value) && (valdr["agefree"].ToString() != ""))
                                                        {
                                                            //MultiDetailsDetails.MultiDisplayValue = valdr["agefree"].ToString();
                                                            childTestDetails1.AgewiseNormalValue = valdr["agefree"].ToString();
                                                        }
                                                        else
                                                        { childTestDetails1.AgewiseNormalValue = ""; }


                                                        if (units != null)
                                                        {
                                                            childTestDetails1.units = units;
                                                        }
                                                        else
                                                        { childTestDetails1.units = ""; }

                                                        childTestDetails1.ID = profileDetails.ID;
                                                        childTestDetails1.TestName = TestName;
                                                        childTestDetails1.Accept = profileDetails.Accept;
                                                        childTestDetails1.AcceptAll = profileDetails.AcceptAll;
                                                        childTestDetails1.MrdNo = profileDetails.MrdNo;
                                                        childTestDetails1.TestCodeRef = profileDetails.TestCodeRef;
                                                        childTestDetails1.TestType = profileDetails.TestType;
                                                        childTestDetails1.TestCode = profileDetails.TestCode;
                                                        childTestDetails1.Result = profileDetails.Result;
                                                        childTestDetails1.Comments = profileDetails.Comments;
                                                        childTestDetails1.SpecialComments = profileDetails.SpecialComments;
                                                        childTestDetails1.TestPriority = profileDetails.TestPriority;
                                                        //childTestDetails1.DeptPriority = profileDetails.DeptPriority;
                                                        childTestDetails1.ProfilePriority = profileDetails.ProfilePriority;
                                                        childTestDetails1.SubProfilePriority = profileDetails.SubProfilePriority;
                                                        childTestDetails1.Reject = profileDetails.Reject;
                                                        childTestDetails1.Status = profileDetails.Status;
                                                        childTestDetails1.confirmFlag = profileDetails.confirmFlag;
                                                        childTestDetails1.saveFlag = profileDetails.saveFlag;
                                                        childTestDetails1.RegID = profileDetails.RegID;
                                                        childTestDetails1.PrevHistory = preHistory;
                                                        childTestDetails1.FinalResult = finalResult;
                                                        childTestDetails1.MultiCalculation = "";
                                                        if ((valdr["agedisp"] != DBNull.Value))
                                                        {
                                                            childTestDetails1.MultiDisplayValue = valdr["agedisp"].ToString();
                                                        }
                                                        else
                                                        { childTestDetails1.MultiDisplayValue = ""; }
                                                        childTestDetails1.PregRefRange = pregRefRange;
                                                        childTestDetails1.OutSourced = dr1["Outsourced"].ToString();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (units != null)
                                                {
                                                    childTestDetails1.units = units;
                                                }
                                                else
                                                { childTestDetails1.units = ""; }
                                                childTestDetails1.TestName = TestName;
                                                childTestDetails1.TestType = profileDetails.TestType;
                                                childTestDetails1.units = units;
                                                childTestDetails1.ID = profileDetails.ID;
                                                childTestDetails1.Accept = profileDetails.Accept;
                                                childTestDetails1.AcceptAll = profileDetails.AcceptAll;
                                                childTestDetails1.MrdNo = profileDetails.MrdNo;
                                                childTestDetails1.TestCodeRef = profileDetails.TestCodeRef;
                                                childTestDetails1.TestCode = profileDetails.TestCode;
                                                childTestDetails1.Result = profileDetails.Result;
                                                childTestDetails1.Comments = profileDetails.Comments;
                                                childTestDetails1.SpecialComments = profileDetails.SpecialComments;
                                                childTestDetails1.TestPriority = profileDetails.TestPriority;
                                                //childTestDetails1.DeptPriority = profileDetails.DeptPriority;
                                                childTestDetails1.ProfilePriority = profileDetails.ProfilePriority;
                                                childTestDetails1.SubProfilePriority = profileDetails.SubProfilePriority;
                                                childTestDetails1.Reject = profileDetails.Reject;
                                                childTestDetails1.Status = profileDetails.Status;
                                                childTestDetails1.confirmFlag = profileDetails.confirmFlag;
                                                childTestDetails1.saveFlag = profileDetails.saveFlag;
                                                childTestDetails1.RegID = profileDetails.RegID;
                                                childTestDetails1.PrevHistory = preHistory;
                                                childTestDetails1.FinalResult = finalResult;
                                                childTestDetails1.PregRefRange = pregRefRange;
                                                childTestDetails1.MultiCalculation = "";
                                                childTestDetails1.OutSourced = dr1["Outsourced"].ToString();
                                                if (pregRefRange.ToString() != "")
                                                {
                                                    childTestDetails1.AgewiseNormalValue = pregRefRange;
                                                }
                                                else
                                                {
                                                    childTestDetails1.AgewiseNormalValue = "";
                                                }
                                            }
                                            if (calculationPresent == "Yes")
                                            {
                                                DataTable DTCalc = new DataTable();
                                                string strCalc = "SELECT  distinct units,splcalculation,formulaLabel,TestCode from calculationfortestdetails where TestCode='" + profileDetails.TestCodeRef + "' group by TestCode,units,splcalculation,formulaLabel";
                                                //string strTestDetails = "select * from  childtestlist CL join  viewlistdetails VL on CL.TestCode = VL.TestCode where CL.TestCode='" + profileDetails.TestCode + "'";
                                                MySqlDataAdapter strCalcData = new MySqlDataAdapter(strCalc, conn);
                                                MySqlCommandBuilder strCalcCmd = new MySqlCommandBuilder(strCalcData);
                                                DataSet DSCalc = new DataSet();
                                                strCalcData.Fill(DSCalc);
                                                DTCalc = DSCalc.Tables[0];
                                                foreach (DataRow Caldr in DTCalc.Rows)
                                                {
                                                    if (Caldr != null)
                                                    {
                                                        childTestDetails1.Calcunits = Caldr["units"].ToString();
                                                        childTestDetails1.splcalculation = Caldr["splcalculation"].ToString();
                                                        childTestDetails1.formulaLabel = Caldr["formulaLabel"].ToString();
                                                        //lstDetails.Add(childTestDetails1);
                                                    }
                                                }
                                                lstDetails.Add(childTestDetails1);
                                            }
                                            else
                                            {
                                                lstDetails.Add(childTestDetails1);
                                            }
                                        }
                                        #endregion agewiseReference

                                        #region bothagewiseCriticalValueandagewiseReferenceRange
                                        else if (agewiseReferenceRange == "Yes" && agewiseCriticalValue == "Yes")
                                        {
                                            DataSet dsAll = new DataSet();
                                            DataTable dtAll = new DataTable();
                                            if (dr1["Pregnancyrefrange"].ToString() == "Yes")
                                            {
                                                pregRefRange = GetPregRefRange(profileDetails.TestCodeRef, MrdNo);
                                            }
                                            if (ageFlag == "y")
                                            {
                                                dsAll = YearValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex, ageDay);
                                            }
                                            //else if (ageFlag == "m")
                                            //{
                                            //    dsAll = MonthValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex);
                                            //}
                                            else if (ageFlag == "d")
                                            {
                                                dsAll = DateValue(testCodeRef, Convert.ToInt32(profileDetails.Age), Sex);
                                            }
                                            dtAll = dsAll.Tables[0];
                                            ViewListDetails childTestDetails1 = new ViewListDetails();
                                            if (dtAll.Rows.Count > 0)
                                            {
                                                foreach (DataRow valdr in dtAll.Rows)
                                                {
                                                    if (valdr != null)
                                                    {
                                                        if (pregRefRange.ToString() != "")
                                                        {
                                                            childTestDetails1.AgewiseNormalValue = pregRefRange;
                                                        }
                                                        else if (((valdr["age1"] != DBNull.Value) || (valdr["age1"].ToString() != "")) && ((valdr["age1"].ToString() != "-") && (valdr["age1"].ToString() != "undefined-undefined")))
                                                        {
                                                            //MultiDetailsDetails.MultiDisplayValue = valdr["agedisp"].ToString();
                                                            childTestDetails1.AgewiseNormalValue = valdr["age1"].ToString();
                                                        }
                                                        else if (((valdr["agedisp"] != DBNull.Value) && (valdr["agedisp"].ToString() != "")))
                                                        {
                                                            //MultiDetailsDetails.MultiDisplayValue = valdr["agedisp"].ToString();
                                                            childTestDetails1.AgewiseNormalValue = valdr["agedisp"].ToString();
                                                        }
                                                        else if ((valdr["agefree"] != DBNull.Value) && (valdr["agefree"].ToString() != ""))
                                                        {
                                                            //MultiDetailsDetails.MultiDisplayValue = valdr["agefree"].ToString();
                                                            childTestDetails1.AgewiseNormalValue = valdr["agefree"].ToString();
                                                        }
                                                        else
                                                        { childTestDetails1.AgewiseNormalValue = ""; }

                                                        if (units != null)
                                                        {
                                                            childTestDetails1.units = units;
                                                        }
                                                        else
                                                        { childTestDetails1.units = ""; }
                                                        if ((valdr["agedisp"] != DBNull.Value))
                                                        {
                                                            childTestDetails1.MultiDisplayValue = valdr["agedisp"].ToString();
                                                        }
                                                        else
                                                        { childTestDetails1.MultiDisplayValue = ""; }
                                                        childTestDetails1.LowerCriticalValue = valdr["LowUpperCricticalValue"].ToString();
                                                        childTestDetails1.UnitMesurementFreeText = valdr["FreeText"].ToString();
                                                        childTestDetails1.TestName = TestName;
                                                        childTestDetails1.TestType = profileDetails.TestType;
                                                        //childTestDetails1.units = units;
                                                        childTestDetails1.ID = profileDetails.ID;
                                                        childTestDetails1.Accept = profileDetails.Accept;
                                                        childTestDetails1.AcceptAll = profileDetails.AcceptAll;
                                                        childTestDetails1.MrdNo = profileDetails.MrdNo;
                                                        childTestDetails1.TestCodeRef = profileDetails.TestCodeRef;
                                                        childTestDetails1.TestCode = profileDetails.TestCode;
                                                        childTestDetails1.Result = profileDetails.Result;
                                                        childTestDetails1.Comments = profileDetails.Comments;
                                                        childTestDetails1.SpecialComments = profileDetails.SpecialComments;
                                                        childTestDetails1.TestPriority = profileDetails.TestPriority;
                                                        //childTestDetails1.DeptPriority = profileDetails.DeptPriority;
                                                        childTestDetails1.ProfilePriority = profileDetails.ProfilePriority;
                                                        childTestDetails1.SubProfilePriority = profileDetails.SubProfilePriority;
                                                        childTestDetails1.Reject = profileDetails.Reject;
                                                        childTestDetails1.Status = profileDetails.Status;
                                                        childTestDetails1.confirmFlag = profileDetails.confirmFlag;
                                                        childTestDetails1.saveFlag = profileDetails.saveFlag;
                                                        childTestDetails1.RegID = profileDetails.RegID;
                                                        childTestDetails1.PrevHistory = preHistory;
                                                        childTestDetails1.FinalResult = finalResult;
                                                        childTestDetails1.PregRefRange = pregRefRange;
                                                        childTestDetails1.OutSourced = dr1["Outsourced"].ToString();
                                                        childTestDetails1.MultiCalculation = "";
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (units != null)
                                                {
                                                    childTestDetails1.units = units;
                                                }
                                                else
                                                { childTestDetails1.units = ""; }
                                                childTestDetails1.DisplayValue = "";
                                                childTestDetails1.TestName = TestName;
                                                childTestDetails1.TestType = profileDetails.TestType;
                                                childTestDetails1.units = units;
                                                childTestDetails1.ID = profileDetails.ID;
                                                childTestDetails1.Accept = profileDetails.Accept;
                                                childTestDetails1.AcceptAll = profileDetails.AcceptAll;
                                                childTestDetails1.MrdNo = profileDetails.MrdNo;
                                                childTestDetails1.TestCodeRef = profileDetails.TestCodeRef;
                                                childTestDetails1.TestCode = profileDetails.TestCode;
                                                childTestDetails1.Result = profileDetails.Result;
                                                childTestDetails1.Comments = profileDetails.Comments;
                                                childTestDetails1.SpecialComments = profileDetails.SpecialComments;
                                                childTestDetails1.TestPriority = profileDetails.TestPriority;
                                                //childTestDetails1.DeptPriority = profileDetails.DeptPriority;
                                                childTestDetails1.ProfilePriority = profileDetails.ProfilePriority;
                                                childTestDetails1.SubProfilePriority = profileDetails.SubProfilePriority;
                                                childTestDetails1.Reject = profileDetails.Reject;
                                                childTestDetails1.Status = profileDetails.Status;
                                                childTestDetails1.confirmFlag = profileDetails.confirmFlag;
                                                childTestDetails1.saveFlag = profileDetails.saveFlag;
                                                childTestDetails1.RegID = profileDetails.RegID;
                                                childTestDetails1.PrevHistory = preHistory;
                                                childTestDetails1.FinalResult = finalResult;
                                                childTestDetails1.PregRefRange = pregRefRange;
                                                childTestDetails1.OutSourced = dr1["Outsourced"].ToString();
                                                childTestDetails1.MultiCalculation = "";
                                                if (pregRefRange.ToString() != "")
                                                {
                                                    childTestDetails1.AgewiseNormalValue = pregRefRange;
                                                }
                                                else
                                                {
                                                    childTestDetails1.AgewiseNormalValue = "";
                                                }
                                            }

                                            //calcualtion for both
                                            if (calculationPresent == "Yes")
                                            {
                                                DataTable DTCalc = new DataTable();
                                                string strCalc = "SELECT  distinct units,splcalculation,formulaLabel,TestCode from calculationfortestdetails where TestCode='" + profileDetails.TestCodeRef + "' group by TestCode,units,splcalculation,formulaLabel";
                                                //string strTestDetails = "select * from  childtestlist CL join  viewlistdetails VL on CL.TestCode = VL.TestCode where CL.TestCode='" + profileDetails.TestCode + "'";
                                                MySqlDataAdapter strCalcData = new MySqlDataAdapter(strCalc, conn);
                                                MySqlCommandBuilder strCalcCmd = new MySqlCommandBuilder(strCalcData);
                                                DataSet DSCalc = new DataSet();
                                                strCalcData.Fill(DSCalc);
                                                DTCalc = DSCalc.Tables[0];
                                                foreach (DataRow Caldr in DTCalc.Rows)
                                                {
                                                    if (Caldr != null)
                                                    {
                                                        childTestDetails1.Calcunits = Caldr["units"].ToString();
                                                        childTestDetails1.splcalculation = Caldr["splcalculation"].ToString();
                                                        childTestDetails1.formulaLabel = Caldr["formulaLabel"].ToString();
                                                        //lstDetails.Add(childTestDetails1);
                                                    }
                                                }
                                                lstDetails.Add(childTestDetails1);
                                            }
                                            else
                                            {
                                                lstDetails.Add(childTestDetails1);
                                            }
                                            //lstDetails.Add(childTestDetails1);
                                        }
                                        #endregion agewiseCriticalValue                                    

                                        #region bothagewiseCriticalValueandagewiseReferenceRange are NO
                                        else if (agewiseReferenceRange == "No" && agewiseCriticalValue == "No")
                                        {
                                            if (dr1["Pregnancyrefrange"].ToString() == "Yes")
                                            {
                                                pregRefRange = GetPregRefRange(profileDetails.TestCodeRef, MrdNo);
                                            }
                                            ViewListDetails childTestDetails = new ViewListDetails();
                                            if (units != null)
                                            {
                                                childTestDetails.units = units;
                                            }
                                            else
                                            { childTestDetails.units = ""; }
                                            childTestDetails.TestName = TestName;
                                            childTestDetails.TestType = profileDetails.TestType;
                                            childTestDetails.units = units;
                                            childTestDetails.ID = profileDetails.ID;
                                            childTestDetails.Accept = profileDetails.Accept;
                                            childTestDetails.AcceptAll = profileDetails.AcceptAll;
                                            childTestDetails.MrdNo = profileDetails.MrdNo;
                                            childTestDetails.TestCodeRef = profileDetails.TestCodeRef;
                                            childTestDetails.TestCode = profileDetails.TestCode;
                                            childTestDetails.Result = profileDetails.Result;
                                            childTestDetails.Comments = profileDetails.Comments;
                                            childTestDetails.SpecialComments = profileDetails.SpecialComments;
                                            childTestDetails.TestPriority = profileDetails.TestPriority;
                                            //childTestDetails.DeptPriority = profileDetails.DeptPriority;
                                            childTestDetails.ProfilePriority = profileDetails.ProfilePriority;
                                            childTestDetails.SubProfilePriority = profileDetails.SubProfilePriority;
                                            childTestDetails.Reject = profileDetails.Reject;
                                            childTestDetails.Status = profileDetails.Status;
                                            childTestDetails.confirmFlag = profileDetails.confirmFlag;
                                            childTestDetails.saveFlag = profileDetails.saveFlag;
                                            childTestDetails.RegID = profileDetails.RegID;
                                            childTestDetails.PrevHistory = preHistory;
                                            childTestDetails.FinalResult = finalResult;
                                            childTestDetails.PregRefRange = pregRefRange;
                                            childTestDetails.OutSourced = dr1["Outsourced"].ToString();
                                            childTestDetails.MultiCalculation = "";
                                            if (pregRefRange.ToString() != "")
                                            {
                                                childTestDetails.AgewiseNormalValue = pregRefRange;
                                            }
                                            else
                                            {
                                                childTestDetails.AgewiseNormalValue = "";
                                            }

                                            if (calculationPresent == "Yes")
                                            {
                                                DataTable DTCalc = new DataTable();
                                                string strCalc = "SELECT  distinct units,splcalculation,formulaLabel,TestCode from calculationfortestdetails where TestCode='" + profileDetails.TestCodeRef + "' group by TestCode,units,splcalculation,formulaLabel";
                                                //string strTestDetails = "select * from  childtestlist CL join  viewlistdetails VL on CL.TestCode = VL.TestCode where CL.TestCode='" + profileDetails.TestCode + "'";
                                                MySqlDataAdapter strCalcData = new MySqlDataAdapter(strCalc, conn);
                                                MySqlCommandBuilder strCalcCmd = new MySqlCommandBuilder(strCalcData);
                                                DataSet DSCalc = new DataSet();
                                                strCalcData.Fill(DSCalc);
                                                DTCalc = DSCalc.Tables[0];
                                                foreach (DataRow Caldr in DTCalc.Rows)
                                                {
                                                    if (Caldr != null)
                                                    {
                                                        childTestDetails.Calcunits = Caldr["units"].ToString();
                                                        childTestDetails.splcalculation = Caldr["splcalculation"].ToString();
                                                        childTestDetails.formulaLabel = Caldr["formulaLabel"].ToString();
                                                        //lstDetails.Add(childTestDetails);
                                                    }
                                                }
                                                lstDetails.Add(childTestDetails);
                                            }
                                            else
                                            {
                                                lstDetails.Add(childTestDetails);
                                            }

                                        }
                                        #endregion bothagewiseCriticalValueandagewiseReferenceRange are NO                                        
                                    }
                                }
                                #endregion fortestonly
                            }
                            else if (profileDetails.TestCodeRef != "" && (profileDetails.TestType == 2 || profileDetails.TestType == 3))
                            {
                                #region bothparagraphandurineculture
                                string preHistorySql = "";
                                var mrno = profileDetails.MrdNo;
                                profileDetails.TestName = dr["TestName"].ToString();
                                profileDetails.TestCode = dr["TestCode"].ToString();
                                profileDetails.MrdNo = mrno;
                                //if (units != null)
                                //{
                                //    profileDetails.units = units;
                                //}
                                //else
                                //{ profileDetails.units = ""; }

                                DataTable preHistDT = new DataTable();
                                DataTable AbbrDT = new DataTable();
                                if (profileDetails.TestType == 2)
                                {
                                    preHistorySql = "SELECT * FROM  bonemarrowaspiration where PatientID='" + profileDetails.RegID + "' and TestCode='" + profileDetails.TestCodeRef + "' and MrdNo!='" + profileDetails.MrdNo + "'";
                                }
                                else if (profileDetails.TestType == 3)
                                {
                                    preHistorySql = "SELECT * FROM  culturetestresult where PatientID='" + profileDetails.RegID + "' and TestCode='" + profileDetails.TestCodeRef + "' and MrdNo!='" + profileDetails.MrdNo + "'";
                                }
                                MySqlDataAdapter preHistData = new MySqlDataAdapter(preHistorySql, conn);
                                MySqlCommandBuilder preHistCmd = new MySqlCommandBuilder(preHistData);
                                DataSet preHistDS = new DataSet();
                                preHistData.Fill(preHistDS);
                                preHistDT = preHistDS.Tables[0];

                                string sqlForOutSrcTest = "SELECT  distinct * from childtestlist where TestCode='" + profileDetails.TestCodeRef + "'";
                                MySqlDataAdapter outSrcData = new MySqlDataAdapter(sqlForOutSrcTest, conn);
                                MySqlCommandBuilder MultiChildCmd = new MySqlCommandBuilder(outSrcData);
                                DataSet outSrcDS = new DataSet();
                                DataTable outSrcDT = new DataTable();
                                outSrcData.Fill(outSrcDS);
                                outSrcDT = outSrcDS.Tables[0];
                                if (outSrcDT.Rows.Count > 0)
                                {
                                    if (outSrcDT.Rows[0]["Outsourced"] != DBNull.Value)
                                    {
                                        profileDetails.OutSourced = outSrcDT.Rows[0]["Outsourced"].ToString();
                                    }
                                    if (outSrcDT.Rows[0]["BiospyAbbrevation"] != DBNull.Value)
                                    {
                                        profileDetails.BiospyAbbrev = outSrcDT.Rows[0]["BiospyAbbrevation"].ToString();
                                    }
                                    else { profileDetails.BiospyAbbrev = ""; }
                                }
                                if (preHistDT.Rows.Count > 0)
                                {
                                    preHistory = "Yes";
                                    //if (preHistory == "")
                                    //{ preHistory = "-NA-"; }
                                }
                                else { preHistory = "-NA-"; }

                                if ((getviewData.ResultFlag == 1))
                                {
                                    DataTable calDT = new DataTable();
                                    string calSql = "SELECT Comment1,SpecialComments FROM  labresultverification where PatientID='" + profileDetails.RegID + "' and TestCode='" + profileDetails.TestCodeRef + "' and RegId='" + profileDetails.ID + "' ";
                                    MySqlDataAdapter calData = new MySqlDataAdapter(calSql, conn);
                                    MySqlCommandBuilder calCmd = new MySqlCommandBuilder(calData);
                                    DataSet calDS = new DataSet();
                                    calData.Fill(calDS);
                                    calDT = calDS.Tables[0];

                                    if (calDT.Rows.Count > 0)
                                    {
                                        //profileDetails.FinalResult =calDT.Rows[0]["Result"].ToString();
                                        profileDetails.SpecialComments = calDT.Rows[0]["SpecialComments"].ToString();
                                        profileDetails.Comments = calDT.Rows[0]["Comment1"].ToString();
                                        profileDetails.PrevHistory = preHistory;
                                    }
                                    else
                                    {
                                        //finalResult = "";
                                        profileDetails.Result = "";
                                        profileDetails.Comments = "";
                                        profileDetails.SpecialComments = "";
                                        profileDetails.PrevHistory = preHistory;
                                    }
                                }
                                else
                                {
                                    //profileDetails.Comments = profileDetails.Comments;
                                    profileDetails.PrevHistory = preHistory;
                                }
                                profileDetails.AgewiseNormalValue = "";
                                lstDetails.Add(profileDetails);
                                #endregion bothparagraphandurineculture
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    ViewListDetails errorDetails = new ViewListDetails();
                    errorDetails.ErrorMessage = "Error" + ex.Message;
                    lstDetails.Add(errorDetails);
                }
            }
            return lstDetails;
        }
        #endregion

        public string GetPregRefRange(string testCode, string mrdNo)
        {
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            string returnValue = "";
            string strCalc = "SELECT Trimester from laborder where MrdNo='" + mrdNo + "'";
            MySqlDataAdapter strCalcData = new MySqlDataAdapter(strCalc, conn);
            MySqlCommandBuilder strCalcCmd = new MySqlCommandBuilder(strCalcData);
            DataSet DSCalc = new DataSet();
            DataTable DTCalc = new DataTable();
            strCalcData.Fill(DSCalc);
            DTCalc = DSCalc.Tables[0];
            if ((DTCalc.Rows.Count > 0) && DTCalc.Rows[0]["Trimester"].ToString() != "")
            {
                string resSql = "";
                if (DTCalc.Rows[0]["Trimester"].ToString() == "First Trimester")
                {
                    resSql = "select FirstTrimester as returnValue from pregnancyreferencerange where TestCode='" + testCode + "'";
                }
                if (DTCalc.Rows[0]["Trimester"].ToString() == "Second Trimester")
                {
                    resSql = "select SecondTrimester as returnValue from pregnancyreferencerange where TestCode='" + testCode + "'";
                }
                if (DTCalc.Rows[0]["Trimester"].ToString() == "Third Trimester")
                {
                    resSql = "select ThirdTrimester as returnValue from pregnancyreferencerange where TestCode='" + testCode + "'";
                }
                MySqlDataAdapter sqlData = new MySqlDataAdapter(resSql, conn);
                MySqlCommandBuilder sqlCmd = new MySqlCommandBuilder(sqlData);
                DataSet sqlDS = new DataSet();
                DataTable sqlDT = new DataTable();
                sqlData.Fill(sqlDS);
                sqlDT = sqlDS.Tables[0];
                if (sqlDT.Rows.Count > 0)
                {
                    returnValue = sqlDT.Rows[0]["returnValue"].ToString();
                }
                else { returnValue = ""; }
            }
            return returnValue;
        }
        #region MultiValue
        public DataSet MultiValue(string TestCodeRef, int Age, string element, string ageflag, int ageDay)
        {
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            DataSet MultiDs = new DataSet();
            if ((ageflag.ToString()) == "y")
            {
                string referencevaluequery = "";
                double yearsDay = 0.0;
                double ageInput = 0.0;
                if (ageDay > 0)
                {
                    yearsDay = Convert.ToDouble(Age.ToString() + '.' + ageDay.ToString());
                    ageInput = Convert.ToDouble(Age);

                    referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue  " +
                " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + TestCodeRef + "' " +
                " and  " + yearsDay + " between a.StartYear and a.EndYear and a.ElementName like'" + element + "%'";
                }
                else if ((ageDay == 0))
                {
                    referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue  " +
                  " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + TestCodeRef + "' " +
                  " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + " and a.ElementName like'" + element + "%'";
                }
                else
                {
                    referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue  " +
                   " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + TestCodeRef + "' " +
                   " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + " and a.ElementName like'" + element + "%'";
                }
                MySqlDataAdapter mulvalueList = new MySqlDataAdapter(referencevaluequery, conn);
                MySqlCommandBuilder scmd = new MySqlCommandBuilder(mulvalueList);
                mulvalueList.Fill(MultiDs);
            }
            //else if ((ageflag.ToString()) == "m")
            //{
            //    string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
            //        " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + TestCodeRef + "' " +
            //        " and a.StartMonth<=" + Age + " and a.EndMonth>=" + Age + " and a.ElementName like'" + element + "%'";
            //    MySqlDataAdapter mulvalueList = new MySqlDataAdapter(referencevaluequery, conn);
            //    MySqlCommandBuilder scmd = new MySqlCommandBuilder(mulvalueList);
            //    mulvalueList.Fill(MultiDs);
            //}
            else if ((ageflag.ToString()) == "d")
            {
                string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                    " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + TestCodeRef + "' " +
                    " and a.StartDay<=" + Age + " and a.EndDay>=" + Age + " and a.ElementName like'" + element + "%'";
                MySqlDataAdapter mulvalueList = new MySqlDataAdapter(referencevaluequery, conn);
                MySqlCommandBuilder scmd = new MySqlCommandBuilder(mulvalueList);
                mulvalueList.Fill(MultiDs);
            }
            return MultiDs;
        }
        #endregion

        #region YearValue
        public DataSet YearValue(string testCodeRef, int Age, string Sex, int ageDay)
        {
            string agesexquery1 = "";
            string referencevaluequery = "";
            double yearsDay = 0.0;
            double ageInput = 0.0;
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);

            DataSet YearDs = new DataSet();

            if (ageDay > 0)
            {
                yearsDay = Convert.ToDouble(Age.ToString() + '.' + ageDay.ToString());
                ageInput = Convert.ToDouble(Age);
                if (yearsDay > 0.0 && ageInput > 0.0 && (yearsDay > ageInput))
                {
                    agesexquery1 = "SELECT distinct Sex FROM  agewisereferencevalue a where a.TestCode = '" + testCodeRef + "' " +
                                                              " and " + ageInput + " between a.StartYear and a.EndYear ";
                }
            }
            else if (ageDay == 0)
            {
                agesexquery1 = "SELECT distinct Sex FROM  agewisereferencevalue a where a.TestCode = '" + testCodeRef + "' " +
                                                                             " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + " ";
            }
            else
            {
                agesexquery1 = "SELECT distinct Sex FROM  agewisereferencevalue a where a.TestCode = '" + testCodeRef + "' " +
                                                                              " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + " ";
            }


            MySqlDataAdapter agesexList1 = new MySqlDataAdapter(agesexquery1, conn);
            MySqlCommandBuilder agesexcmd1 = new MySqlCommandBuilder(agesexList1);
            DataSet Sexds4 = new DataSet();
            DataTable Sexdt4 = new DataTable();
            agesexList1.Fill(Sexds4);
            Sexdt4 = Sexds4.Tables[0];
            if (Sexdt4.Rows.Count > 0)
            {
                //if (((Sexdt4.Rows[0]["Sex"].ToString()) == "Both") || ((Sexdt4.Rows[0]["Sex"].ToString()) == ""))
                //{
                //    string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                //     " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                //     " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + "  ";
                //    MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                //    MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                //    valueList.Fill(YearDs);
                //}
                //else
                //{
                //    string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                //    " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                //    " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + " and a.Sex='" + Sex + "'";
                //    MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                //    MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                //    valueList.Fill(YearDs);
                //}

                if (yearsDay > 0.0 && ageInput > 0.0 && (yearsDay > ageInput))
                {
                    referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                   " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                   " and " + ageInput + " between a.StartYear and a.EndYear and (a.Sex='" + Sex + "' or a.Sex='Both' or a.Sex='') " +
                   " and ((a.StartDay=0 and a.EndDay=0) and (a.StartMonth=0 and a.EndMonth=0)) ";
                }
                else if (ageDay == 0)
                {
                    referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                  " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                  " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + " and (a.Sex='" + Sex + "' or a.Sex='Both' or a.Sex='') " +
                  " and ((a.StartDay=0 and a.EndDay=0) and (a.StartMonth=0 and a.EndMonth=0)) ";
                }
                else
                {
                    referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                    " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                    " and a.StartYear<=" + Age + " and a.EndYear>=" + Age + " and (a.Sex='" + Sex + "' or a.Sex='Both' or a.Sex='') " +
                    " and ((a.StartDay=0 and a.EndDay=0) and (a.StartMonth=0 and a.EndMonth=0)) ";
                }
                MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                valueList.Fill(YearDs);
            }
            else { YearDs.Tables.Add(Sexdt4.Copy()); }

            return YearDs;
        }
        #endregion

        #region MonthValue
        public DataSet MonthValue(string testCodeRef, int Age, string Sex)
        {
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            DataSet MonthDS = new DataSet();

            string agesexquery2 = "SELECT distinct Sex FROM  agewisereferencevalue a where a.TestCode = '" + testCodeRef + "'" +
                                                                " and a.StartMonth<=" + Age + " and a.EndMonth>=" + Age + " ";
            MySqlDataAdapter agesexList2 = new MySqlDataAdapter(agesexquery2, conn);
            MySqlCommandBuilder agesexcmd2 = new MySqlCommandBuilder(agesexList2);
            DataSet Sexds5 = new DataSet();
            DataTable Sexdt5 = new DataTable();
            agesexList2.Fill(Sexds5);
            Sexdt5 = Sexds5.Tables[0];
            if (Sexdt5.Rows.Count > 0)
            {
                //if (((Sexdt5.Rows[0]["Sex"].ToString()) == "Both") || ((Sexdt5.Rows[0]["Sex"].ToString()) == ""))
                //{
                //    string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                //     " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                //     " and a.StartMonth<=" + Age + " and a.EndMonth>=" + Age + "";
                //    MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                //    MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                //    valueList.Fill(MonthDS);
                //}
                //else
                //{
                //    string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                //      " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                //      " and a.StartMonth<=" + Age + " and a.EndMonth>=" + Age + " and a.Sex=" + Sex + "";
                //    MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                //    MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                //    valueList.Fill(MonthDS);
                //}
                string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                  " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                  " and a.StartMonth<=" + Age + " and a.EndMonth>=" + Age + " and (a.Sex='" + Sex + "' or a.Sex='Both' or a.Sex='') " +
                  " and ((a.StartYear=0 and a.Endyear=0) and (a.StartDay=0 and a.EndDay=0)) ";
                MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                valueList.Fill(MonthDS);
            }
            else { MonthDS.Tables.Add(Sexdt5.Copy()); }

            return MonthDS;
        }
        #endregion

        #region DateValue
        public DataSet DateValue(string testCodeRef, int Age, string Sex)
        {
            MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString);
            DataSet DateDs = new DataSet();
            string agesexquery3 = "SELECT distinct Sex FROM  agewisereferencevalue a where a.TestCode = '" + testCodeRef + "'" +
                                                                           " and a.StartDay<=" + Age + " and a.EndDay>=" + Age + "";
            MySqlDataAdapter agesexList3 = new MySqlDataAdapter(agesexquery3, conn);
            MySqlCommandBuilder agesexcmd3 = new MySqlCommandBuilder(agesexList3);
            DataSet Sexds6 = new DataSet();
            DataTable Sexdt6 = new DataTable();
            agesexList3.Fill(Sexds6);
            Sexdt6 = Sexds6.Tables[0];
            if (Sexdt6.Rows.Count > 0)
            {
                //if (((Sexdt6.Rows[0]["Sex"].ToString()) == "Both") || ((Sexdt6.Rows[0]["Sex"].ToString()) == ""))
                //{
                //    string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                //   " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                //   " and a.StartDay<=" + Age + " and a.EndDay>=" + Age + "  ";
                //    MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                //    MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                //    valueList.Fill(DateDs);
                //}
                //else
                //{
                //    string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
                //   " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
                //   " and a.StartDay<=" + Age + " and a.EndDay>=" + Age + " and a.Sex='" + Sex + "' ";
                //    MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                //    MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                //    valueList.Fill(DateDs);
                //}
                string referencevaluequery = "SELECT distinct a.LowUpperReferenceValue as age1,a.FreeText as agefree,a.DisplayValue as agedisp,b.LowUpperCricticalValue,b.FreeText,b.DisplayValue " +
               " FROM  agewisereferencevalue a left join agewisecricticalreference b on a.TestCode = b.TestCode where a.TestCode='" + testCodeRef + "' " +
               " and a.StartDay<=" + Age + " and a.EndDay>=" + Age + " and (a.Sex='" + Sex + "' or a.Sex='Both' or a.Sex='') " +
               " and ((a.StartYear=0 and a.Endyear=0) and (a.StartMonth=0 and a.EndMonth=0)) ";
                MySqlDataAdapter valueList = new MySqlDataAdapter(referencevaluequery, conn);
                MySqlCommandBuilder scmd = new MySqlCommandBuilder(valueList);
                valueList.Fill(DateDs);
            }
            else { DateDs.Tables.Add(Sexdt6.Copy()); }

            return DateDs;
        }
        #endregion

        #region updateReject
        /// <summary>
        /// 
        ///
        /// </summary>
        ///<param name="updateReject"
        [Route("api/Account/updateReject")]
        [HttpPost]
        public void updateReject(ViewListDetails viewlistdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "UPDATE viewlistdetails SET Reject = 1, Accept=2,AcceptAll=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode.Split('-')[0] + "' and ID=" + viewlistdetails.ID + "";
                    string strSQL = "";
                    if (viewlistdetails.TestType == 1)
                    {
                        //strSQL = "delete from viewlistdetails where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode.Split('-')[0] + "'";
                        strSQL = "UPDATE viewlistdetails SET Reject = 1,RejectAll=1,Accept=0,AcceptAll=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode.Split('-')[0] + "' and ID=" + viewlistdetails.ID + "";
                    }
                    else if (viewlistdetails.TestType == 4)
                    {
                        //strSQL = "delete from viewlistdetails where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode.Split('-')[0] + "' and ID=" + viewlistdetails.ID + "";
                        strSQL = "UPDATE viewlistdetails SET Reject = 1,RejectAll=1, Accept=0,AcceptAll=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode + "' and ID=" + viewlistdetails.ID + "";
                    }
                    else if (viewlistdetails.TestType == 2)
                    {
                        //strSQL = "delete from viewlistdetails where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode.Split('-')[0] + "' and ID=" + viewlistdetails.ID + "";
                        strSQL = "UPDATE viewlistdetails SET Reject = 1,RejectAll=1, Accept=0,AcceptAll=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode + "' and ID=" + viewlistdetails.ID + "";
                    }
                    else if (viewlistdetails.TestType == 3)
                    {
                        //strSQL = "delete from viewlistdetails where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode.Split('-')[0] + "' and ID=" + viewlistdetails.ID + "";
                        strSQL = "UPDATE viewlistdetails SET Reject = 1,RejectAll=1,Accept=0,AcceptAll=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode + "' and ID=" + viewlistdetails.ID + "";
                    }

                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                    string updateStrSQL = "";
                    if (viewlistdetails.TestType == 1)
                    {
                        updateStrSQL = "update samplecollecter set collected=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCode = '" + viewlistdetails.TestCode.Split('-')[0] + "' ";
                    }
                    else if (viewlistdetails.TestType == 4)
                    {
                        updateStrSQL = "update samplecollecter set collected=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCode = '" + viewlistdetails.TestCode + "' ";
                    }
                    else if (viewlistdetails.TestType == 2)
                    {
                        updateStrSQL = "update samplecollecter set collected=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCode = '" + viewlistdetails.TestCode + "' ";
                    }
                    else if (viewlistdetails.TestType == 3)
                    {
                        updateStrSQL = "update samplecollecter set collected=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCode = '" + viewlistdetails.TestCode + "' ";
                    }
                    MySqlCommand updateCmd = new MySqlCommand(updateStrSQL, conn);
                    updateCmd.CommandType = CommandType.Text;
                    updateCmd.ExecuteNonQuery();

                    string updLabStatus = "update laborderstatus set LabStatus=1 where MrdNo ='" + viewlistdetails.MrdNo + "'  ";
                    MySqlCommand updStatusCmd = new MySqlCommand(updLabStatus, conn);
                    updStatusCmd.CommandType = CommandType.Text;
                    updStatusCmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertRejectedSamples
        /// <summary>
        /// 
        ///
        /// </summary>
        ///<param name="insertRejectedSamples"
        [Route("api/Account/insertRejectedSamples")]
        [HttpPost]
        public void insertRejectedSamples(string MrdNo, string TestCode, int ProfilePriority)
        {
            List<Addprofile> lstDetails = new List<Addprofile>();
            var profileCode = "";
            var profileName = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string profileSql = "select * from createprofile where  Priority ='" + ProfilePriority + "'";

                    MySqlDataAdapter profileData = new MySqlDataAdapter(profileSql, conn);
                    MySqlCommandBuilder profileCmd = new MySqlCommandBuilder(profileData);
                    DataSet profileDS = new DataSet();
                    DataTable profileDt = new DataTable();
                    profileData.Fill(profileDS);
                    profileDt = profileDS.Tables[0];
                    if (profileDt.Rows.Count > 0)
                    {
                        foreach (DataRow dr2 in profileDt.Rows)
                        {
                            if (dr2 != null)
                            {
                                if (dr2["ProfileCode"] != DBNull.Value)
                                {
                                    profileCode = dr2["ProfileCode"].ToString();
                                }
                                else
                                {
                                    profileCode = "";
                                }
                                if (dr2["ProfileName"] != DBNull.Value)
                                {
                                    profileName = dr2["ProfileName"].ToString();
                                }
                                else
                                {
                                    profileName = "";
                                }

                                if (TestCode.Contains('-'))
                                {
                                    TestCode = TestCode.Split('-')[0];
                                }

                                string testSQL = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + TestCode + "'";
                                MySqlDataAdapter mydata12 = new MySqlDataAdapter(testSQL, conn);
                                MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                                DataSet ds3 = new DataSet();
                                mydata12.Fill(ds3);
                                DataTable dt2 = new DataTable();
                                dt2 = ds3.Tables[0];
                                foreach (DataRow dr3 in dt2.Rows)
                                {
                                    if (dr3 != null)
                                    {

                                        string checkQuery = "select * from rejectedsamplecollecter where MrdNo='" + MrdNo + "' and TestCode='" + TestCode + "'";
                                        MySqlDataAdapter checkdata = new MySqlDataAdapter(checkQuery, conn);
                                        MySqlCommandBuilder checkCmd = new MySqlCommandBuilder(checkdata);
                                        DataSet ds4 = new DataSet();
                                        checkdata.Fill(ds4);
                                        DataTable dt4 = new DataTable();
                                        dt4 = ds4.Tables[0];
                                        string strSQL = "";
                                        if (dt4.Rows.Count > 0)
                                        {
                                            strSQL = "update rejectedsamplecollecter set collected=0,Notcollected=0,Later=0 where MrdNo='" + MrdNo + "' and TestCode='" + TestCode + "' ";
                                            MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                                            cmd.CommandType = CommandType.Text;
                                            cmd.ExecuteNonQuery();
                                        }
                                        else
                                        {
                                            strSQL = "INSERT INTO rejectedsamplecollecter(MrdNo,SampleName,TestCode,TestName,ProfileCode,ProfileName,collected,Notcollected,Later) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9)";
                                            MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                                            cmd.Parameters.AddWithValue("@val1", MrdNo);
                                            cmd.Parameters.AddWithValue("@val2", dr3["SampleContainer"].ToString());
                                            cmd.Parameters.AddWithValue("@val3", dr3["TestCode"].ToString());
                                            cmd.Parameters.AddWithValue("@val4", dr3["TestName"].ToString());
                                            cmd.Parameters.AddWithValue("@val5", profileCode);
                                            cmd.Parameters.AddWithValue("@val6", profileName);
                                            cmd.Parameters.AddWithValue("@val7", 0);
                                            cmd.Parameters.AddWithValue("@val8", 0);
                                            cmd.Parameters.AddWithValue("@val9", 0);
                                            cmd.CommandType = CommandType.Text;
                                            cmd.ExecuteNonQuery();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (TestCode.Contains('-'))
                        {
                            TestCode = TestCode.Split('-')[0];
                        }
                        string testSQL = "select SampleContainer,TestCode,TestName,TableRequiredPrint from  childtestlist where TestCode='" + TestCode + "'";
                        MySqlDataAdapter mydata12 = new MySqlDataAdapter(testSQL, conn);
                        MySqlCommandBuilder cmd2 = new MySqlCommandBuilder(mydata12);
                        DataSet ds3 = new DataSet();
                        mydata12.Fill(ds3);
                        DataTable dt2 = new DataTable();
                        dt2 = ds3.Tables[0];
                        foreach (DataRow dr3 in dt2.Rows)
                        {
                            if (dr3 != null)
                            {
                                string checkQuery = "select * from rejectedsamplecollecter where MrdNo='" + MrdNo + "' and TestCode='" + TestCode + "'";
                                MySqlDataAdapter checkdata = new MySqlDataAdapter(checkQuery, conn);
                                MySqlCommandBuilder checkCmd = new MySqlCommandBuilder(checkdata);
                                DataSet ds4 = new DataSet();
                                checkdata.Fill(ds4);
                                DataTable dt4 = new DataTable();
                                dt4 = ds4.Tables[0];
                                string strSQL = "";
                                if (dt4.Rows.Count > 0)
                                {
                                    strSQL = "update rejectedsamplecollecter set collected=0,Notcollected=0,Later=0 where MrdNo='" + MrdNo + "' and TestCode='" + TestCode + "' ";
                                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                                    cmd.CommandType = CommandType.Text;
                                    cmd.ExecuteNonQuery();
                                }
                                else
                                {
                                    strSQL = "INSERT INTO rejectedsamplecollecter(MrdNo,SampleName,TestCode,TestName,ProfileCode,ProfileName,collected,Notcollected,Later) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9)";
                                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                                    cmd.Parameters.AddWithValue("@val1", MrdNo);
                                    cmd.Parameters.AddWithValue("@val2", dr3["SampleContainer"].ToString());
                                    cmd.Parameters.AddWithValue("@val3", dr3["TestCode"].ToString());
                                    cmd.Parameters.AddWithValue("@val4", dr3["TestName"].ToString());
                                    cmd.Parameters.AddWithValue("@val5", profileCode);
                                    cmd.Parameters.AddWithValue("@val6", profileName);
                                    cmd.Parameters.AddWithValue("@val7", 0);
                                    cmd.Parameters.AddWithValue("@val8", 0);
                                    cmd.Parameters.AddWithValue("@val9", 0);
                                    cmd.CommandType = CommandType.Text;
                                    cmd.ExecuteNonQuery();
                                }

                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region checkRejeSampleStatus
        /// <summary>
        ///  
        /// </summary>
        ///  
        /// <returns></returns>
        [Route("api/Account/checkRejeSampleStatus")]
        [HttpGet]
        public int checkRejeSampleStatus(string MrdNo, int regId, int checkFlag)
        {
            int statusCount = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DataTable dts = new DataTable();
                    using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                    {
                        string strSQLs = "";
                        if (checkFlag == 1)
                        {
                            strSQLs = "SELECT * FROM viewlistdetails where mrdNo = '" + MrdNo + "' and RejectAll =1";//and Reject=1";
                        }
                        else if (checkFlag == 2)
                        {
                            strSQLs = "SELECT * FROM viewlistdetails where mrdNo = '" + MrdNo + "' and ID='" + regId + "' and Reject=1";
                        }
                        conns.Open();
                        MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                        MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                        DataSet dss = new DataSet();
                        mydatas.Fill(dss);
                        dts = dss.Tables[0];
                        if (dts.Rows.Count > 0)
                        {
                            statusCount = 1;
                        }
                        else
                        {
                            statusCount = 0;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return statusCount;
            }
        }
        #endregion

        #region updateAccept
        /// <summary>
        /// 
        ///
        /// </summary>
        ///<param name="updateAccept"
        [Route("api/Account/updateAccept")]
        [HttpPost]
        public void updateAccept(ViewListDetails viewlistdetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "UPDATE viewlistdetails SET Accept = 1,Reject=0,RejectAll=0 where  MrdNo ='" + viewlistdetails.MrdNo + "' and TestCodeRef = '" + viewlistdetails.TestCode.Split('-')[0] + "' and ID=" + viewlistdetails.ID + "";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertSaveLabViewList
        /// <summary>
        /// Table to insert LabView result to labviewresult table
        /// </summary>
        ///
        /// <param name=""></param>
        [Route("api/Account/insertSaveLabViewList")]
        [HttpPost]
        public void insertSaveLabViewList(LabViewResultDetails saveDetails)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  labviewresult" +
                        "(TestCode,TestName,Result,SampleMrdNo,NormalValue" +
                        "CriticalValue,Units,Age,Sex,Comments,ConfirmFlag,SaveFlag,CancelFlag)" +
                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10," +
                        "@val11,@val12,@val13)";
                    conn.Open();

                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", saveDetails.TestCode);
                    cmd.Parameters.AddWithValue("@val2", saveDetails.TestName);
                    cmd.Parameters.AddWithValue("@val3", saveDetails.Result);
                    cmd.Parameters.AddWithValue("@val4", saveDetails.SampleMrdNo);
                    cmd.Parameters.AddWithValue("@val5", saveDetails.NormalValue);
                    cmd.Parameters.AddWithValue("@val6", saveDetails.CriticalValue);
                    cmd.Parameters.AddWithValue("@val7", saveDetails.Units);
                    cmd.Parameters.AddWithValue("@val8", saveDetails.Age);
                    cmd.Parameters.AddWithValue("@val9", saveDetails.Sex);
                    cmd.Parameters.AddWithValue("@val10", saveDetails.Comments);
                    cmd.Parameters.AddWithValue("@val11", saveDetails.ConfirmFlag);
                    cmd.Parameters.AddWithValue("@val12", saveDetails.SaveFlag);
                    cmd.Parameters.AddWithValue("@val13", saveDetails.CancelFlag);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getViewListByMrdNo
        /// <summary>
        ///  
        /// </summary>
        ///  
        /// <returns></returns>
        [Route("api/Account/getViewListByMrdNo")]
        [HttpGet]
        public List<SampleContainersByMrdNo> getViewListByMrdNo(string mrdNo)
        {
            List<SampleContainersByMrdNo> lstSampleDetails = new List<SampleContainersByMrdNo>();
            List<SampleContainersByMrdNo> lstSampleDetails1 = new List<SampleContainersByMrdNo>();
            DataTable dt = new DataTable();
            //int i = 1;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    DataTable dts = new DataTable();
                    using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                    {
                        string strSQLs = "SELECT * FROM childtestlist child INNER JOIN SampleCollecter labtestlist ON child.TestCode = labtestlist.TestCode where labtestlist.MrdNo = '" + mrdNo + "' order by SampleCollecterId";
                        conns.Open();
                        MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                        MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                        DataSet dss = new DataSet();
                        mydatas.Fill(dss);
                        dts = dss.Tables[0];
                        if (dts.Rows.Count > 0)
                        {
                            foreach (DataRow drs in dts.Rows)
                            {
                                if (drs != null)
                                {
                                    var cmn = drs["commonParagraph"].ToString();
                                    var pgr = drs["UrineCulture"].ToString();
                                    var multi = drs["multiplecomponents"].ToString();

                                    #region multicompenenets
                                    if (multi == "Yes")
                                    {
                                        string strTestDetails = "SELECT distinct * from  testmultiplecomponents where TestCode='" + drs["TestCode"].ToString() + "'";
                                        //string strTestDetails = "select Distinct * from  multiplecomponentwithcalculation MC join  viewlistdetails VL on MC.TestCode = VL.TestCode where MC.TestCode='" + profileDetails.TestCode + "' order by PriorityStatus";
                                        MySqlDataAdapter strTestDetailsData = new MySqlDataAdapter(strTestDetails, conn);
                                        MySqlCommandBuilder strDetailsCmd = new MySqlCommandBuilder(strTestDetailsData);
                                        DataSet strDetailsDataSet = new DataSet();
                                        DataTable testDetailsDT = new DataTable();

                                        strTestDetailsData.Fill(strDetailsDataSet);
                                        testDetailsDT = strDetailsDataSet.Tables[0];
                                        foreach (DataRow multidr in testDetailsDT.Rows)
                                        {
                                            if (multidr != null)
                                            {
                                                SampleContainersByMrdNo sampleContainer = new SampleContainersByMrdNo();
                                                sampleContainer.MrdNo = mrdNo;
                                                if (cmn == "No" && pgr == "No" && multi == "No")
                                                {
                                                    sampleContainer.TestType = 1;
                                                }
                                                else if (cmn == "Yes" && pgr == "No" && multi == "No")
                                                {
                                                    sampleContainer.TestType = 2;
                                                }
                                                else if (cmn == "No" && pgr == "Yes" && multi == "No")
                                                {
                                                    sampleContainer.TestType = 3;
                                                }
                                                else if (cmn == "No" && pgr == "No" && multi == "Yes")
                                                {
                                                    sampleContainer.TestType = 4;
                                                }
                                                sampleContainer.RegID = Convert.ToInt32(multidr["TestMultipleComponentsID"]);
                                                sampleContainer.TestCode = multidr["TestCode"].ToString();
                                                sampleContainer.TestName = multidr["ElementName"].ToString();
                                                sampleContainer.Color = multidr["Color"].ToString();
                                                sampleContainer.MultiUnits = multidr["Units"].ToString();
                                                sampleContainer.MultiComments = multidr["Comments"].ToString();
                                                sampleContainer.MultiComments = multidr["CommentsType"].ToString();
                                                sampleContainer.CriticalLow = multidr["CriticalLow"].ToString();
                                                sampleContainer.CriticalHigh = multidr["CriticalHigh"].ToString();
                                                sampleContainer.ReferenceLow = multidr["ReferenceLow"].ToString();
                                                sampleContainer.ReferenceHigh = multidr["ReferenceHigh"].ToString();
                                                sampleContainer.Methodology = multidr["Methodology"].ToString();
                                                sampleContainer.MultiNormalValues = multidr["NormalValues"].ToString();
                                                if (multidr["PriorityStatus"] != DBNull.Value)
                                                {
                                                    sampleContainer.Priority = Convert.ToInt32(multidr["PriorityStatus"]);
                                                }
                                                else
                                                {
                                                    sampleContainer.Priority = 0;
                                                }
                                                lstSampleDetails1.Add(sampleContainer);
                                            }
                                        }
                                        lstSampleDetails.AddRange(lstSampleDetails1);
                                    }
                                    else
                                    {
                                        SampleContainersByMrdNo sampleContainer1 = new SampleContainersByMrdNo();
                                        sampleContainer1.MrdNo = mrdNo;
                                        if (cmn == "No" && pgr == "No" && multi == "No")
                                        {
                                            sampleContainer1.TestType = 1;
                                        }
                                        else if (cmn == "Yes" && pgr == "No" && multi == "No")
                                        {
                                            sampleContainer1.TestType = 2;
                                        }
                                        else if (cmn == "No" && pgr == "Yes" && multi == "No")
                                        {
                                            sampleContainer1.TestType = 3;
                                        }
                                        sampleContainer1.TestCode = drs["TestCode"].ToString();
                                        sampleContainer1.TestName = drs["TestName"].ToString();
                                        lstSampleDetails.Add(sampleContainer1);
                                    }
                                    #endregion multicomponents
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstSampleDetails;
            }
        }
        #endregion

        #region insertLabTechResult
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/insertLabTechResult")]
        [HttpPost]
        public void insertLabTechResult(ResultLabTech resultLabTech)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' " +
                                    " && RegId='" + resultLabTech.RegId + "' and PatientID='" + resultLabTech.PatientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        //  if ((resultLabTech.Result != "") && (resultLabTech.Result != "undefined") && (resultLabTech.Result != null))
                        //  { 

                        if (resultLabTech.Checkflag == "3")
                        {
                            updateLab = "UPDATE resultlabtest SET Result = @Result, Comment1 = @Comment , Comment2 = @Notes," +
                                        " FinalResult=@FinalResult,SpecialComments=@SpecialComment  Where MrdNo='" + resultLabTech.MrdNo + "' " +
                                        " && TestCode ='" + resultLabTech.TestCode + "' && ResultLabId=" + dt.Rows[0]["ResultLabId"].ToString() + " ";
                            MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                            updatecmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                            updatecmd1.Parameters.AddWithValue("@SpecialComment", resultLabTech.SpecialComments);
                            updatecmd1.Parameters.AddWithValue("@Notes", resultLabTech.Notes);
                            updatecmd1.Parameters.AddWithValue("@FinalResult", resultLabTech.FinalResult);
                            updatecmd1.CommandType = CommandType.Text;
                            updatecmd1.ExecuteNonQuery();
                        }
                        else
                        {
                            if ((Convert.ToInt32(resultLabTech.TestType) == 2) || (Convert.ToInt32(resultLabTech.TestType) == 3))
                            {
                                updateLab = "UPDATE resultlabtest SET Result = @Result, Comment1 = @Comment , Comment2 = @Notes,confirmFlag=@Confirmflag," +
                                            " FinalResult=@FinalResult,SpecialComments=@SpecialComment Where MrdNo='" + resultLabTech.MrdNo + "' " +
                                            " && TestCode ='" + resultLabTech.TestCode + "' && ResultLabId=" + dt.Rows[0]["ResultLabId"].ToString() + "";
                            }
                            else
                            {
                                updateLab = "UPDATE resultlabtest SET saveFlag=1, Result = @Result, Comment1 = @Comment , Comment2 = @Notes,confirmFlag=@Confirmflag," +
                                            " FinalResult=@FinalResult,SpecialComments=@SpecialComment Where MrdNo='" + resultLabTech.MrdNo + "' " +
                                            " && TestCode ='" + resultLabTech.TestCode + "' && ResultLabId=" + dt.Rows[0]["ResultLabId"].ToString() + " ";
                            }
                            MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                            updatecmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                            updatecmd1.Parameters.AddWithValue("@SpecialComment", resultLabTech.SpecialComments);
                            updatecmd1.Parameters.AddWithValue("@Notes", resultLabTech.Notes);
                            updatecmd1.Parameters.AddWithValue("@FinalResult", resultLabTech.FinalResult);

                            if (resultLabTech.Checkflag == "2")
                            {
                                updatecmd1.Parameters.AddWithValue("@Confirmflag", 1);
                            }
                            else if (resultLabTech.Checkflag == "1")
                            {
                                updatecmd1.Parameters.AddWithValue("@Confirmflag", 0);
                            }
                            updatecmd1.CommandType = CommandType.Text;
                            updatecmd1.ExecuteNonQuery();

                            //string checkCount = "SELECT Count(Id) as acceptCount FROM viewlistdetails where MrdNo='PC00429RBX' and Accept=0;";
                            //MySqlDataAdapter countData = new MySqlDataAdapter(checkCount, conn);
                            //MySqlCommandBuilder countCmd = new MySqlCommandBuilder(countData);
                            //DataSet countDs = new DataSet();
                            //DataTable countDT = new DataTable();
                            //countData.Fill(countDs);
                            //countDT = countDs.Tables[0];
                            //if (countDT.Rows.Count >0)
                            //{
                            //    if ((int)countDT.Rows[0]["acceptCount"] == 0)
                            //    {

                            //    }
                            //}
                        }

                        if (resultLabTech.SpecialComments != null && resultLabTech.SpecialComments != "")
                        {
                            MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                            updateLab = "UPDATE laborder SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where MrdNo='" + resultLabTech.MrdNo + "'";
                            updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.ExecuteNonQuery();

                            resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(resultLabTech.MrdNo.Length - 3);
                            resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(0, 2);

                            int regIDValue = Convert.ToInt32(resultLabTech.MrdNo);


                            updateLab = "UPDATE patientregistration SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where RegID='" + regIDValue + "'";
                            updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.ExecuteNonQuery();
                        }
                        //  }
                    }
                    else
                    {
                        if ((resultLabTech.Result != "") && (resultLabTech.Result != "undefined") && (resultLabTech.Result != null))
                        {
                            string strSQL1 = "INSERT INTO resultlabtest(MrdNo,TestCode,TestName,Result,Comment1,CreateDate,units,DefaultValues,Comment2,SpecialComments" +
                                ",StartRange,EndRange,Methodology,AdditionalFixedComments,CriticalValue,DisplayValueText,RegId,SampleContainer,ProfilePriority,FreeText," +
                                "NormalValuesFiled,Age,Sex,saveFlag,confirmFlag,CancelFlag,ProfileName,PatientID,FinalResult) " +
                                "VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14," +
                                "@val15,@val16,@val17,@val18,@val19,@val20,@val21,@val22,@val23,@val24,@val25,@val26,@val27,@val28,@val29)";

                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.Parameters.AddWithValue("@val1", resultLabTech.MrdNo);
                            cmd1.Parameters.AddWithValue("@val2", resultLabTech.TestCode);
                            cmd1.Parameters.AddWithValue("@val3", resultLabTech.TestName);
                            cmd1.Parameters.AddWithValue("@val4", resultLabTech.Result);
                            cmd1.Parameters.AddWithValue("@val5", resultLabTech.Comment);
                            cmd1.Parameters.AddWithValue("@val6", DateTime.Now);
                            cmd1.Parameters.AddWithValue("@val7", resultLabTech.Units);
                            cmd1.Parameters.AddWithValue("@val8", resultLabTech.NormalValues);
                            cmd1.Parameters.AddWithValue("@val9", resultLabTech.Notes);
                            cmd1.Parameters.AddWithValue("@val10", resultLabTech.SpecialComments);
                            cmd1.Parameters.AddWithValue("@val11", resultLabTech.StartRange);
                            cmd1.Parameters.AddWithValue("@val12", resultLabTech.EndRange);
                            cmd1.Parameters.AddWithValue("@val13", resultLabTech.Methodology);
                            cmd1.Parameters.AddWithValue("@val14", resultLabTech.AdditionalFixedComments);
                            cmd1.Parameters.AddWithValue("@val15", resultLabTech.CriticalValue);
                            cmd1.Parameters.AddWithValue("@val16", resultLabTech.DisplayValueText);
                            cmd1.Parameters.AddWithValue("@val17", resultLabTech.RegId);
                            cmd1.Parameters.AddWithValue("@val18", resultLabTech.SampleContainer);
                            cmd1.Parameters.AddWithValue("@val19", resultLabTech.TestType);
                            cmd1.Parameters.AddWithValue("@val20", resultLabTech.FreeText);
                            cmd1.Parameters.AddWithValue("@val21", resultLabTech.NormalValuesFiled);
                            cmd1.Parameters.AddWithValue("@val22", resultLabTech.Age);
                            cmd1.Parameters.AddWithValue("@val23", resultLabTech.Sex);
                            cmd1.Parameters.AddWithValue("@val24", 1);
                            cmd1.Parameters.AddWithValue("@val25", resultLabTech.confirmFlag);
                            cmd1.Parameters.AddWithValue("@val26", resultLabTech.CancelFlag);
                            cmd1.Parameters.AddWithValue("@val27", resultLabTech.ProfileName);
                            cmd1.Parameters.AddWithValue("@val28", resultLabTech.PatientID);
                            cmd1.Parameters.AddWithValue("@val29", resultLabTech.FinalResult);
                            cmd1.CommandType = CommandType.Text;
                            cmd1.ExecuteNonQuery();

                            //string updateviewResult = "UPDATE  viewlistdetails SET Result = '" + resultLabTech.Result + "' Where TestName='" + resultLabTech.TestName + "'";
                            //MySqlCommand updatecmdnew = new MySqlCommand(updateviewResult, conn);
                            //updatecmdnew = new MySqlCommand(updateviewResult, conn);
                            //updatecmdnew.ExecuteNonQuery();
                        }
                    }
                    //string updateviewResult = "UPDATE  resultlabtest SET CalculationInformation = '" + resultLabTech.Total + "' Where MrdNo='" + resultLabTech.MrdNo + "' and ProfilePriority='"+ resultLabTech.TestType + "'";
                    //MySqlCommand updatecmdnew = new MySqlCommand(updateviewResult, conn);
                    //updatecmdnew = new MySqlCommand(updateviewResult, conn);
                    //updatecmdnew.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region insertOutSorcedDetails       
        [Route("api/Account/insertOutSorcedDetails")]
        [HttpPost]
        public List<ResultLabTech> insertOutSorcedDetails(ResultLabTech resultLabTech)
        {
            List<ResultLabTech> resultList = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  ousourceddetails Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' " +
                                    " and PatientID='" + resultLabTech.PatientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    if (Convert.ToInt32(resultLabTech.Checkflag.ToString()) == 1)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            updateLab = "UPDATE ousourceddetails SET OutSourcedTo = @OutSourcedTo, TAT = @TAT Where MrdNo='" + resultLabTech.MrdNo + "' " +
                                        " and TestCode ='" + resultLabTech.TestCode + "' and ID=" + dt.Rows[0]["ID"].ToString() + " ";
                            MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.Parameters.AddWithValue("@OutSourcedTo", resultLabTech.OutSrcdToName);
                            updatecmd1.Parameters.AddWithValue("@TAT", resultLabTech.outSrcdTAT);
                            updatecmd1.CommandType = CommandType.Text;
                            updatecmd1.ExecuteNonQuery();
                        }
                        else
                        {
                            string strSQL1 = "INSERT INTO ousourceddetails(MrdNo,PatientID,PatientName,TestCode,TestName,OutSourcedTo,TAT,CreatedDate) " +
                                "VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";

                            MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                            cmd1.Parameters.AddWithValue("@val1", resultLabTech.MrdNo);
                            cmd1.Parameters.AddWithValue("@val2", resultLabTech.PatientID);
                            cmd1.Parameters.AddWithValue("@val3", resultLabTech.PatientName);
                            cmd1.Parameters.AddWithValue("@val4", resultLabTech.TestCode);
                            cmd1.Parameters.AddWithValue("@val5", resultLabTech.TestName);
                            cmd1.Parameters.AddWithValue("@val6", resultLabTech.OutSrcdToName);
                            cmd1.Parameters.AddWithValue("@val7", resultLabTech.outSrcdTAT);
                            cmd1.Parameters.AddWithValue("@val8", DateTime.Now);
                            cmd1.CommandType = CommandType.Text;
                            cmd1.ExecuteNonQuery();
                        }
                    }
                    else if (Convert.ToInt32(resultLabTech.Checkflag.ToString()) == 2)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                ResultLabTech newList = new ResultLabTech();
                                newList.OutSrcdToName = dr["OutSourcedTo"].ToString();
                                newList.outSrcdTAT = dr["TAT"].ToString();
                                resultList.Add(newList);
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return resultList;
            }
        }
        #endregion

        #region updateResultForHistory
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/updateResultForHistory")]
        [HttpPost]
        public void updateResultForHistory(ResultLabTech resultLabTech)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labtesthistory Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' && RegId='" + resultLabTech.RegId + "' and PatientID='" + resultLabTech.PatientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        updateLab = "UPDATE labtesthistory SET Result = @Result, Comment1 = @Comment,CreateDate=@CreateDate Where MrdNo='" + resultLabTech.MrdNo + "' " +
                                        " && TestCode ='" + resultLabTech.TestCode + "' && RegId='" + resultLabTech.RegId + "' ";

                        MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                        updatecmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                        updatecmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                        updatecmd1.Parameters.AddWithValue("@CreateDate", DateTime.Now);
                        updatecmd1.CommandType = CommandType.Text;
                        updatecmd1.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region deletelabRsltVerification
        [Route("api/Account/deletelabRsltVerification")]
        [HttpPost]
        public void deletelabRsltVerification(string mrdNo, string testCode, string testName, string patientID, string indexID)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    // if(testCode.Contains('-'))

                    string strSQL = "SELECT * FROM  labresultverification Where MrdNo='" + mrdNo + "' && TestCode ='" + testCode + "' && PatientID='" + patientID + "' && RegId =" + indexID + "";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        // updateLab = "update labresultverification set Result='', Comment1='',FinalResult='' Where MrdNo='" + mrdNo + "' && TestName='"+ testName + "' " +
                        //            " && TestCode ='" + testCode + "'&& PatientID='" + patientID + "' && RegId =" + indexID + "";

                        if (testCode == "TST095")
                        {
                            string totstrSQL = "SELECT * FROM  labresultverification Where MrdNo='" + mrdNo + "' && TestCode ='" + testCode + "' && PatientID='" + patientID + "' && TestName='Total %'";

                            MySqlDataAdapter totmydata = new MySqlDataAdapter(totstrSQL, conn);
                            MySqlCommandBuilder totcmd = new MySqlCommandBuilder(totmydata);
                            DataSet totds = new DataSet();
                            DataTable totdt = new DataTable();
                            totmydata.Fill(totds);
                            totdt = totds.Tables[0];
                            if (totdt.Rows.Count > 0)
                            {
                                string updateTot = "update labresultverification set Result=" +
                                " " + Convert.ToInt32(totdt.Rows[0]["Result"].ToString()) + " - " +
                                " " + Convert.ToInt32(dt.Rows[0]["Result"].ToString()) + "" +
                                " ,Comment1='',FinalResult=" +
                                " " + Convert.ToInt32(totdt.Rows[0]["FinalResult"].ToString()) + " - " +
                                " " + Convert.ToInt32(dt.Rows[0]["Result"].ToString()) + "" +
                                " Where MrdNo='" + mrdNo + "' && PatientID='" + patientID + "' && TestName='Total %' ";
                                MySqlCommand updateTotcmd1 = new MySqlCommand(updateTot, conn);
                                updateTotcmd1.CommandType = CommandType.Text;
                                updateTotcmd1.ExecuteNonQuery();
                            }
                        }
                        updateLab = "update labresultverification set Result='',Comment1='',FinalResult='' Where MrdNo='" + mrdNo + "' && PatientID='" + patientID + "' && RegId =" + indexID + "";
                        MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                        updatecmd1.CommandType = CommandType.Text;
                        updatecmd1.ExecuteNonQuery();



                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region insertlabresultverification
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/insertlabresultverification")]
        [HttpPost]
        public void insertlabresultverification(ResultLabTech resultLabTech)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labresultverification Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' && RegId='" + resultLabTech.RegId + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    //if (dt.Rows.Count > 0)
                    //{                                               
                    //    updateLab = "UPDATE labresultverification SET Result = @Result,saveFlag=@SaveFlag, Comment1 = @Comment, Comment2 = @Notes,SpecialComments=@SpecialComment,confirmFlag=@Confirmflag,FinalResult=@FinalResult Where MrdNo='" + resultLabTech.MrdNo + "' " +
                    //                " && TestCode ='" + resultLabTech.TestCode + "'&& RegId='" + resultLabTech.RegId + "'";
                    //    MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                    //    updatecmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                    //    updatecmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                    //    updatecmd1.Parameters.AddWithValue("@SpecialComment", resultLabTech.SpecialComments);
                    //    updatecmd1.Parameters.AddWithValue("@Notes", resultLabTech.Notes);
                    //    updatecmd1.Parameters.AddWithValue("@FinalResult", resultLabTech.Total);
                    //    updatecmd1.Parameters.AddWithValue("@Confirmflag", 0);
                    //    updatecmd1.Parameters.AddWithValue("@SaveFlag", resultLabTech.saveFlag);
                    //    updatecmd1.CommandType = CommandType.Text;
                    //    updatecmd1.ExecuteNonQuery();

                    //    if (resultLabTech.SpecialComments != null && resultLabTech.SpecialComments != "")
                    //    {
                    //        updateLab = "UPDATE laborder SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where MrdNo='" + resultLabTech.MrdNo + "'";
                    //        updatecmd1 = new MySqlCommand(updateLab, conn);
                    //        updatecmd1.ExecuteNonQuery();

                    //        resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(resultLabTech.MrdNo.Length - 3);
                    //        resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(0, 2);

                    //        int regIDValue = Convert.ToInt32(resultLabTech.MrdNo);


                    //        updateLab = "UPDATE patientregistration SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where RegID='" + regIDValue + "'";
                    //        updatecmd1 = new MySqlCommand(updateLab, conn);
                    //        updatecmd1.ExecuteNonQuery();
                    //    }                       
                    //}
                    //else
                    //{
                    //    string strSQL1 = "INSERT INTO labresultverification(MrdNo,TestCode,TestName,Result,Comment1,CreateDate,units,DefaultValues,Comment2,SpecialComments" +
                    //        ",StartRange,EndRange,Methodology,AdditionalFixedComments,CriticalValue,DisplayValueText,RegId,SampleContainer,ProfilePriority,FreeText," +
                    //        "NormalValuesFiled,Age,Sex,saveFlag,confirmFlag,CancelFlag,ProfileName,PatientID,FinalResult) " +
                    //        "VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14," +
                    //        "@val15,@val16,@val17,@val18,@val19,@val20,@val21,@val22,@val23,@val24,@val25,@val26,@val27,@val28,@val29)";

                    //    MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                    //    cmd1.Parameters.AddWithValue("@val1", resultLabTech.MrdNo);
                    //    cmd1.Parameters.AddWithValue("@val2", resultLabTech.TestCode);
                    //    cmd1.Parameters.AddWithValue("@val3", resultLabTech.TestName);
                    //    cmd1.Parameters.AddWithValue("@val4", resultLabTech.Result);
                    //    cmd1.Parameters.AddWithValue("@val5", resultLabTech.Comment);
                    //    cmd1.Parameters.AddWithValue("@val6", DateTime.Now.ToShortDateString());
                    //    cmd1.Parameters.AddWithValue("@val7", resultLabTech.Units);
                    //    cmd1.Parameters.AddWithValue("@val8", resultLabTech.NormalValues);
                    //    cmd1.Parameters.AddWithValue("@val9", resultLabTech.Notes);
                    //    cmd1.Parameters.AddWithValue("@val10", resultLabTech.SpecialComments);
                    //    cmd1.Parameters.AddWithValue("@val11", resultLabTech.StartRange);
                    //    cmd1.Parameters.AddWithValue("@val12", resultLabTech.EndRange);
                    //    cmd1.Parameters.AddWithValue("@val13", resultLabTech.Methodology);
                    //    cmd1.Parameters.AddWithValue("@val14", resultLabTech.AdditionalFixedComments);
                    //    cmd1.Parameters.AddWithValue("@val15", resultLabTech.CriticalValue);
                    //    cmd1.Parameters.AddWithValue("@val16", resultLabTech.DisplayValueText);
                    //    cmd1.Parameters.AddWithValue("@val17", resultLabTech.RegId);
                    //    cmd1.Parameters.AddWithValue("@val18", resultLabTech.SampleContainer);
                    //    cmd1.Parameters.AddWithValue("@val19", resultLabTech.TestType);
                    //    cmd1.Parameters.AddWithValue("@val20", resultLabTech.FreeText);
                    //    cmd1.Parameters.AddWithValue("@val21", resultLabTech.NormalValuesFiled);
                    //    cmd1.Parameters.AddWithValue("@val22", resultLabTech.Age);
                    //    cmd1.Parameters.AddWithValue("@val23", resultLabTech.Sex);
                    //    cmd1.Parameters.AddWithValue("@val24", resultLabTech.saveFlag);
                    //    cmd1.Parameters.AddWithValue("@val25", resultLabTech.confirmFlag);
                    //    cmd1.Parameters.AddWithValue("@val26", resultLabTech.CancelFlag);
                    //    cmd1.Parameters.AddWithValue("@val27", resultLabTech.ProfileName);
                    //    cmd1.Parameters.AddWithValue("@val28", resultLabTech.PatientID);
                    //    cmd1.Parameters.AddWithValue("@val29", resultLabTech.Total);
                    //    cmd1.CommandType = CommandType.Text;
                    //    cmd1.ExecuteNonQuery();
                    //}

                    if (dt.Rows.Count > 0)
                    {
                        //updateLab = "UPDATE labresultverification SET Result = @Result,saveFlag=@SaveFlag, Comment1 = @Comment, Comment2 = @Notes,SpecialComments=@SpecialComment,confirmFlag=@Confirmflag,FinalResult=@FinalResult Where MrdNo='" + resultLabTech.MrdNo + "' " +
                        //            " && TestCode ='" + resultLabTech.TestCode + "'&& RegId='" + resultLabTech.RegId + "'";
                        updateLab = "UPDATE labresultverification SET " +
                                    " Result=@Result,Comment1=@Comment,CreateDate=@ModifyDate,units=@Units," +
                                    " DefaultValues=@NormalValues,Comment2=@Notes,SpecialComments=@SpecialComments," +
                                    " StartRange=@StartRange,EndRange=@EndRange,Methodology=@Methodology,AdditionalFixedComments=@AdditionalFixedComments," +
                                    " CriticalValue=@CriticalValue,DisplayValueText=@DisplayValueText,SampleContainer=@SampleContainer," +
                                    " ProfilePriority=@TestType,FreeText=@FreeText,NormalValuesFiled=@NormalValuesFiled,Age=@Age,Sex=@Sex,saveFlag=@saveFlag," +
                                    " confirmFlag=@confirmFlag,CancelFlag=@CancelFlag,ProfileName=@ProfileName,PatientID=@PatientID,FinalResult=@FinalResult " +
                                    " Where MrdNo = '" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' " +
                                    " && RegId='" + resultLabTech.RegId + "' ";

                        MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                        updatecmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                        updatecmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                        updatecmd1.Parameters.AddWithValue("@ModifyDate", DateTime.Now.ToShortDateString());
                        updatecmd1.Parameters.AddWithValue("@Units", resultLabTech.Units);
                        updatecmd1.Parameters.AddWithValue("@NormalValues", resultLabTech.NormalValues);
                        updatecmd1.Parameters.AddWithValue("@Notes", resultLabTech.Notes);
                        updatecmd1.Parameters.AddWithValue("@SpecialComments", resultLabTech.SpecialComments);
                        updatecmd1.Parameters.AddWithValue("@StartRange", resultLabTech.StartRange);
                        updatecmd1.Parameters.AddWithValue("@EndRange", resultLabTech.EndRange);
                        updatecmd1.Parameters.AddWithValue("@Methodology", resultLabTech.Methodology);
                        updatecmd1.Parameters.AddWithValue("@AdditionalFixedComments", resultLabTech.AdditionalFixedComments);
                        updatecmd1.Parameters.AddWithValue("@CriticalValue", resultLabTech.CriticalValue);
                        updatecmd1.Parameters.AddWithValue("@DisplayValueText", resultLabTech.DisplayValueText);
                        updatecmd1.Parameters.AddWithValue("@SampleContainer", resultLabTech.SampleContainer);
                        updatecmd1.Parameters.AddWithValue("@TestType", resultLabTech.TestType);
                        updatecmd1.Parameters.AddWithValue("@FreeText", resultLabTech.FreeText);
                        updatecmd1.Parameters.AddWithValue("@NormalValuesFiled", resultLabTech.NormalValuesFiled);
                        updatecmd1.Parameters.AddWithValue("@Age", resultLabTech.Age);
                        updatecmd1.Parameters.AddWithValue("@Sex", resultLabTech.Sex);
                        updatecmd1.Parameters.AddWithValue("@saveFlag", resultLabTech.saveFlag);
                        updatecmd1.Parameters.AddWithValue("@confirmFlag", 0);
                        updatecmd1.Parameters.AddWithValue("@CancelFlag", resultLabTech.CancelFlag);
                        updatecmd1.Parameters.AddWithValue("@ProfileName", resultLabTech.ProfileName);
                        updatecmd1.Parameters.AddWithValue("@PatientID", resultLabTech.PatientID);
                        updatecmd1.Parameters.AddWithValue("@FinalResult", resultLabTech.Total);
                        updatecmd1.CommandType = CommandType.Text;
                        updatecmd1.ExecuteNonQuery();

                        if (resultLabTech.SpecialComments != null && resultLabTech.SpecialComments != "")
                        {
                            updateLab = "UPDATE laborder SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where MrdNo='" + resultLabTech.MrdNo + "'";
                            updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.ExecuteNonQuery();

                            resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(resultLabTech.MrdNo.Length - 3);
                            resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(0, 2);

                            int regIDValue = Convert.ToInt32(resultLabTech.MrdNo);


                            updateLab = "UPDATE patientregistration SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where RegID='" + regIDValue + "'";
                            updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region getFreeTextValueoldtobedeleted
        [Route("api/Account/getFreeTextValueoldtobedeleted")]
        [HttpGet]
        public List<Agewisereferencevalue> getFreeTextValueoldtobedeleted(string freetext, string testCode, string refID)
        {
            List<Agewisereferencevalue> objRef = new List<Agewisereferencevalue>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string freestrSQL = "SELECT * FROM  agewisereferencevalue Where TestCode = '" + testCode + "' and FreeText like '%" + freetext + "%'";
                    string freestrSQL = "select vd.MrdNo,vd.ID,vd.TestName, vd.TestCode, vd.TestCodeRef, ag.FreeText from viewlistdetails vd " +
                                          " left join agewisereferencevalue ag on vd.TestCode = ag.TestCode where vd.ID = " + refID + " and ag.TestCode = '" + testCode + "' and ag.FreeText like'%" + freetext + "%'";
                    //string freestrSQL = "select vd.MrdNo,vd.ID,vd.TestName, vd.TestCode, vd.TestCodeRef, ag.FreeText from viewlistdetails vd " +
                    //                      " left join agewisereferencevalue ag on vd.TestCode = ag.TestCode where vd.ID = " + refID + " and ag.TestCode = '" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(freestrSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            Agewisereferencevalue reff = new Agewisereferencevalue();
                            reff.FreeText = dr["FreeText"].ToString();
                            reff.AgewiseReferenceValueID = Convert.ToInt32(dr["ID"].ToString());
                            reff.TestName = dr["TestName"].ToString();
                            reff.TestCode = dr["TestCodeRef"].ToString();
                            reff.MrdNo = dr["MrdNo"].ToString();
                            objRef.Add(reff);
                        }
                    }
                    else
                    {
                        //string dispstrSQL = "SELECT * FROM  agewisereferencevalue Where TestCode = '" + testCode + "' and DisplayValue like '%" + freetext + "%'";
                        string dispstrSQL = "select vd.MrdNo,vd.ID,vd.TestName, vd.TestCode, vd.TestCodeRef, ag.DisplayValue from viewlistdetails vd " +
                                            " left join agewisereferencevalue ag on vd.TestCode = ag.TestCode where vd.ID = " + refID + " and ag.TestCode = '" + testCode + "' and ag.DisplayValue like'%" + freetext + "%'";

                        MySqlDataAdapter dispmydata = new MySqlDataAdapter(dispstrSQL, conn);
                        MySqlCommandBuilder dispcmd = new MySqlCommandBuilder(dispmydata);
                        DataSet dispds = new DataSet();
                        DataTable dispdt = new DataTable();
                        dispmydata.Fill(dispds);
                        dispdt = dispds.Tables[0];
                        if (dispdt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dispdt.Rows)
                            {
                                Agewisereferencevalue reff = new Agewisereferencevalue();
                                reff.AgewiseReferenceValueID = Convert.ToInt32(dr["ID"].ToString());
                                reff.TestName = dr["TestName"].ToString();
                                reff.FreeText = dr["DisplayValue"].ToString();
                                reff.TestCode = dr["TestCodeRef"].ToString();
                                reff.MrdNo = dr["MrdNo"].ToString();
                                objRef.Add(reff);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return objRef;
            }
        }
        #endregion

        #region getFreeTextValue
        [Route("api/Account/getFreeTextValue")]
        [HttpGet]
        public List<Agewisereferencevalue> getFreeTextValue(int checkFlag, string testCode, string refID, string element)
        {
            List<Agewisereferencevalue> objRef = new List<Agewisereferencevalue>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string freestrSQL = "";
                    if (checkFlag == 1)
                    {
                        freestrSQL = "select vd.MrdNo,vd.ID,vd.TestName, vd.TestCode, vd.TestCodeRef, ag.FreeTemplateText,ag.FreeTemplateValue from viewlistdetails vd " +
                                     " left join freetexttemplate ag on vd.TestCode = ag.TestCode where vd.ID = " + refID + " and ag.TestCode = '" + testCode + "' and ag.ElementName like'%" + element + "%'";
                    }
                    else if (checkFlag == 2)
                    {
                        freestrSQL = "select vd.MrdNo,vd.ID,vd.TestName, vd.TestCode, vd.TestCodeRef, ag.FreeTemplateText,ag.FreeTemplateValue from viewlistdetails vd" +
                                     " left join freetexttemplate ag on vd.TestCode = ag.TestCode where vd.ID = " + refID + " and ag.TestCode = '" + testCode + "' ";
                    }

                    MySqlDataAdapter mydata = new MySqlDataAdapter(freestrSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if ((dr["FreeTemplateText"] != DBNull.Value) && (dr["FreeTemplateText"].ToString() != ""))
                            {
                                Agewisereferencevalue reff = new Agewisereferencevalue();
                                reff.FreeText = dr["FreeTemplateText"].ToString();
                                reff.AgewiseReferenceValueID = Convert.ToInt32(dr["ID"].ToString());
                                reff.TestName = dr["TestName"].ToString();
                                reff.TestCode = dr["TestCodeRef"].ToString();
                                reff.MrdNo = dr["MrdNo"].ToString();
                                objRef.Add(reff);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return objRef;
            }
        }
        #endregion

        #region deleteLabResultVerification
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/deleteLabResultVerification")]
        [HttpPost]
        public void deleteLabResultVerification(string MrdNo, string patientID)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labresultverification Where MrdNo='" + MrdNo + "' and PatientID='" + patientID + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string strSQL1 = "truncate table  labresultverification";
                        MySqlCommand deletecmd = new MySqlCommand(strSQL1, conn);
                        deletecmd.CommandType = CommandType.Text;
                        deletecmd.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion


        #region insertResultForHistoryold
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/insertResultForHistoryold")]
        [HttpPost]
        public void insertResultForHistoryold(ResultLabTech resultLabTech)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labtesthistory Where MrdNo='" + resultLabTech.MrdNo + "' && TestCode ='" + resultLabTech.TestCode + "' && RegId='" + resultLabTech.RegId + "' and CreateDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {

                        if (resultLabTech.Checkflag == "3")
                        {
                            updateLab = "UPDATE labtesthistory SET Result = @Result, Comment1 = @Comment , Comment2 = @Notes  Where MrdNo='" + resultLabTech.MrdNo + "' " +
                                        " && TestCode ='" + resultLabTech.TestCode + "' && RegId='" + resultLabTech.RegId + "'";
                        }
                        else
                        {
                            updateLab = "UPDATE labtesthistory SET Result = @Result, Comment1 = @Comment , Comment2 = @Notes,confirmFlag=@Confirmflag Where MrdNo='" + resultLabTech.MrdNo + "' " +
                                        " && TestCode ='" + resultLabTech.TestCode + "'&& saveFlag =1 && RegId='" + resultLabTech.RegId + "'";
                        }

                        MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                        updatecmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                        updatecmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                        updatecmd1.Parameters.AddWithValue("@Notes", resultLabTech.Notes);

                        if (resultLabTech.Checkflag == "2")
                        {
                            updatecmd1.Parameters.AddWithValue("@Confirmflag", 1);
                        }
                        else if (resultLabTech.Checkflag == "1")
                        {
                            updatecmd1.Parameters.AddWithValue("@Confirmflag", 0);
                        }

                        updatecmd1.CommandType = CommandType.Text;
                        updatecmd1.ExecuteNonQuery();
                        //}
                    }
                    else
                    {
                        string strSQL1 = "INSERT INTO labtesthistory(MrdNo,TestCode,TestName,Result,Comment1,CreateDate,units,DefaultValues,Comment2,SpecialComments" +
                            ",StartRange,EndRange,Methodology,AdditionalFixedComments,CriticalValue,DisplayValueText,RegId,SampleContainer,ProfilePriority,FreeText," +
                            "NormalValuesFiled,Age,Sex,saveFlag,confirmFlag,CancelFlag,ProfileName,PatientID) " +
                            "VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14," +
                            "@val15,@val16,@val17,@val18,@val19,@val20,@val21,@val22,@val23,@val24,@val25,@val26,@val27,@val28)";

                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@val1", resultLabTech.MrdNo);
                        cmd1.Parameters.AddWithValue("@val2", resultLabTech.TestCode);
                        cmd1.Parameters.AddWithValue("@val3", resultLabTech.TestName);
                        cmd1.Parameters.AddWithValue("@val4", resultLabTech.Result);
                        cmd1.Parameters.AddWithValue("@val5", resultLabTech.Comment);
                        cmd1.Parameters.AddWithValue("@val6", DateTime.Now);
                        cmd1.Parameters.AddWithValue("@val7", resultLabTech.Units);
                        cmd1.Parameters.AddWithValue("@val8", resultLabTech.NormalValues);
                        cmd1.Parameters.AddWithValue("@val9", resultLabTech.Notes);
                        cmd1.Parameters.AddWithValue("@val10", resultLabTech.SpecialComments);
                        cmd1.Parameters.AddWithValue("@val11", resultLabTech.StartRange);
                        cmd1.Parameters.AddWithValue("@val12", resultLabTech.EndRange);
                        cmd1.Parameters.AddWithValue("@val13", resultLabTech.Methodology);
                        cmd1.Parameters.AddWithValue("@val14", resultLabTech.AdditionalFixedComments);
                        cmd1.Parameters.AddWithValue("@val15", resultLabTech.CriticalValue);
                        cmd1.Parameters.AddWithValue("@val16", resultLabTech.DisplayValueText);
                        cmd1.Parameters.AddWithValue("@val17", resultLabTech.RegId);
                        cmd1.Parameters.AddWithValue("@val18", resultLabTech.SampleContainer);
                        cmd1.Parameters.AddWithValue("@val19", resultLabTech.TestType);
                        cmd1.Parameters.AddWithValue("@val20", resultLabTech.FreeText);
                        cmd1.Parameters.AddWithValue("@val21", resultLabTech.NormalValuesFiled);
                        cmd1.Parameters.AddWithValue("@val22", resultLabTech.Age);
                        cmd1.Parameters.AddWithValue("@val23", resultLabTech.Sex);
                        cmd1.Parameters.AddWithValue("@val24", 1);
                        cmd1.Parameters.AddWithValue("@val25", resultLabTech.confirmFlag);
                        cmd1.Parameters.AddWithValue("@val26", resultLabTech.CancelFlag);
                        cmd1.Parameters.AddWithValue("@val27", resultLabTech.ProfileName);
                        cmd1.Parameters.AddWithValue("@val28", resultLabTech.PatientID);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region insertResultForHistory
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/insertResultForHistory")]
        [HttpPost]
        public void insertResultForHistory(string mrdNo)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  resultlabtest Where MrdNo='" + mrdNo + "' and Status=1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        //string strSQL1 = "INSERT INTO labtesthistory(MrdNo,TestCode,TestName,Result,Comment1,CreateDate,units,DefaultValues,Comment2,SpecialComments" +
                        //    ",StartRange,EndRange,Methodology,AdditionalFixedComments,CriticalValue,DisplayValueText,RegId,SampleContainer,ProfilePriority,FreeText," +
                        //    "NormalValuesFiled,Age,Sex,saveFlag,confirmFlag,CancelFlag,ProfileName,PatientID) " +
                        //    "VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13,@val14," +
                        //    "@val15,@val16,@val17,@val18,@val19,@val20,@val21,@val22,@val23,@val24,@val25,@val26,@val27,@val28)";
                        //MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        //cmd1.Parameters.AddWithValue("@val1", resultLabTech.MrdNo);
                        //cmd1.Parameters.AddWithValue("@val2", resultLabTech.TestCode);
                        //cmd1.Parameters.AddWithValue("@val3", resultLabTech.TestName);
                        //cmd1.Parameters.AddWithValue("@val4", resultLabTech.Result);
                        //cmd1.Parameters.AddWithValue("@val5", resultLabTech.Comment);
                        //cmd1.Parameters.AddWithValue("@val6", DateTime.Now.ToString("MM/dd/yyyy"));
                        //cmd1.Parameters.AddWithValue("@val7", resultLabTech.Units);
                        //cmd1.Parameters.AddWithValue("@val8", resultLabTech.NormalValues);
                        //cmd1.Parameters.AddWithValue("@val9", resultLabTech.Notes);
                        //cmd1.Parameters.AddWithValue("@val10", resultLabTech.SpecialComments);
                        //cmd1.Parameters.AddWithValue("@val11", resultLabTech.StartRange);
                        //cmd1.Parameters.AddWithValue("@val12", resultLabTech.EndRange);
                        //cmd1.Parameters.AddWithValue("@val13", resultLabTech.Methodology);
                        //cmd1.Parameters.AddWithValue("@val14", resultLabTech.AdditionalFixedComments);
                        //cmd1.Parameters.AddWithValue("@val15", resultLabTech.CriticalValue);
                        //cmd1.Parameters.AddWithValue("@val16", resultLabTech.DisplayValueText);
                        //cmd1.Parameters.AddWithValue("@val17", resultLabTech.RegId);
                        //cmd1.Parameters.AddWithValue("@val18", resultLabTech.SampleContainer);
                        //cmd1.Parameters.AddWithValue("@val19", resultLabTech.TestType);
                        //cmd1.Parameters.AddWithValue("@val20", resultLabTech.FreeText);
                        //cmd1.Parameters.AddWithValue("@val21", resultLabTech.NormalValuesFiled);
                        //cmd1.Parameters.AddWithValue("@val22", resultLabTech.Age);
                        //cmd1.Parameters.AddWithValue("@val23", resultLabTech.Sex);
                        //cmd1.Parameters.AddWithValue("@val24", 1);
                        //cmd1.Parameters.AddWithValue("@val25", resultLabTech.confirmFlag);
                        //cmd1.Parameters.AddWithValue("@val26", resultLabTech.CancelFlag);
                        //cmd1.Parameters.AddWithValue("@val27", resultLabTech.ProfileName);
                        //cmd1.Parameters.AddWithValue("@val28", resultLabTech.PatientID);
                        //cmd1.CommandType = CommandType.Text;
                        //cmd1.ExecuteNonQuery();

                        string strSQL1 = "INSERT INTO labtesthistory (MrdNo,TestCode,TestName,ProfileCode,ProfileName,units,CreateDate,Result,Comment1,Comment2,DisplayValueText,RegId,ProfilePriority,FreeText, " +
                                         " NormalValuesFiled,Status,saveFlag,confirmFlag,CancelFlag,PatientID) select " +
                                         " MrdNo,TestCode,TestName,ProfileCode,ProfileName,units,CreateDate,Result,Comment1,Comment2,DisplayValueText,RegId,ProfilePriority,FreeText, " +
                                         " NormalValuesFiled,Status,saveFlag,confirmFlag,CancelFlag,PatientID " +
                                         " from resultlabtest Where MrdNo='" + mrdNo + "' and Status=1 and TestName not in(select TestName from labtesthistory where MrdNo='" + mrdNo + "')";
                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region insertLabTechResultTotal
        /// <summary>
        /// table - ResultLabTech
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/insertLabTechResultTotal")]
        [HttpPost]
        public void insertLabTechResultTotal(ResultLabTech resultLabTech)
        {
            DataTable dt = new DataTable();
            string updateLab = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  labresultverification Where MrdNo='" + resultLabTech.MrdNo + "' and TestCode ='" + resultLabTech.TestCode + "' and RegId='" + resultLabTech.RegId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {

                        if (resultLabTech.Checkflag == "3")
                        {
                            updateLab = "UPDATE labresultverification SET Result = @Result,FinalResult=@FinalResult, Comment1 = @Comment , Comment2 = @Notes Where MrdNo='" + resultLabTech.MrdNo + "' and TestCode ='" + resultLabTech.TestCode + "' and RegId='" + resultLabTech.RegId + "'";
                        }
                        else
                        {
                            updateLab = "UPDATE labresultverification SET Result = @Result,FinalResult=@FinalResult, Comment1 = @Comment , Comment2 = @Notes,  confirmFlag=@Confirmflag,ProfileName=@ProfileName,PatientID=@PatientID Where MrdNo='" + resultLabTech.MrdNo + "' " +
                              " and TestCode ='" + resultLabTech.TestCode + "' and RegId='" + resultLabTech.RegId + "'";
                        }

                        MySqlCommand updatecmd1 = new MySqlCommand(updateLab, conn);
                        updatecmd1.Parameters.AddWithValue("@Result", resultLabTech.Result);
                        updatecmd1.Parameters.AddWithValue("@Comment", resultLabTech.Comment);
                        updatecmd1.Parameters.AddWithValue("@Notes", resultLabTech.Notes);
                        updatecmd1.Parameters.AddWithValue("@FinalResult", resultLabTech.Total);
                        updatecmd1.Parameters.AddWithValue("@ProfileName", resultLabTech.ProfileName);
                        updatecmd1.Parameters.AddWithValue("@PatientID", resultLabTech.PatientID);
                        if (resultLabTech.Checkflag == "2")
                        {
                            updatecmd1.Parameters.AddWithValue("@Confirmflag", 0);
                        }
                        else if (resultLabTech.Checkflag == "1")
                        {
                            updatecmd1.Parameters.AddWithValue("@Confirmflag", 0);
                        }


                        updatecmd1.CommandType = CommandType.Text;
                        updatecmd1.ExecuteNonQuery();

                        if (resultLabTech.SpecialComments != null && resultLabTech.SpecialComments != "")
                        {
                            updateLab = "UPDATE laborder SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where MrdNo='" + resultLabTech.MrdNo + "'";
                            updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.ExecuteNonQuery();

                            resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(resultLabTech.MrdNo.Length - 3);
                            resultLabTech.MrdNo = resultLabTech.MrdNo.Remove(0, 2);

                            int regIDValue = Convert.ToInt32(resultLabTech.MrdNo);


                            updateLab = "UPDATE patientregistration SET SpecialComments = '" + resultLabTech.SpecialComments + "' Where RegID='" + regIDValue + "'";
                            updatecmd1 = new MySqlCommand(updateLab, conn);
                            updatecmd1.ExecuteNonQuery();
                        }
                        //}
                    }
                    else
                    {
                        string strSQL1 = "INSERT INTO labresultverification(MrdNo,TestCode,TestName,Result,RegId,ProfilePriority,Status,saveFlag,confirmFlag,CancelFlag, " +
                            " ProfileName,CalculationInformation,PatientID)VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13)";

                        MySqlCommand cmd1 = new MySqlCommand(strSQL1, conn);
                        cmd1.Parameters.AddWithValue("@val1", resultLabTech.MrdNo);
                        cmd1.Parameters.AddWithValue("@val2", resultLabTech.TestCode);
                        cmd1.Parameters.AddWithValue("@val3", resultLabTech.TestName);
                        cmd1.Parameters.AddWithValue("@val4", resultLabTech.Result);
                        cmd1.Parameters.AddWithValue("@val5", resultLabTech.RegId);
                        cmd1.Parameters.AddWithValue("@val6", resultLabTech.TestType);
                        cmd1.Parameters.AddWithValue("@val7", 0);
                        cmd1.Parameters.AddWithValue("@val8", 0);
                        cmd1.Parameters.AddWithValue("@val9", resultLabTech.confirmFlag);
                        cmd1.Parameters.AddWithValue("@val10", resultLabTech.CancelFlag);
                        cmd1.Parameters.AddWithValue("@val11", resultLabTech.ProfileName);
                        cmd1.Parameters.AddWithValue("@val12", resultLabTech.Total);
                        cmd1.Parameters.AddWithValue("@val13", resultLabTech.PatientID);

                        cmd1.CommandType = CommandType.Text;
                        cmd1.ExecuteNonQuery();
                        //string updateviewResult = "UPDATE  viewlistdetails SET Result = '" + resultLabTech.Result + "' Where TestName='" + resultLabTech.TestName + "'";
                        //MySqlCommand updatecmdnew = new MySqlCommand(updateviewResult, conn);
                        //updatecmdnew = new MySqlCommand(updateviewResult, conn);
                        //updatecmdnew.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion

        #region getCalcResultForMultiTest
        /// <summary>
        /// gets Calculations ForTestDetails
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/getCalcResultForMultiTest")]
        [HttpPost]
        public string getCalcResultForMultiTest(ResultLabTech resultLabTech)
        {
            // List<ResultLabTech> lstresultDetails = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            var Result = "";
            var ResultNew = "0";
            var diffCalculationFormula = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //conn.Open();
                    //var splcalculation = resultLabTech.CalculationFormula;
                    //string[] splcalculationnew = splcalculation.Split('+');
                    //string testNames = "" + string.Join("','", splcalculationnew) + "";
                    //string sqlNames = "SELECT sum(Result) as Result from  labresultverification rt where MrdNo = '" + resultLabTech.MrdNo + "' and ProfilePriority = 1 and TestCode = '" + resultLabTech.TestCode + "' and TestName in('" + testNames + "')";

                    //MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                    //MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                    //DataSet resultds = new DataSet();
                    //DataTable resultdt = new DataTable();
                    //resultdata.Fill(resultds);
                    //resultdt = resultds.Tables[0];
                    //if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                    //{
                    //    Result = "0";
                    //}
                    //else
                    //{
                    //    if (Convert.ToInt32(resultdt.Rows[0]["Result"]) > 0)
                    //    {
                    //        Result = resultdt.Rows[0]["Result"].ToString();
                    //    }
                    //    string strSQL = "SELECT * FROM  labresultverification Where RegId ='" + resultLabTech.RegId + "' and MrdNo = '" + resultLabTech.MrdNo + "'";
                    //    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    //    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    //    DataSet ds = new DataSet();
                    //    mydata.Fill(ds);
                    //    dt = ds.Tables[0];
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow multidr in dt.Rows)
                    //        {
                    //            if (multidr != null)
                    //            {
                    //                ResultNew = Convert.ToDouble(Result.ToString()) - Convert.ToDouble(multidr["Result"].ToString());
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        ResultNew = Convert.ToInt32(Result);
                    //    }
                    //}
                    var splcalculation = resultLabTech.CalculationFormula;
                    string[] splcalculationnew = splcalculation.Split('+');
                    string testNamesMulti = "" + string.Join("','", splcalculationnew) + "";
                    for (int i = 0; i < splcalculationnew.Length; i++)
                    {
                        if ((splcalculationnew[i].ToString()) != " ")
                        {
                            string sqlNames = "select * from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and TestName = '" + splcalculationnew[i] + "'";
                            MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                            MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                            DataSet resultds = new DataSet();
                            DataTable resultdt = new DataTable();
                            resultdata.Fill(resultds);
                            resultdt = resultds.Tables[0];
                            if (resultdt.Rows.Count > 0)
                            {
                                if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                                {
                                    ResultNew = "0.0";
                                    if (diffCalculationFormula == "")
                                    {
                                        diffCalculationFormula = splcalculation.Replace(splcalculationnew[i].ToString(), ResultNew);
                                    }
                                    else
                                    {
                                        diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                    }
                                }
                                else
                                {
                                    ResultNew = resultdt.Rows[0]["Result"].ToString();
                                    if (diffCalculationFormula == "")
                                    {
                                        diffCalculationFormula = splcalculation.Replace(splcalculationnew[i].ToString(), ResultNew);
                                    }
                                    else
                                    {
                                        diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                    }
                                }
                            }
                            else
                            {
                                ResultNew = "0";
                                diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                            }
                        }
                    }
                    if (diffCalculationFormula != " ")
                    {
                        DataTable dtnew = new DataTable();
                        dtnew.Columns.Add("myExpression", string.Empty.GetType(), diffCalculationFormula);
                        DataRow row = dtnew.NewRow();
                        dtnew.Rows.Add(row);
                        //ResultNew = double.Parse((string)row["myExpression"]);
                        ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();
                    }
                    else
                    {
                        ResultNew = "0";
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return ResultNew.ToString();
            }
        }
        #endregion



        //#region getCalcResultForTestOnly old
        ///// <summary>
        ///// gets Calculations For TestDetails
        ///// </summary>
        ///// <param name="resultLabTech"></param>
        //[Route("api/Account/getCalcResultForTestOnly")]
        //[HttpPost]
        //public string getCalcResultForTestOnly(ResultLabTech resultLabTech)
        //{

        //    // List<ResultLabTech> lstresultDetails = new List<ResultLabTech>();
        //    DataTable dt = new DataTable();
        //    var Result = "";
        //    var ResultNew = "";
        //    char character = ' ';
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {
        //            conn.Open();
        //            var splcalculation = resultLabTech.CalculationFormula;
        //            string specialChar = @"\|!#$%&/()=?»«@£§€{}.-;+'<>_,";
        //            foreach (var item in specialChar)
        //            {
        //                if (splcalculation.Contains(item))
        //                {
        //                    character = item;
        //                }
        //            }
        //            //var ss1 = splcalculation.Split(character)[0];
        //            //var ss2 = splcalculation.Split(character)[1];               

        //            if ((splcalculation.Split(character)[1]).Contains("TST"))
        //            {
        //                string sqlNames = "select " +
        //           " t1.Result " + character + " (select Result from  resultlabtest t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and t2.TestCode = '" + splcalculation.Split(character)[1] + "') as ResultValue " +
        //           " from  resultlabtest t1 where t1.MrdNo = '" + resultLabTech.MrdNo + "' and t1.TestCode = '" + splcalculation.Split(character)[0] + "' and t1.ProfilePriority= '" + resultLabTech.TestType + "' ";

        //                MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
        //                MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
        //                DataSet resultds = new DataSet();
        //                DataTable resultdt = new DataTable();
        //                resultdata.Fill(resultds);
        //                resultdt = resultds.Tables[0];
        //                if (resultdt.Rows.Count > 0)
        //                {
        //                    if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
        //                    {
        //                        ResultNew = "0";
        //                    }
        //                    else
        //                    {
        //                        ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
        //                    }
        //                }
        //                else { ResultNew = "0"; }

        //            }
        //            else
        //            {
        //                string sqlNames = "select Result" + character + splcalculation.Split(character)[1] + " as ResultValue from  resultlabtest t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and t2.TestCode = '" + splcalculation.Split(character)[0] + "'";
        //                MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
        //                MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
        //                DataSet resultds = new DataSet();
        //                DataTable resultdt = new DataTable();
        //                resultdata.Fill(resultds);
        //                resultdt = resultds.Tables[0];
        //                if (resultdt.Rows.Count > 0)
        //                {
        //                    if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
        //                    {
        //                        ResultNew = "0";
        //                    }
        //                    else
        //                    {
        //                        ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
        //                    }
        //                }
        //                else { ResultNew = "0"; }
        //            }

        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //        return ResultNew.ToString();
        //    }
        //}
        //#endregion

        #region getCalcResultForTestOnly
        /// <summary>
        /// gets Calculations For TestDetails
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/getCalcResultForTestOnly")]
        [HttpPost]
        public string getCalcResultForTestOnly(ResultLabTech resultLabTech)
        {

            // List<ResultLabTech> lstresultDetails = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            var Result = "";
            var ResultNew = "";
            char character = ' ';
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    var splcalculation = resultLabTech.CalculationFormula;
                    string specialChar = @"\|!#$%&/()=?»«@£§€{}.-;+'<>_,";
                    foreach (var item in specialChar)
                    {
                        if (splcalculation.Contains(item))
                        {
                            character = item;
                        }
                    }
                    //var ss1 = splcalculation.Split(character)[0];
                    //var ss2 = splcalculation.Split(character)[1];               

                    if (resultLabTech.TestName.StartsWith("Absolute"))
                    {

                    }
                    else if ((splcalculation.Split(character)[1]).Contains("TST"))
                    {
                        string sqlNames = "select " +
                   " t1.Result " + character + " (select Result from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and t2.TestCode = '" + splcalculation.Split(character)[1] + "') as ResultValue " +
                   " from  labresultverification t1 where t1.MrdNo = '" + resultLabTech.MrdNo + "' and t1.TestCode = '" + splcalculation.Split(character)[0] + "' and t1.ProfilePriority= '" + resultLabTech.TestType + "' ";

                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                        DataSet resultds = new DataSet();
                        DataTable resultdt = new DataTable();
                        resultdata.Fill(resultds);
                        resultdt = resultds.Tables[0];
                        if (resultdt.Rows.Count > 0)
                        {
                            if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                            {
                                ResultNew = "0";
                            }
                            else
                            {
                                ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                                ResultNew = System.Math.Round(double.Parse(ResultNew), 2).ToString();
                            }
                        }
                        else { ResultNew = "0"; }

                    }
                    else
                    {
                        string sqlNames = "select Result" + character + splcalculation.Split(character)[1] + " as ResultValue from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and t2.TestCode = '" + splcalculation.Split(character)[0] + "'";
                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                        DataSet resultds = new DataSet();
                        DataTable resultdt = new DataTable();
                        resultdata.Fill(resultds);
                        resultdt = resultds.Tables[0];
                        if (resultdt.Rows.Count > 0)
                        {
                            if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                            {
                                ResultNew = "0";
                            }
                            else
                            {
                                ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                                ResultNew = System.Math.Round(double.Parse(ResultNew), 2).ToString();
                            }
                        }
                        else { ResultNew = "0"; }
                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return ResultNew.ToString();
            }
        }
        #endregion

        #region deleteTestProfileList
        /// <summary>
        /// Table - insert BoneMarrowAspiration
        /// </summary>
        /// <param name="insuranceprofilelist"></param> 
        [Route("api/Account/deleteTestProfileList")]
        [HttpPost]
        public void deleteTestProfileList(AddTestGrid addtestgrid)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    if (addtestgrid.Flag == 1)
                    {
                        string strSQL = "SELECT * FROM  gridprofilelist where MrdNo='" + addtestgrid.MrdNo + "' and ID =" + addtestgrid.ID + "";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            string strSQL1 = "delete from  gridprofilelist where MrdNo='" + addtestgrid.MrdNo + "' and ID=" + addtestgrid.ID + "";
                            // conn.Open();
                            MySqlCommand deletecmd = new MySqlCommand(strSQL1, conn);
                            deletecmd.CommandType = CommandType.Text;
                            deletecmd.ExecuteNonQuery();
                        }
                    }
                    else if (addtestgrid.Flag == 2)
                    {
                        string strSQL = "SELECT * FROM  gridtestlist where MrdNo='" + addtestgrid.MrdNo + "' and TestCode = '" + addtestgrid.TestCode + "' and ID =" + addtestgrid.ID + "";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            string strSQL1 = "delete from  gridtestlist where MrdNo='" + addtestgrid.MrdNo + "' and ID=" + addtestgrid.ID + "";
                            // conn.Open();
                            MySqlCommand deletecmd = new MySqlCommand(strSQL1, conn);
                            deletecmd.CommandType = CommandType.Text;
                            deletecmd.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getCalcResultForAllMulti
        /// <summary>
        /// gets Calculations For TestDetails
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/getCalcResultForAllMulti")]
        [HttpPost]
        public string getCalcResultForAllMulti(ResultLabTech resultLabTech)
        {
            // List<ResultLabTech> lstresultDetails = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            var Result = "";
            var ResultNew = "";
            char character = ' ';
            var CharCount = 0;
            var CharPos = 0;
            string[] testNames = new string[10];

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    var splcalculation = resultLabTech.CalculationFormula;
                    string specialChar = @"*/-+,./!%^\()";
                    var splcalculationNew = "";

                    string ssfinal = " ";
                    string diffExpression = "";
                    string diffCalculationFormula = "";
                    //string[] chars = new string[] { ",", ".", "/", "!", "@", "#", "$", "%", "^", "&", "*", "'", "\"", ";", "_", "(", ")", ":", "|", "[", "]" };


                    foreach (var item in specialChar)
                    {
                        if (splcalculation.Contains(item))
                        {
                            character = item;
                            if (CharCount == 0)
                            {
                                // var ss = System.Text.RegularExpressions.Regex.Replace(splcalculation, @"[0-9\-]", string.Empty);
                                splcalculationNew = splcalculation.Replace(item, ',');
                                CharCount++;
                            }
                            else
                            {
                                splcalculationNew = splcalculationNew.Replace(item, ',');
                                var testNamesnew = splcalculation.Substring(CharPos, splcalculation.IndexOf(item));
                            }
                        }
                        testNames = splcalculationNew.Split(',');
                    }


                    //var ss1 = splcalculation.Split(character)[0];
                    //var ss2 = splcalculation.Split(character)[1];               

                    if (Convert.ToInt32(resultLabTech.Checkflag) == 1)
                    {
                        if ((splcalculation.Split(character)[1]).Contains("TST"))
                        {
                            string sqlNames = "select " +
                       " t1.Result " + character + " (select Result from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and t2.TestCode = '" + splcalculation.Split(character)[1] + "') as ResultValue " +
                       " from  labresultverification t1 where t1.MrdNo = '" + resultLabTech.MrdNo + "' and t1.TestCode = '" + splcalculation.Split(character)[0] + "' and t1.ProfilePriority= '" + resultLabTech.TestType + "' ";

                            MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                            MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                            DataSet resultds = new DataSet();
                            DataTable resultdt = new DataTable();
                            resultdata.Fill(resultds);
                            resultdt = resultds.Tables[0];
                            if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                            {
                                ResultNew = "0";
                            }
                            else
                            {
                                ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                            }
                        }
                        else
                        {
                            string sqlNames = "select Result" + character + splcalculation.Split(character)[1] + " as ResultValue from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and t2.TestCode = '" + splcalculation.Split(character)[0] + "'";
                            MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                            MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                            DataSet resultds = new DataSet();
                            DataTable resultdt = new DataTable();
                            resultdata.Fill(resultds);
                            resultdt = resultds.Tables[0];
                            if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                            {
                                ResultNew = "0";
                            }
                            else
                            {
                                ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                            }
                        }
                    }
                    else if ((Convert.ToInt32(resultLabTech.Checkflag) == 2) && (resultLabTech.TestCode != "TST095"))
                    {
                        for (int i = 0; i < testNames.Length; i++)
                        {
                            int result;
                            var checkName = int.TryParse(testNames[i], out result);
                            if ((!checkName) && (testNames[i] != ""))
                            {
                                var trimedString = testNames[i].TrimStart();
                                trimedString = trimedString.TrimEnd();
                                string sqlNames = "select * from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and TestName = '" + trimedString + "'";

                                MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                DataSet resultds = new DataSet();
                                DataTable resultdt = new DataTable();
                                resultdata.Fill(resultds);
                                resultdt = resultds.Tables[0];
                                if (resultdt.Rows.Count > 0)
                                {
                                    if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                                    {
                                        ResultNew = "0";
                                    }
                                    else
                                    {
                                        ResultNew = resultdt.Rows[0]["Result"].ToString();
                                        //ssfinal = splcalculation.Replace(trimedString, ResultNew);
                                        if (diffCalculationFormula == "")
                                        {
                                            diffCalculationFormula = splcalculation.Replace(trimedString, ResultNew);
                                            ssfinal = diffCalculationFormula;
                                        }
                                        else
                                        {
                                            diffCalculationFormula = diffCalculationFormula.Replace(trimedString, ResultNew);
                                            ssfinal = diffCalculationFormula;
                                        }
                                    }
                                }
                                else
                                {
                                    ResultNew = "0";
                                }
                            }
                        }
                        if (ssfinal != " ")
                        {
                            DataTable dtnew = new DataTable();
                            string[] newtestNames = new string[10];
                            if (ssfinal.Contains('^'))
                            {
                                ssfinal = ssfinal.Replace("^", ",");
                                var resultCal = "";
                                if (ssfinal.Contains('('))
                                {
                                    ssfinal = ssfinal.Replace("(", " ");
                                    ssfinal = ssfinal.Replace(")", " ");
                                    resultCal = ssfinal.Trim(' ');
                                }
                                else { resultCal = ssfinal; }
                                double value, power;
                                value = Convert.ToDouble(resultCal.Split(',')[0]);
                                power = Convert.ToDouble(resultCal.Split(',')[1]);
                                string result = Math.Pow(value, power).ToString();
                                dtnew.Columns.Add("myExpression", string.Empty.GetType(), result);
                            }
                            else
                            {
                                dtnew.Columns.Add("myExpression", string.Empty.GetType(), ssfinal);

                            }
                            DataRow row = dtnew.NewRow();
                            dtnew.Rows.Add(row);
                            //ResultNew = double.Parse((string)row["myExpression"]);
                            ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();
                        }
                        else
                        {
                            ResultNew = "0";
                        }

                    }
                    else if ((Convert.ToInt32(resultLabTech.Checkflag) == 2) && (resultLabTech.TestCode == "TST095"))
                    {
                        string[] splcalculationnew = splcalculation.Split('+');
                        string testNamesMulti = "" + string.Join("','", splcalculationnew) + "";

                        for (int i = 0; i < splcalculationnew.Length; i++)
                        {
                            if ((splcalculationnew[i].ToString()) != " ")
                            {
                                string sqlNames = "select * from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and TestName = '" + splcalculationnew[i] + "'";

                                MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                DataSet resultds = new DataSet();
                                DataTable resultdt = new DataTable();
                                resultdata.Fill(resultds);
                                resultdt = resultds.Tables[0];
                                if (resultdt.Rows.Count > 0)
                                {
                                    if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                                    {
                                        ResultNew = "0";
                                        diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                    }
                                    else
                                    {
                                        ResultNew = resultdt.Rows[0]["Result"].ToString();
                                        if (diffCalculationFormula == "")
                                        {
                                            diffCalculationFormula = splcalculation.Replace(splcalculationnew[i].ToString(), ResultNew);
                                        }
                                        else
                                        {
                                            diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                        }
                                    }
                                }
                                else
                                {
                                    ResultNew = "0";
                                    diffCalculationFormula = diffCalculationFormula.Replace(splcalculationnew[i].ToString(), ResultNew);
                                }
                            }
                        }
                        if (diffCalculationFormula != " ")
                        {
                            DataTable dtnew = new DataTable();
                            dtnew.Columns.Add("myExpression", string.Empty.GetType(), diffCalculationFormula);
                            DataRow row = dtnew.NewRow();
                            dtnew.Rows.Add(row);
                            //ResultNew = double.Parse((string)row["myExpression"]);
                            ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();
                        }
                        else
                        {
                            ResultNew = "0";
                        }

                    }
                    else if ((Convert.ToInt32(resultLabTech.Checkflag) == 3) && (resultLabTech.TestName.StartsWith("Absolute")))
                    {
                        for (int i = 0; i < testNames.Length; i++)
                        {
                            int result;
                            var checkName = int.TryParse(testNames[i], out result);
                            if ((!checkName) && (testNames[i] != ""))
                            {
                                var trimedString = testNames[i].TrimStart();
                                trimedString = trimedString.TrimEnd();
                                string sqlNames = "select * from  labresultverification t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and TestName = '" + trimedString + "'";

                                MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                DataSet resultds = new DataSet();
                                DataTable resultdt = new DataTable();
                                resultdata.Fill(resultds);
                                resultdt = resultds.Tables[0];
                                if (resultdt.Rows.Count > 0)
                                {
                                    if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                                    {
                                        ResultNew = "0";
                                    }
                                    else
                                    {
                                        ResultNew = resultdt.Rows[0]["Result"].ToString();
                                        //ssfinal = splcalculation.Replace(trimedString, ResultNew);
                                        if (diffCalculationFormula == "")
                                        {
                                            diffCalculationFormula = splcalculation.Replace(trimedString, ResultNew);
                                            ssfinal = diffCalculationFormula;
                                        }
                                        else
                                        {
                                            diffCalculationFormula = diffCalculationFormula.Replace(trimedString, ResultNew);
                                            ssfinal = diffCalculationFormula;
                                        }
                                    }
                                }
                                else
                                {
                                    ResultNew = "0";
                                }
                            }
                        }
                        if (ssfinal != " ")
                        {
                            DataTable dtnew = new DataTable();
                            string[] newtestNames = new string[10];
                            if (ssfinal.Contains('^'))
                            {
                                ssfinal = ssfinal.Replace("^", ",");
                                var resultCal = "";
                                if (ssfinal.Contains('('))
                                {
                                    ssfinal = ssfinal.Replace("(", " ");
                                    ssfinal = ssfinal.Replace(")", " ");
                                    resultCal = ssfinal.Trim(' ');
                                }
                                else { resultCal = ssfinal; }
                                double value, power;
                                value = Convert.ToDouble(resultCal.Split(',')[0]);
                                power = Convert.ToDouble(resultCal.Split(',')[1]);
                                string result = Math.Pow(value, power).ToString();
                                dtnew.Columns.Add("myExpression", string.Empty.GetType(), result);
                            }
                            else
                            {
                                dtnew.Columns.Add("myExpression", string.Empty.GetType(), ssfinal);

                            }
                            DataRow row = dtnew.NewRow();
                            dtnew.Rows.Add(row);
                            //ResultNew = double.Parse((string)row["myExpression"]);
                            ResultNew = System.Math.Round(double.Parse((string)row["myExpression"]), 2).ToString();

                            string updateCalResult = "Update labresultverification set Result='" + ResultNew + "', FinalResult='" + ResultNew + "'" +
                                                    " where TestName='" + resultLabTech.TestName + "' and MrdNo='" + resultLabTech.MrdNo + "' ";
                            MySqlCommand updCalCmd = new MySqlCommand(updateCalResult, conn);
                            updCalCmd.CommandType = CommandType.Text;
                            updCalCmd.ExecuteNonQuery();
                        }
                        else
                        {
                            ResultNew = "0";
                        }


                    }


                    //string[] splcalculationnew = splcalculation.Split('+');
                    //string testNames = "" + string.Join("','", splcalculationnew) + "";
                    //string sqlNames = "SELECT sum(Result) as Result from  resultlabtest rt where MrdNo = '" + resultLabTech.MrdNo + "' and ProfilePriority = 4 and saveFlag = 1 and TestCode = '" + resultLabTech.TestCode + "' and TestName in('" + testNames + "')";

                    //MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                    //MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                    //DataSet resultds = new DataSet();
                    //DataTable resultdt = new DataTable();
                    //resultdata.Fill(resultds);
                    //resultdt = resultds.Tables[0];
                    //if ((resultdt.Rows[0]["Result"]) == DBNull.Value)
                    //{
                    //    Result = "0";
                    //}
                    //else
                    //{
                    //    if (Convert.ToInt32(resultdt.Rows[0]["Result"]) > 0)
                    //    {
                    //        Result = resultdt.Rows[0]["Result"].ToString();
                    //    }
                    //    string strSQL = "SELECT * FROM  resultlabtest Where RegId ='" + resultLabTech.RegId + "' and MrdNo = '" + resultLabTech.MrdNo + "'";
                    //    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    //    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    //    DataSet ds = new DataSet();
                    //    mydata.Fill(ds);
                    //    dt = ds.Tables[0];
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow multidr in dt.Rows)
                    //        {
                    //            if (multidr != null)
                    //            {
                    //                ResultNew = Convert.ToInt32(Result) - Convert.ToInt32(multidr["Result"].ToString());
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        ResultNew = Convert.ToInt32(Result);
                    //    }
                    //}
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return ResultNew.ToString();
            }
        }
        #endregion

        #region getStatusForAllMulti
        /// <summary>
        /// gets Calculations For TestDetails
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/getStatusForAllMulti")]
        [HttpPost]

        public string getStatusForAllMulti(ResultLabTech resultLabTech)
        {
            // List<ResultLabTech> lstresultDetails = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            var Result = "";
            var ResultNew = "";
            char character = ' ';
            var CharCount = 0;
            var CharPos = 0;
            string[] testNames = new string[10];

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    var splcalculation = resultLabTech.CalculationFormula;
                    string specialChar = @"*/-+";
                    var splcalculationNew = "";

                    string ssfinal = " ";
                    if (Convert.ToInt32(resultLabTech.Checkflag) == 3)
                    {
                        string sqlNames = "";
                        //if (resultLabTech.TestName.StartsWith("Absolute"))
                        //{
                        //    sqlNames = "select * from  calculationfortestdetails t2 where t2.TestCode = '" + resultLabTech.TestCode + "' ";
                        //}
                        //else {
                        sqlNames = "select * from  calculationfortestdetails t2 where t2.TestCode = '" + resultLabTech.TestCode + "' and Elements = '" + resultLabTech.TestName + "'";
                        //}

                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                        DataSet resultds = new DataSet();
                        DataTable resultdt = new DataTable();
                        resultdata.Fill(resultds);
                        resultdt = resultds.Tables[0];
                        if (resultdt.Rows.Count == 0)
                        {
                            ResultNew = "0";
                        }
                        else { ResultNew = "1"; }
                    }
                    else
                    {
                        foreach (var item in specialChar)
                        {
                            if (splcalculation.Contains(item))
                            {
                                character = item;
                                if (CharCount == 0)
                                {
                                    var ss2 = splcalculation.Replace('.', ' ');
                                    var ss = System.Text.RegularExpressions.Regex.Replace(ss2, @"[0-9\-]", string.Empty);
                                    splcalculationNew = ss.Replace(item, ',');
                                    CharCount++;
                                }
                                else
                                {
                                    splcalculationNew = splcalculationNew.Replace(item, ',');
                                    var testNamesnew = splcalculation.Substring(CharPos, splcalculation.IndexOf(item));
                                }
                            }
                            testNames = splcalculationNew.Split(',');
                        }
                        for (int i = 0; i < testNames.Length; i++)
                        {
                            if (testNames[i] != " ")
                            {
                                string sqlNames = "select * from  calculationfortestdetails t2 where t2.MrdNo = '" + resultLabTech.MrdNo + "' and Elements = '" + testNames[i] + "'";

                                MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                                MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                                DataSet resultds = new DataSet();
                                DataTable resultdt = new DataTable();
                                resultdata.Fill(resultds);
                                resultdt = resultds.Tables[0];
                                if ((resultdt.Rows[0]["ResultValue"]) == DBNull.Value)
                                {
                                    ResultNew = "0";
                                }
                                else
                                {
                                    ResultNew = resultdt.Rows[0]["ResultValue"].ToString();
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return ResultNew.ToString();
            }
        }
        #endregion

        #region confirmallResultDetails
        /// <summary>
        /// gets Calculations For TestDetails
        /// </summary>
        /// <param name="resultLabTech"></param>
        [Route("api/Account/confirmallResultDetails")]
        [HttpPost]
        public string confirmallResultDetails(ResultLabTech resultLabTech)
        {
            var ResultNew = "";

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string sqlNames = "select * from  resultlabtest where MrdNo='" + resultLabTech.MrdNo + "'";
                    MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                    MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                    DataSet resultds = new DataSet();
                    DataTable resultdt = new DataTable();
                    resultdata.Fill(resultds);
                    resultdt = resultds.Tables[0];
                    if (resultdt.Rows.Count == 0)
                    {
                        ResultNew = "0";
                    }
                    else
                    {
                        string sqlUpdate = "update  resultlabtest set confirmFlag=1 where MrdNo='" + resultLabTech.MrdNo + "' and saveFlag=1";
                        MySqlCommand cmd1 = new MySqlCommand(sqlUpdate, conn);
                        cmd1.ExecuteNonQuery();


                        string checkCount = "SELECT Count(Id) as acceptCount FROM viewlistdetails where MrdNo='" + resultLabTech.MrdNo + "' and Accept=0;";
                        MySqlDataAdapter countData = new MySqlDataAdapter(checkCount, conn);
                        MySqlCommandBuilder countCmd = new MySqlCommandBuilder(countData);
                        DataSet countDs = new DataSet();
                        DataTable countDT = new DataTable();
                        countData.Fill(countDs);
                        countDT = countDs.Tables[0];
                        if (countDT.Rows.Count > 0)
                        {
                            if (Convert.ToInt32(countDT.Rows[0]["acceptCount"]) == 0)
                            {
                                string approUpdate = "update  laborderstatus set LabStatus=3 where MrdNo='" + resultLabTech.MrdNo + "'";
                                MySqlCommand approUpdatecmd = new MySqlCommand(approUpdate, conn);
                                approUpdatecmd.ExecuteNonQuery();
                            }
                        }
                        ResultNew = "1";
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return ResultNew.ToString();
            }
        }
        #endregion
        #region insertClientCodes
        /// <summary>
        /// 
        /// </summary>
        /// <param name="insurance"></param>
        [Route("api/Account/insertClientCodes")]
        [HttpPost]
        public void insertClientCodes(HospitalLinkDoctors hospCodes)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string sqlNames = "";
                    conn.Open();
                    if (hospCodes.CodeFlag == 999)
                    {
                        string updSQL = "delete from clientcodedetails where CodeId=" + hospCodes.CodeId + " ";
                        MySqlCommand cmd = new MySqlCommand(updSQL, conn);
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {

                        if (hospCodes.CodeFlag == 1)
                        {
                            sqlNames = "select * from  clientcodedetails where CodeFlag=" + hospCodes.CodeFlag + " and DoctorName='" + hospCodes.DoctorName + "'";

                        }
                        else if (hospCodes.CodeFlag == 2)
                        {
                            sqlNames = "select * from  clientcodedetails where CodeFlag=" + hospCodes.CodeFlag + " and HospitalLinkDoctName='" + hospCodes.HospitalLinkDoctName + "' " +
                                " and HospitalName='" + hospCodes.HospitalName + "'";
                        }
                        else if (hospCodes.CodeFlag == 3)
                        {
                            sqlNames = "select * from  clientcodedetails where CodeFlag=" + hospCodes.CodeFlag + " and Location='" + hospCodes.Location + "' " +
                                " and HospitalLinkDoctName='" + hospCodes.HospitalLinkDoctName + "'";
                        }
                        else if (hospCodes.CodeFlag == 4)
                        {
                            sqlNames = "select * from  clientcodedetails where CodeFlag=3 and Location='" + hospCodes.Location + "' " +
                                " and HospitalLinkDoctName='" + hospCodes.HospitalLinkDoctName + "' and CodeId=" + hospCodes.CodeId + " ";
                        }
                        MySqlDataAdapter resultdata = new MySqlDataAdapter(sqlNames, conn);
                        MySqlCommandBuilder resultcmd = new MySqlCommandBuilder(resultdata);
                        DataSet resultds = new DataSet();
                        DataTable resultdt = new DataTable();
                        resultdata.Fill(resultds);
                        resultdt = resultds.Tables[0];

                        if (resultdt.Rows.Count == 0)
                        {
                            string strSQL = "INSERT INTO  clientcodedetails(DoctorName,HospitalName,HospitalLinkDoctName,ClientCode,GetDate,CodeStatus,CodeFlag,IsMailRequired,ClientEmailID,PhoneNO,Location,PanNo,Address)" +
                                        " VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10,@val11,@val12,@val13)";
                            MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                            cmd.Parameters.AddWithValue("@val1", hospCodes.DoctorName);
                            cmd.Parameters.AddWithValue("@val2", hospCodes.HospitalName);
                            cmd.Parameters.AddWithValue("@val3", hospCodes.HospitalLinkDoctName);
                            cmd.Parameters.AddWithValue("@val4", hospCodes.ClientCode);
                            cmd.Parameters.AddWithValue("@val5", DateTime.Now.ToShortDateString());
                            cmd.Parameters.AddWithValue("@val6", hospCodes.CodeStatus);
                            cmd.Parameters.AddWithValue("@val7", hospCodes.CodeFlag);
                            cmd.Parameters.AddWithValue("@val8", hospCodes.IsMailRequired);
                            cmd.Parameters.AddWithValue("@val9", hospCodes.EmailID);
                            cmd.Parameters.AddWithValue("@val10", hospCodes.PhoneNO);
                            cmd.Parameters.AddWithValue("@val11", hospCodes.Location);
                            cmd.Parameters.AddWithValue("@val12", hospCodes.PanNo);
                            cmd.Parameters.AddWithValue("@val13", hospCodes.Address);
                            cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            string updSQL = "update clientcodedetails set HospitalLinkDoctName='" + hospCodes.HospitalLinkDoctName + "',GetDate='" + DateTime.Now.ToShortDateString() + "'," +
                                            " IsMailRequired='" + hospCodes.IsMailRequired + "',ClientEmailID='" + hospCodes.EmailID + "',PhoneNO='" + hospCodes.PhoneNO + "', " +
                                            " PanNo='" + hospCodes.PanNo + "',Address='" + hospCodes.Address + "' where CodeId=" + hospCodes.CodeId + " ";
                            MySqlCommand cmd = new MySqlCommand(updSQL, conn);
                            cmd.CommandType = CommandType.Text;
                            cmd.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getTableViewPrintDetails
        /// <summary>
        ///  
        /// </summary>
        ///  
        /// <returns></returns>
        [Route("api/Account/getTableViewPrintDetails")]
        [HttpGet]
        public List<TableViewPrint> getTableViewPrintDetails(string mrdNo)
        {
            DataTable dt = new DataTable();
            List<TableViewPrint> tableViewList = new List<TableViewPrint>();
            var fileName = "";
            string[] extList = { ".jpg", ".doc", ".docx" };
            //string physicalparentPath = @"D:/pathosite/LabTestImage/";
            string physicalparentPath = "";
            physicalparentPath = System.Configuration.ConfigurationManager.AppSettings["attTableViewPath"];
            #region loadTableViewprint
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DataTable dts = new DataTable();
                    using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                    {
                        string strSQLs = "select distinct TestCode from  samplecollecter sc where sc.MrdNo='" + mrdNo + "' and " +
                                         " sc.TestCode in(select TestCode from  childtestlist where TestCode = sc.TestCode and TableRequiredPrint = 'Yes'); ";
                        conns.Open();
                        MySqlDataAdapter mydatas = new MySqlDataAdapter(strSQLs, conns);
                        MySqlCommandBuilder cmds = new MySqlCommandBuilder(mydatas);
                        DataSet dss = new DataSet();
                        mydatas.Fill(dss);
                        dts = dss.Tables[0];
                        if (dts.Rows.Count > 0)
                        {
                            foreach (DataRow drs in dts.Rows)
                            {
                                if (drs != null)
                                {
                                    for (int i = 0; i < extList.Length; i++)
                                    {
                                        fileName = physicalparentPath + drs["TestCode"].ToString() + extList[i];
                                        if (File.Exists(fileName))
                                        {
                                            TableViewPrint tableView = new TableViewPrint();
                                            tableView.TableViewPath = "TestDocuments/" + drs["TestCode"].ToString() + extList[i];
                                            tableViewList.Add(tableView);
                                            //File.Copy(fileName, @"D:\\" + drs["TestCode"].ToString() + ".doc", true);    
                                            //string path = FName;
                                            //                       WebClient webClient = new WebClient();
                                            //                         webClient.DownloadFile("http://gesain.net/patho/TestDocuments/TST162.docx", @"d:\myfile.docx");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    TableViewPrint tableView = new TableViewPrint();
                    tableView.TableViewPath = ex.Message;
                }
                return tableViewList;
            }
            #endregion


        }
        #endregion

        #region printtableViewDetails       
        [Route("api/Account/printtableViewDetails")]
        [HttpGet]
        public string printtableViewDetails(string filepath, string mrdNo, string name)
        {
            DataTable dt = new DataTable();
            List<TableViewPrint> tableViewList = new List<TableViewPrint>();
            var fileName = "";
            var retString = "";
            string[] extList = { ".jpg", ".doc", ".docx" };
            string physicalparentPath = "";
            string physicalPathForDown = "";
            //physicalparentPath = System.Configuration.ConfigurationManager.AppSettings["attTableViewPath"];
            physicalparentPath = @"" + System.Configuration.ConfigurationManager.AppSettings["attTableViewPath"] + "";
            physicalPathForDown = @"C:/Users/Kalif/Downloads/";
            #region loadTableViewprint
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    DataTable dts = new DataTable();
                    using (MySqlConnection conns = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                    {
                        fileName = physicalPathForDown + "TST162.docx";
                        //fileName = physicalparentPath + filepath;
                        //fileName = filepath;
                        if (File.Exists(fileName))
                        {
                            //Microsoft.Office.Interop.Word.Application word = new Microsoft.Office.Interop.Word.Application();
                            //Microsoft.Office.Interop.Word.Document doc = word.Documents.Open(@""+ fileName + "");
                            //object missing = System.Reflection.Missing.Value;
                            //object findText = "find me";

                            //word.Selection.Find.ClearFormatting();
                            //word.Selection.Find.Replacement.ClearFormatting();
                            //word.Selection.Find.Replacement.Text = "Found";
                            //object replaceAll = Microsoft.Office.Interop.Word.WdReplace.wdReplaceAll;

                            //if (word.Selection.Find.Execute(ref findText,
                            //    ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
                            //    ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
                            //    ref missing, ref missing))
                            //{
                            //    retString = ("Text found.");
                            //}
                            //else
                            //{
                            //    retString = ("The text could not be located.");
                            //}

                            //StringBuilder sb = new StringBuilder();

                            //object miss = System.Reflection.Missing.Value;

                            //object path = fileName;
                            //object readOnly = true;
                            //Microsoft.Office.Interop.Word.Document docs = word.Documents.Open(ref path, ref miss, ref readOnly, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss);
                            //string totaltext = "";
                            //for (int i = 0; i < docs.Paragraphs.Count; i++)
                            //{
                            //    totaltext += " \r\n " + docs.Paragraphs[i + 1].Range.Text.ToString();
                            //    sb.AppendLine(totaltext);

                            //}
                            //docs.Close();
                            //word.Quit();
                            // Microsoft.Office.Interop.Word.Application wordApp = new Microsoft.Office.Interop.Word.Application { Visible = true };
                            //icrosoft.Office.Interop.Word.Document aDoc = wordApp.Documents.Open(fileName, ReadOnly: false, Visible: true);
                            //aDoc.Activate();
                            //  FindAndReplace(wordApp, "{id}", "12345");
                            //FindAndReplace(wordApp, "find me", "12345");


                            //Microsoft.Office.Interop.Word.Application app = new Microsoft.Office.Interop.Word.Application();
                            // Microsoft.Office.Interop.Word.Document doc = app.Documents.Open(@""+ fileName + "");

                            //var textToFind = "find me";
                            //var textToReplace = "any replacement text";
                            //var matchCase = true;
                            //var matchWholeWord = true;
                            //var matchWildcards = false;
                            //var matchSoundsLike = false;
                            //var matchAllWordForms = false;
                            //var forward = true;
                            //var wrap = 1;
                            //var format = false;
                            //var replace = 2;

                            //app.Selection.Find.Execute(
                            //    textToFind,
                            //    matchCase,
                            //    matchWholeWord,
                            //    matchWildcards,
                            //    matchSoundsLike,
                            //    matchAllWordForms,
                            //    forward,
                            //    wrap,
                            //    format,
                            //    textToReplace,
                            //    replace);                            
                            //  copy letter format to temp.doc
                            object chkFilename = physicalparentPath + mrdNo + ".doc";
                            if (!File.Exists((string)chkFilename))
                            {
                                File.Copy(fileName, physicalparentPath + mrdNo + ".doc", true);
                            }

                            //  create missing object
                            object missing = Missing.Value;
                            //  create Word application object
                            Word.Application wordApp = new Word.Application();
                            //  create Word document object
                            Word.Document aDoc = null;
                            //  create & define filename object with temp.doc
                            object filename = physicalparentPath + mrdNo + ".doc";
                            //  if temp.doc available
                            if (File.Exists((string)filename))
                            {
                                object readOnly = false;
                                object isVisible = false;
                                //  make visible Word application
                                wordApp.Visible = false;
                                //  open Word document named temp.doc
                                aDoc = wordApp.Documents.Open(ref filename, ref missing,
                    ref readOnly, ref missing, ref missing, ref missing,
                    ref missing, ref missing, ref missing, ref missing,
                    ref missing, ref isVisible, ref missing, ref missing,
                    ref missing, ref missing);
                                aDoc.Activate();
                                ////  Call FindAndReplace()function for each change
                                ////this.FindAndReplace(wordApp, "find me", "EXT1234");
                                this.FindAndReplace(wordApp, "<Name>", name.Trim());
                                this.FindAndReplace(wordApp, "<MrdNo>", mrdNo.Trim());
                                ////  save temp.doc after modified
                                aDoc.Save();
                                // Close the doc and exit the app
                                aDoc.Close(ref missing, ref missing, ref missing);
                                wordApp.Application.Quit(ref missing, ref missing, ref missing);
                                //            retString = "testing";
                                //}
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    retString = ex.Message;
                    Console.Write(ex);
                }
                return retString;
            }
            #endregion
        }
        #endregion
        private void FindAndReplace(Microsoft.Office.Interop.Word.Application doc, object findText, object replaceWithText)
        {
            //options
            object matchCase = true;
            object matchWholeWord = true;
            object matchWildCards = false;
            object matchSoundsLike = false;
            object matchAllWordForms = false;
            object forward = true;
            object format = false;
            object matchKashida = false;
            object matchDiacritics = false;
            object matchAlefHamza = false;
            object matchControl = false;
            object read_only = false;
            object visible = true;
            object replace = 2;
            object wrap = 1;
            doc.Selection.Find.Execute(ref findText, ref matchCase,
                ref matchWholeWord, ref matchWildCards, ref matchSoundsLike,
                ref matchAllWordForms, ref forward, ref wrap, ref format,
                ref replaceWithText, ref replace, ref matchKashida,
                        ref matchDiacritics,
                ref matchAlefHamza, ref matchControl);
        }



        #region loadDisplayTest
        [Route("api/Account/loadDisplayTest")]
        [HttpGet]
        public List<DisplayTest> loadDisplayTest()
        {
            List<DisplayTest> lstdisplay = new List<DisplayTest>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM displaytest";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if ((dr != null))
                            {
                                DisplayTest titleDetails = new DisplayTest();

                                if (dr["DisplayTestID"] != DBNull.Value)
                                {
                                    titleDetails.DisplayTestID = Convert.ToInt32(dr["DisplayTestID"].ToString());
                                }
                                else
                                {
                                    titleDetails.DisplayTestID = 0;
                                }

                                if (dr["TestCode"] != DBNull.Value)
                                {
                                    titleDetails.TestCode = dr["TestCode"].ToString();
                                }
                                else
                                {
                                    titleDetails.TestCode = "";
                                }
                                if (dr["TestName"] != DBNull.Value)
                                {
                                    titleDetails.TestName = dr["TestName"].ToString();
                                }
                                else
                                {
                                    titleDetails.TestName = "";
                                }
                                if (dr["DisplayName"] != DBNull.Value)
                                {
                                    titleDetails.DisplayName = dr["DisplayName"].ToString();
                                }
                                else
                                {
                                    titleDetails.DisplayName = "";
                                }
                                if (dr["Amount"] != DBNull.Value)
                                {
                                    titleDetails.Amount = Convert.ToDouble(dr["Amount"].ToString());
                                }
                                else
                                {
                                    titleDetails.Amount = 0.0;
                                }
                                if (dr["ExpiryDate"] != DBNull.Value)
                                {
                                    titleDetails.ExpiryDate = dr["ExpiryDate"].ToString();
                                }
                                else
                                {
                                    titleDetails.ExpiryDate = "";
                                }
                                lstdisplay.Add(titleDetails);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstdisplay;
            }
        }
        #endregion

        #region getApprovedTest
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getApprovedTest")]
        [HttpGet]
        public List<PatientAllLabStatusInfo> getApprovedTest()
        {
            List<PatientAllLabStatusInfo> lstpatientAllLabStatusInfo = new List<PatientAllLabStatusInfo>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    //string strSQL = "SELECT A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName FROM  laborderstatus as A  inner join  laborder as B on A.MrdNo=B.MrdNo where A.LabStatus=3";

                    //string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName, " +
                    //                " B.CreateDate,(select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval " +
                    //                " FROM  laborderstatus as A " +
                    //                " inner join  laborder as B on A.MrdNo = B.MrdNo " +
                    //                " inner join  resultlabtest rt on rt.MrdNo = B.MrdNo " +
                    //                " where rt.confirmFlag = 1 and A.LabStatus in (2,3)" +
                    //                " and (cast(A.LabOrderDate as date) <= (CURDATE()) and cast(A.LabOrderDate as date) >= (DATE_SUB(CURDATE(), INTERVAL 4 DAY)))";



                    string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate, " +
                                                        " (select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                                                        " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                                        " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                                        " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                                                        " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                                        " ABS(DAY(CURDATE())-DAY(A.LabOrderDate)) as DayCount " +
                                                        " FROM  laborderstatus as A inner join  laborder as B on A.MrdNo = B.MrdNo inner join  resultlabtest rt on rt.MrdNo = B.MrdNo" +
                                                        " where rt.confirmFlag = 1 and A.LabStatus in (2,3) and (cast(A.LabOrderDate as date) <= (CURDATE()) " +
                                                        " and cast(A.LabOrderDate as date) >= (DATE_SUB(CURDATE(), INTERVAL 4 DAY))) " +
                                                        " group by A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                                        " A.LaborderStatusId,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                                        " pendingApproval,DayCount" +
                                                        " order by A.LaborderStatusId,A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate," +
                                                        " A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                                        " pendingApproval,DayCount ";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();
                            ////laborderstatus table
                            //patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            //patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            //patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            //patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            //patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            //patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            //patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            //patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            ////laborder table
                            ////patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            //patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            //patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            //patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            //patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            //patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            //patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();

                            //lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);

                            PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();
                            //laborderstatus table
                            patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            //laborder table
                            //patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();
                            patientAllLabStatusInfo.CreateDate = dr["CreateDate"].ToString();
                            patientAllLabStatusInfo.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                patientAllLabStatusInfo.FinalStatus = "";
                            }
                            else
                            {
                                patientAllLabStatusInfo.FinalStatus = dr["FinalStatus"].ToString();
                            }
                            lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstpatientAllLabStatusInfo;
        }
        #endregion

        #region getApprovedTestByDate
        /// <summary>
        /// Table - LaborderStatus
        /// </summary>
        ///  get All Completed status details from LaborderStatus table.
        /// <returns></returns>
        [Route("api/Account/getApprovedTestByDate")]
        [HttpGet]
        public List<PatientAllLabStatusInfo> getApprovedTestByDate(string from, string to)
        {
            List<PatientAllLabStatusInfo> lstpatientAllLabStatusInfo = new List<PatientAllLabStatusInfo>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                try
                {
                    //string strSQL = "SELECT A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName FROM  laborderstatus as A  inner join  laborder as B on A.MrdNo=B.MrdNo where A.LabStatus=3";

                    //string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName, " +
                    //                " (select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                    //                " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval " +
                    //                " FROM  laborderstatus as A " +
                    //                " inner join  laborder as B on A.MrdNo = B.MrdNo " +
                    //                " inner join  resultlabtest rt on rt.MrdNo = B.MrdNo " +
                    //                " where rt.confirmFlag = 1 and A.LabStatus in (2,3) and A.LabOrderDate Between '" + from + "' and '" + to + "'";
                    string strSQL = "SELECT distinct A.LaborderStatusId, A.RegID,A.MrdNo,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate, " +
                                    " (select count(distinct TestCode) from viewlistdetails vd where vd.MrdNo = B.MrdNo) as totalSamples, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.saveFlag = 1) as totalEntered, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.confirmFlag = 1) as totalConfirmed, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 1) as totalApproved, " +
                                    " (select count(distinct TestCode) from resultlabtest rt1 where rt1.MrdNo = B.MrdNo and rt1.Status = 0 and rt1.confirmFlag = 1) as pendingApproval, " +
                                    " ABS(DAY(CURDATE())-DAY(A.LabOrderDate)) as DayCount " +
                                    " FROM  laborderstatus as A " +
                                    " inner join  laborder as B on A.MrdNo = B.MrdNo " +
                                    " inner join  resultlabtest rt on rt.MrdNo = B.MrdNo " +
                                    " where rt.confirmFlag = 1 and A.LabStatus in (2,3) and A.LabOrderDate > '" + from + "' and A.LabOrderDate <='" + to + "' " + " group by A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate,A.ApproveStatus,A.DenyStatus, " +
                                   " A.LaborderStatusId,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                   " pendingApproval,DayCount" +
                                   " order by A.LaborderStatusId,A.MrdNo,A.RegID,A.LabStatus,A.FinalStatus,A.LabOrderDate," +
                                   " A.ApproveStatus,A.DenyStatus,B.PatientName,B.CreateDate,totalSamples,totalEntered,totalConfirmed,totalApproved," +
                                   " pendingApproval,DayCount ";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];

                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            //PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();
                            ////laborderstatus table
                            //patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            //patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            //patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            //patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            //patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            //patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            //patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            //patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            ////laborder table
                            ////patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            //patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            //patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            //patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            //patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            //patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            //patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();

                            //lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                            PatientAllLabStatusInfo patientAllLabStatusInfo = new PatientAllLabStatusInfo();
                            //laborderstatus table
                            patientAllLabStatusInfo.LaborderStatusId = (int)dr["LaborderStatusId"];
                            patientAllLabStatusInfo.RegID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.PatientID = dr["RegID"].ToString();
                            patientAllLabStatusInfo.MrdNo = dr["MrdNo"].ToString();
                            patientAllLabStatusInfo.LabStatus = dr["LabStatus"].ToString();
                            patientAllLabStatusInfo.LabOrderDate = dr["LabOrderDate"].ToString();
                            patientAllLabStatusInfo.ApproveStatus = dr["ApproveStatus"].ToString();
                            patientAllLabStatusInfo.DenyStatus = dr["DenyStatus"].ToString();

                            //laborder table
                            //patientAllLabStatusInfo.LabId = (int)dr["LabId"];
                            patientAllLabStatusInfo.PatientName = dr["PatientName"].ToString();

                            patientAllLabStatusInfo.TotalSamples = dr["totalSamples"].ToString();
                            patientAllLabStatusInfo.TotalEntered = dr["totalEntered"].ToString();
                            patientAllLabStatusInfo.TotalConfirmed = dr["totalConfirmed"].ToString();
                            patientAllLabStatusInfo.TotalApproved = dr["totalApproved"].ToString();
                            patientAllLabStatusInfo.PendApproval = dr["pendingApproval"].ToString();
                            patientAllLabStatusInfo.CreateDate = dr["CreateDate"].ToString();
                            patientAllLabStatusInfo.DayCount = Convert.ToInt32(dr["DayCount"].ToString());
                            if (dr["FinalStatus"] == DBNull.Value)
                            {
                                patientAllLabStatusInfo.FinalStatus = "";
                            }
                            else
                            {
                                patientAllLabStatusInfo.FinalStatus = dr["FinalStatus"].ToString();
                            }
                            lstpatientAllLabStatusInfo.Add(patientAllLabStatusInfo);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
            return lstpatientAllLabStatusInfo;
        }
        #endregion
        // added for paragraph load in approver
        #region getDetailsForApproverEditView
        /// <summary>       
        /// <returns></returns>
        [Route("api/Account/getDetailsForApproverEditView")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getDetailsForApproverEditView(string mrdNo, string testCode)
        {
            {
                List<BoneMarrowAspirationNew> bonemarrowaspiration = new List<BoneMarrowAspirationNew>();
                DataTable dt = new DataTable();
                using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
                {
                    try
                    {
                        string strSQL = "SELECT * FROM  bonemarrowaspiration where MrdNo='" + mrdNo + "' AND TestCode='" + testCode + "' order by ElementId";
                        conn.Open();
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                BoneMarrowAspirationNew bonemarrowaspirations = new BoneMarrowAspirationNew();
                                bonemarrowaspirations.MrdNo = dr["MrdNo"].ToString();
                                bonemarrowaspirations.TestCode = dr["TestCode"].ToString();
                                bonemarrowaspirations.ElementId = (int)dr["ElementId"];
                                bonemarrowaspirations.TemplateId = (int)dr["TemplateId"];
                                bonemarrowaspirations.ElementName = dr["ElementName"].ToString();
                                bonemarrowaspirations.TemplateName = dr["TemplateName"].ToString();
                                bonemarrowaspirations.TemplateDescription = dr["TemplateDescription"].ToString();
                                bonemarrowaspirations.PriorityStatus = dr["PriorityStatus"].ToString();

                                bonemarrowaspiration.Add(bonemarrowaspirations);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.Write(ex);
                    }
                    return bonemarrowaspiration;
                }
            }
        }
        #endregion

        #region getElementDetailsForApprover
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getElementDetailsForApprover")]
        [HttpGet]
        public List<Elements> getElementDetailsForApprover(string testCode)
        {



            List<Elements> elementDetail = new List<Elements>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM elements where TestCode = '" + testCode + "' order by PriorityStatus asc";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Elements elements = new Elements();
                            elements.ElementName = dr["ElementName"].ToString();
                            //elements.TestName = dr["TestCode"].ToString();
                            elements.TestCode = dr["TestCode"].ToString();
                            elements.TestName = dr["TestName"].ToString();
                            elements.ElementId = (int)dr["ElementId"];
                            if (dr["PriorityStatus"] != DBNull.Value)
                            {
                                elements.PriorityStatus = (int)dr["PriorityStatus"];
                            }
                            else
                            {
                                elements.PriorityStatus = 0;
                            }
                            elementDetail.Add(elements);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return elementDetail;
            }
        }
        #endregion

        #region insertBiospyNoForApprover
        /// <summary>
        /// table - biospydetails
        /// </summary>
        /// <param name="templates"></param>
        [Route("api/Account/insertBiospyNoForApprover")]
        [HttpPost]
        public void insertBiospyNoForApprover(string bioNo, string patientName, string mrdNo)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "INSERT INTO  biospydetails(ByspyNo,PatientName,PatientRegNo,MrdNo) VALUES(@val1,@val2,@val3,@val4)";
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.Parameters.AddWithValue("@val1", bioNo);
                    cmd.Parameters.AddWithValue("@val2", patientName);
                    cmd.Parameters.AddWithValue("@val3", 0);
                    cmd.Parameters.AddWithValue("@val4", mrdNo);

                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
            }
        }
        #endregion
        #region getBiospyNoForApprover
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getBiospyNoForApprover")]
        [HttpGet]
        public string getBiospyNoForApprover(string mrdNo, string testCode)
        {
            List<Elements> elementDetail = new List<Elements>();
            var biospyNumber = "";

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {

                    string strSQL = "SELECT * FROM biospydetails where MrdNo = '" + mrdNo + "' and TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0]["ByspyNo"] != DBNull.Value)
                        {
                            biospyNumber = dt.Rows[0]["ByspyNo"].ToString();
                        }
                        else
                        {
                            biospyNumber = "0";
                        }
                    }
                    else
                    {
                        biospyNumber = "0";
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return biospyNumber;
            }
        }
        #endregion
        #region getTemplateDetailsForApprover
        /// <summary>
        /// Table - elements
        /// </summary>
        /// get Elements details from elements table by Element Name
        /// <returns></returns>
        [Route("api/Account/getTemplateDetailsForApprover")]
        [HttpGet]
        public List<Templates> getTemplateDetailsForApprover(string TestCode, int ElementId)
        {
            List<Templates> templatesDetail = new List<Templates>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM templates where TestCode = '" + TestCode + "' && ElementId ='" + ElementId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Templates templateas = new Templates();
                            templateas.ElementName = dr["ElementName"].ToString();
                            //    elements.TestName = dr["TestCode"].ToString();
                            templateas.TestCode = dr["TestCode"].ToString();
                            templateas.TestName = dr["TestName"].ToString();
                            templateas.ElementId = (int)dr["ElementId"];
                            templateas.TemplateName = dr["TemplateName"].ToString();
                            templateas.TemplateId = (int)dr["TemplateId"];
                            templateas.TemplateValue = dr["TemplateValue"].ToString();

                            templatesDetail.Add(templateas);
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return templatesDetail;
            }
        }
        #endregion

        #region getCultCategory
        /// <summary>      
        /// <returns></returns>
        [Route("api/Account/getCultCategory")]
        [HttpGet]
        public string getCultCategory(string testCode)
        {
            List<Templates> templatesDetail = new List<Templates>();

            DataTable dt = new DataTable();
            string Category = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM childtestlist where TestCode = '" + testCode + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            if ((dr["CultureCategory"]) != DBNull.Value)
                            {
                                Category = dr["CultureCategory"].ToString();
                            }
                            else
                            {
                                Category = "NULL";
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return Category;
            }
        }
        #endregion

        #region loadisoOrganisms
        /// <summary>      
        /// <returns></returns>
        [Route("api/Account/loadisoOrganisms")]
        [HttpGet]
        public List<IsolatedOrganisms> loadisoOrganisms(string Category)
        {
            List<IsolatedOrganisms> orgDetails = new List<IsolatedOrganisms>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  isolatedorganismmaster where Category = '" + Category + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            IsolatedOrganisms organs = new IsolatedOrganisms();
                            //organs.OrganID = Convert.ToInt32(dr["OrganID"].ToString());
                            organs.OrganismName = (dr["OrganismName"].ToString());
                            //organs.Category = (dr["Category"].ToString());
                            orgDetails.Add(organs);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return orgDetails;
            }
        }
        #endregion

        #region loadisoOrganismsNew
        /// <summary>      
        /// <returns></returns>
        [Route("api/Account/loadisoOrganismsNew")]
        [HttpGet]
        public List<IsolatedOrganisms> loadisoOrganismsNew(string Category, int mode)
        {
            List<IsolatedOrganisms> orgDetails = new List<IsolatedOrganisms>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    conn.Open();

                    if (mode == 1)
                    {
                        strSQL = "SELECT * FROM  isolatedorganismmaster ";
                    }
                    else
                    {
                        strSQL = "SELECT * FROM  isolatedorganismmaster where Category = '" + Category + "' ";
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            IsolatedOrganisms organs = new IsolatedOrganisms();
                            organs.OrganID = Convert.ToInt32(dr["OrganID"].ToString());
                            organs.OrganismName = (dr["OrganismName"].ToString());
                            organs.Category = (dr["Category"].ToString());
                            orgDetails.Add(organs);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return orgDetails;
            }
        }
        #endregion

        #region loadmicroAgents
        /// <summary>      
        /// <returns></returns>
        [Route("api/Account/loadmicroAgents")]
        [HttpGet]
        public List<AntiMicrobialsusceptibilityNew> loadmicroAgents(string Category)
        {
            List<AntiMicrobialsusceptibilityNew> orgDetails = new List<AntiMicrobialsusceptibilityNew>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  antimicrobialagentmaster where CultureCategory = '" + Category + "' ";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            AntiMicrobialsusceptibilityNew organs = new AntiMicrobialsusceptibilityNew();
                            organs.AntiMicrobialId = Convert.ToInt32(dr["AgentId"].ToString());
                            organs.Agent = (dr["AtimicrobialAgent"].ToString());
                            organs.zoneInhibition = "";
                            organs.Interpretation = "";
                            organs.Comments2 = "";
                            organs.Category = (dr["CultureCategory"].ToString());
                            organs.EditFlag = 0;
                            orgDetails.Add(organs);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return orgDetails;
            }
        }
        #endregion

        #region editisolOrgans
        /// <summary>        
        /// <param name="editisolOrgans"></param>
        [Route("api/Account/editisolOrgans")]
        [HttpPost]
        public void editisolOrgans(string editName, int editId, int editMode)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (editMode == 1)
                    {
                        strSQL = "Update  isolatedorganismmaster set OrganismName='" + editName + "' where OrganID=" + editId + "";
                    }
                    else
                    {
                        strSQL = "delete from  isolatedorganismmaster where OrganID=" + editId + "";
                    }

                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getAllIsolatedOrgans
        /// <summary>      
        /// <returns></returns>
        [Route("api/Account/getAllIsolatedOrgans")]
        [HttpGet]
        public List<IsolatedOrganisms> getAllIsolatedOrgans(string category, int mode)
        {
            List<IsolatedOrganisms> templatesDetail = new List<IsolatedOrganisms>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    if (mode == 1)
                    {
                        string strSQL = "SELECT * FROM  isolatedorganismmaster where Category = '" + category + "' ";
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                IsolatedOrganisms organs = new IsolatedOrganisms();
                                if ((dr["OrganismName"]) != DBNull.Value)
                                {
                                    organs.OrganismName = dr["OrganismName"].ToString();
                                }
                                templatesDetail.Add(organs);
                            }
                        }
                    }
                    else
                    {
                        string strSQL = "SELECT * FROM  antimicrobialagentmaster where CultureCategory = '" + category + "' ";
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                IsolatedOrganisms organs = new IsolatedOrganisms();
                                if ((dr["AtimicrobialAgent"]) != DBNull.Value)
                                {
                                    organs.AtimicrobialAgent = dr["AtimicrobialAgent"].ToString();
                                }
                                organs.OrganID = Convert.ToInt32(dr["AgentId"]);
                                organs.Category = dr["CultureCategory"].ToString();

                                templatesDetail.Add(organs);
                            }
                        }

                    }

                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return templatesDetail;
            }
        }
        #endregion

        #region editAntimicrobialAgent
        /// <summary>        
        /// <param name="editAntimicrobialAgent"></param>
        [Route("api/Account/editAntimicrobialAgent")]
        [HttpPost]
        public void editAntimicrobialAgent(string editName, int editId, int editMode)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    if (editMode == 1)
                    {
                        strSQL = "Update  antimicrobialagentmaster set AtimicrobialAgent='" + editName + "' where AgentId=" + editId + "";
                    }
                    else
                    {
                        strSQL = "delete from  antimicrobialagentmaster where AgentId=" + editId + "";
                    }

                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getCultureTestDetails
        /// <summary>      
        /// <returns></returns>
        [Route("api/Account/getCultureTestDetails")]
        [HttpGet]
        public List<AntiMicrobialsusceptibilityNew> getCultureTestDetails(string mrdNo, string testCode, string patientID, int culFlag)
        {
            List<AntiMicrobialsusceptibilityNew> templatesDetail = new List<AntiMicrobialsusceptibilityNew>();

            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "SELECT * FROM culturetestresult where TestCode = '" + testCode + "' and MrdNo!='"+ mrdNo + "' and PatientID="+ patientID + " ";
                    string strSQL = "";
                    string CheckSQL = "";
                    int posnegaReport = 0;

                    CheckSQL = "select * from  culturetestresult cr where cr.MrdNo='" + mrdNo + "' and cr.TestCode = '" + testCode + "' " +
                                   " and cr.PatientID='" + patientID + "' ";

                    if (culFlag == 2)
                    {
                        strSQL = " select cr.TestCode,cr.TestName,cr.MrdNo,cr.Specimen,cr.GrainStain,cr.SpecialStain,cr.OrganizismIsolated,cr.ColonyCount, " +
                                    " an.Agent,an.zoneInhibition,an.Interpretation,an.MicrobialComment,cr.Result,cr.Comments,cr.NegComment,cr.CulComment,cr.QualityScore,cr.FastBacilli " +
                                    " from  culturetestresult cr inner join  antimicrobialsusceptibility1 an " +
                                    " on cr. CultureTestResultId = an.CultureId and an.PatientID = cr.PatientID " +
                                    " where an.PatientID='" + patientID + "' and cr.MrdNo!='" + mrdNo + "' and cr.TestCode = '" + testCode + "' order by cr.MrdNo , an.CultureId";
                    }
                    else
                    {
                        strSQL = " select cr.TestCode,cr.TestName,cr.MrdNo,cr.Specimen,cr.GrainStain,cr.SpecialStain,cr.OrganizismIsolated,cr.ColonyCount, " +
                                    " an.Agent,an.zoneInhibition,an.Interpretation,an.MicrobialComment,cr.Result,cr.Comments,cr.NegComment,cr.CulComment,cr.QualityScore,cr.FastBacilli " +
                                    " from  culturetestresult cr inner join  antimicrobialsusceptibility1 an " +
                                    " on cr. CultureTestResultId = an.CultureId and an.PatientID = cr.PatientID " +
                                    " where cr.PatientID='" + patientID + "' and cr.MrdNo='" + mrdNo + "' and cr.TestCode = '" + testCode + "' order by cr.MrdNo , an.CultureId";
                    }
                    conn.Open();
                    MySqlDataAdapter checkResult = new MySqlDataAdapter(CheckSQL, conn);
                    MySqlCommandBuilder checkCmd = new MySqlCommandBuilder(checkResult);
                    DataSet checkDs = new DataSet();
                    DataTable checkDt = new DataTable();
                    checkResult.Fill(checkDs);
                    checkDt = checkDs.Tables[0];

                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (checkDt.Rows.Count > 0)
                    {
                        foreach (DataRow chkDr in checkDt.Rows)
                        {
                            if (chkDr != null)
                            {
                                //if (((chkDr["Comments"].ToString()) != "0") && ((chkDr["Result"]) != DBNull.Value))
                                //{
                                //    posnegaReport = 1;
                                //}
                                //else if (((chkDr["Comments"].ToString()) == "0") && ((chkDr["Result"]) == DBNull.Value))
                                //{
                                //    posnegaReport = 1;
                                //}
                                //else if (((chkDr["Comments"].ToString()) == "0") || ((chkDr["Comments"].ToString()) != "0"))
                                //{
                                //    posnegaReport = 1;
                                //}
                                if ((((chkDr["Comments"].ToString()) == "0") || ((chkDr["Comments"].ToString()) != "0")) && ((chkDr["Result"] == DBNull.Value) || (chkDr["Result"].ToString() == "")))
                                {
                                    posnegaReport = 1;
                                }
                                else if ((((chkDr["Comments"].ToString()) == "0") || ((chkDr["Comments"].ToString()) != "0")) && ((chkDr["Result"].ToString() == "Negative") || (chkDr["Result"].ToString() == "")))
                                {
                                    posnegaReport = 1;
                                }
                                //else if (((chkDr["Comments"].ToString()) == "0") && ((chkDr["Result"]) == DBNull.Value))
                                //{
                                //    posnegaReport = 1;
                                //}
                            }
                        }
                        if (dt.Rows.Count == 0)
                        {
                            posnegaReport = 1;
                        }
                    }
                    if (posnegaReport == 1)
                    {
                        foreach (DataRow chkDr in checkDt.Rows)
                        {
                            if (chkDr != null)
                            {
                                AntiMicrobialsusceptibilityNew posNegResult = new AntiMicrobialsusceptibilityNew();
                                if ((chkDr["NegComment"]) != DBNull.Value)
                                {
                                    posNegResult.NegComment = chkDr["NegComment"].ToString();
                                }
                                else
                                {
                                    posNegResult.NegComment = "";
                                }
                                if ((chkDr["Comments"]) != DBNull.Value)
                                {
                                    posNegResult.PrelimContent = chkDr["Comments"].ToString();
                                }
                                else
                                {
                                    posNegResult.PrelimContent = "";
                                }
                                if ((chkDr["Result"]) != DBNull.Value)
                                {
                                    posNegResult.Result = chkDr["Result"].ToString();
                                }
                                else
                                {
                                    posNegResult.Result = "";
                                }
                                if ((chkDr["MrdNo"]) != DBNull.Value)
                                {
                                    posNegResult.MrdNo = chkDr["MrdNo"].ToString();
                                }
                                else
                                {
                                    posNegResult.MrdNo = "";
                                }
                                if ((chkDr["Specimen"]) != DBNull.Value)
                                {
                                    posNegResult.Specimen = chkDr["Specimen"].ToString();
                                }
                                else
                                {
                                    posNegResult.Specimen = "";
                                }
                                if ((chkDr["GrainStain"]) != DBNull.Value)
                                {
                                    posNegResult.GrainStain = chkDr["GrainStain"].ToString();
                                }
                                else
                                {
                                    posNegResult.GrainStain = "";
                                }
                                if ((chkDr["SpecialStain"]) != DBNull.Value)
                                {
                                    posNegResult.SpecialStain = chkDr["SpecialStain"].ToString();
                                }
                                else
                                {
                                    posNegResult.SpecialStain = "";
                                }
                                if ((chkDr["ColonyCount"]) != DBNull.Value)
                                {
                                    posNegResult.ColonyCount = chkDr["ColonyCount"].ToString();
                                }
                                else
                                {
                                    posNegResult.ColonyCount = "";
                                }
                                if ((chkDr["OrganizismIsolated"]) != DBNull.Value)
                                {
                                    posNegResult.OrganizismIsolated = chkDr["OrganizismIsolated"].ToString();
                                }
                                else
                                {
                                    posNegResult.OrganizismIsolated = "";
                                }
                                if ((chkDr["CulComment"]) != DBNull.Value)
                                {
                                    posNegResult.CulComments = chkDr["CulComment"].ToString();
                                }
                                else
                                {
                                    posNegResult.CulComments = "";
                                }
                                if ((chkDr["TestCode"]) != DBNull.Value)
                                {
                                    posNegResult.TestCode = chkDr["TestCode"].ToString();
                                }
                                else
                                {
                                    posNegResult.TestCode = "";
                                }
                                if ((chkDr["TestName"]) != DBNull.Value)
                                {
                                    posNegResult.TestName = chkDr["TestName"].ToString();
                                }
                                else
                                {
                                    posNegResult.TestName = "";
                                }
                                if ((chkDr["QualityScore"]) != DBNull.Value)
                                {
                                    posNegResult.QualityScore = chkDr["QualityScore"].ToString();
                                }
                                else
                                {
                                    posNegResult.QualityScore = "";
                                }
                                if ((chkDr["FastBacilli"]) != DBNull.Value)
                                {
                                    posNegResult.FastBacilli = chkDr["FastBacilli"].ToString();
                                }
                                else
                                {
                                    posNegResult.FastBacilli = "";
                                }
                                templatesDetail.Add(posNegResult);
                            }
                        }
                    }
                    else
                    {
                        if (dt.Rows.Count > 0)
                        {
                            #region AgentsDetails
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    AntiMicrobialsusceptibilityNew culResult = new AntiMicrobialsusceptibilityNew();

                                    if ((dr["Comments"]) != DBNull.Value)
                                    {
                                        culResult.PrelimContent = dr["Comments"].ToString();
                                    }
                                    else
                                    {
                                        culResult.PrelimContent = "";
                                    }
                                    if ((dr["CulComment"]) != DBNull.Value)
                                    {
                                        culResult.CulComments = dr["CulComment"].ToString();
                                    }
                                    else
                                    {
                                        culResult.CulComments = "";
                                    }
                                    if ((dr["NegComment"]) != DBNull.Value)
                                    {
                                        culResult.NegComment = dr["NegComment"].ToString();
                                    }
                                    else
                                    {
                                        culResult.NegComment = "";
                                    }
                                    if ((dr["Result"]) != DBNull.Value)
                                    {
                                        culResult.Result = dr["Result"].ToString();
                                    }
                                    else
                                    {
                                        culResult.Result = "";
                                    }
                                    if ((dr["MrdNo"]) != DBNull.Value)
                                    {
                                        culResult.MrdNo = dr["MrdNo"].ToString();
                                    }
                                    else
                                    {
                                        culResult.MrdNo = "";
                                    }
                                    if ((dr["Agent"]) != DBNull.Value)
                                    {
                                        culResult.Agent = dr["Agent"].ToString();
                                    }
                                    else
                                    {
                                        culResult.Agent = "";
                                    }
                                    if ((dr["zoneInhibition"]) != DBNull.Value)
                                    {
                                        culResult.zoneInhibition = dr["zoneInhibition"].ToString();
                                    }
                                    else
                                    {
                                        culResult.zoneInhibition = "";
                                    }
                                    if ((dr["Interpretation"]) != DBNull.Value)
                                    {
                                        culResult.Interpretation = dr["Interpretation"].ToString();
                                    }
                                    else
                                    {
                                        culResult.Interpretation = "";
                                    }
                                    if ((dr["MicrobialComment"]) != DBNull.Value)
                                    {
                                        culResult.Comments = dr["MicrobialComment"].ToString();
                                    }
                                    else
                                    {
                                        culResult.Comments = "";
                                    }

                                    if ((dr["Specimen"]) != DBNull.Value)
                                    {
                                        culResult.Specimen = dr["Specimen"].ToString();
                                    }
                                    else
                                    {
                                        culResult.Specimen = "";
                                    }
                                    if ((dr["GrainStain"]) != DBNull.Value)
                                    {
                                        culResult.GrainStain = dr["GrainStain"].ToString();
                                    }
                                    else
                                    {
                                        culResult.GrainStain = "";
                                    }
                                    if ((dr["SpecialStain"]) != DBNull.Value)
                                    {
                                        culResult.SpecialStain = dr["SpecialStain"].ToString();
                                    }
                                    else
                                    {
                                        culResult.SpecialStain = "";
                                    }
                                    if ((dr["OrganizismIsolated"]) != DBNull.Value)
                                    {
                                        culResult.OrganizismIsolated = dr["OrganizismIsolated"].ToString();
                                    }
                                    else
                                    {
                                        culResult.OrganizismIsolated = "";
                                    }
                                    if ((dr["ColonyCount"]) != DBNull.Value)
                                    {
                                        culResult.ColonyCount = dr["ColonyCount"].ToString();
                                    }
                                    else
                                    {
                                        culResult.ColonyCount = "";
                                    }

                                    if ((dr["TestCode"]) != DBNull.Value)
                                    {
                                        culResult.TestCode = dr["TestCode"].ToString();
                                    }
                                    else
                                    {
                                        culResult.TestCode = "";
                                    }
                                    if ((dr["TestName"]) != DBNull.Value)
                                    {
                                        culResult.TestName = dr["TestName"].ToString();
                                    }
                                    else
                                    {
                                        culResult.TestName = "";
                                    }
                                    if ((dr["QualityScore"]) != DBNull.Value)
                                    {
                                        culResult.QualityScore = dr["QualityScore"].ToString();
                                    }
                                    else
                                    {
                                        culResult.QualityScore = "";
                                    }
                                    if ((dr["FastBacilli"]) != DBNull.Value)
                                    {
                                        culResult.FastBacilli = dr["FastBacilli"].ToString();
                                    }
                                    else
                                    {
                                        culResult.FastBacilli = "";
                                    }
                                    templatesDetail.Add(culResult);
                                }
                            }
                            #endregion AgentsDetails
                        }
                        //else
                        //{
                        //    AntiMicrobialsusceptibilityNew culResult = new AntiMicrobialsusceptibilityNew();                           
                        //culResult.PrelimContent = "";                          
                        //culResult.NegComment = "";                            
                        //culResult.Result = "";                            
                        //culResult.Agent = "";                          
                        //culResult.zoneInhibition = "";                           
                        //culResult.Interpretation = "";                           
                        //culResult.Comments = "";                           
                        //culResult.Specimen = "";                            
                        //culResult.GrainStain = "";                           
                        //culResult.SpecialStain = "";                           
                        //culResult.OrganizismIsolated = "";                           
                        //culResult.ColonyCount = "";                           
                        //culResult.TestCode = "";                           
                        //culResult.TestName = "";                           
                        //  }                        
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return templatesDetail;
            }
        }
        #endregion

        //#region getMicrobAgentDetails
        ///// <summary>      
        ///// <returns></returns>
        //[Route("api/Account/getMicrobAgentDetails")]
        //[HttpGet]
        //public List<AntiMicrobialsusceptibilityNew> getMicrobAgentDetails(string mrdNo, string testCode, string isoOrgan,int patientID)
        //{
        //    List<AntiMicrobialsusceptibilityNew> templatesDetail = new List<AntiMicrobialsusceptibilityNew>();
        //    DataTable dt = new DataTable();
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {
        //            string strSQL = " select an.Agent,an.zoneInhibition,an.Interpretation,an.MicrobialComment,cr.Specimen,cr.GrainStain, "+
        //                " cr.SpecialStain,cr.ColonyCount,cr.OrganizismIsolated,an.CultureId from  culturetestresult cr " +
        //            " inner join  antimicrobialsusceptibility1 an on cr. CultureTestResultId = an.CultureId and " +
        //            " cr.OrganizismIsolated = '" + isoOrgan + "' where cr. MrdNo != '" + mrdNo + "' and cr.TestCode = '" + testCode + "' and cr.PatientID="+ patientID + " ";
        //            conn.Open();
        //            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
        //            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
        //            DataSet ds = new DataSet();
        //            mydata.Fill(ds);
        //            dt = ds.Tables[0];
        //            foreach (DataRow dr in dt.Rows)
        //            {
        //                if (dr != null)
        //                {
        //                    AntiMicrobialsusceptibilityNew culResult = new AntiMicrobialsusceptibilityNew();

        //                    if ((dr["Agent"]) != DBNull.Value)
        //                    {
        //                        culResult.Agent = dr["Agent"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.Agent = "";
        //                    }
        //                    if ((dr["zoneInhibition"]) != DBNull.Value)
        //                    {
        //                        culResult.zoneInhibition = dr["zoneInhibition"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.zoneInhibition = "";
        //                    }
        //                    if ((dr["Interpretation"]) != DBNull.Value)
        //                    {
        //                        culResult.Interpretation = dr["Interpretation"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.Interpretation = "";
        //                    }
        //                    if ((dr["MicrobialComment"]) != DBNull.Value)
        //                    {
        //                        culResult.Comments = dr["MicrobialComment"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.Comments = "";
        //                    }

        //                    if ((dr["Specimen"]) != DBNull.Value)
        //                    {
        //                        culResult.Specimen = dr["Specimen"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.Specimen = "";
        //                    }
        //                    if ((dr["GrainStain"]) != DBNull.Value)
        //                    {
        //                        culResult.GrainStain = dr["GrainStain"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.GrainStain = "";
        //                    }
        //                    if ((dr["SpecialStain"]) != DBNull.Value)
        //                    {
        //                        culResult.SpecialStain = dr["SpecialStain"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.SpecialStain = "";
        //                    }
        //                    if ((dr["OrganizismIsolated"]) != DBNull.Value)
        //                    {
        //                        culResult.OrganizismIsolated = dr["OrganizismIsolated"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.OrganizismIsolated = "";
        //                    }
        //                    if ((dr["ColonyCount"]) != DBNull.Value)
        //                    {
        //                        culResult.ColonyCount = dr["ColonyCount"].ToString();
        //                    }
        //                    else
        //                    {
        //                        culResult.ColonyCount = "";
        //                    }
        //                    templatesDetail.Add(culResult);
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //        return templatesDetail;
        //    }
        //}
        //#endregion
        #region deleteAntiagents

        [Route("api/Account/deleteAntiagents")]
        [HttpPost]
        public void deleteAntiagents(string testCode, string mrdNo, string patientID)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  antimicrobialsusceptibility1 where MrdNo='" + mrdNo + "' and PatientID ='" + patientID + "' and TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string strSQL1 = "delete from  antimicrobialsusceptibility1 where MrdNo='" + mrdNo + "' and PatientID ='" + patientID + "' and TestCode='" + testCode + "'";
                        // conn.Open();
                        MySqlCommand deletecmd = new MySqlCommand(strSQL1, conn);
                        deletecmd.CommandType = CommandType.Text;
                        deletecmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region deleteAntiagentsEdit

        [Route("api/Account/deleteAntiagentsEdit")]
        [HttpPost]
        public void deleteAntiagentsEdit(string testCode, string mrdNo, string patientID, int deleteID)
        {
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM  antimicrobialsusceptibility1 where MrdNo='" + mrdNo + "' and PatientID =" + patientID + " and TestCode='" + testCode + "' and AntiMicrobialId=" + deleteID + "";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        string strSQL1 = "delete from  antimicrobialsusceptibility1 where MrdNo='" + mrdNo + "' and PatientID =" + patientID + " and TestCode='" + testCode + "' and AntiMicrobialId=" + deleteID + "";
                        MySqlCommand deletecmd = new MySqlCommand(strSQL1, conn);
                        deletecmd.CommandType = CommandType.Text;
                        deletecmd.ExecuteNonQuery();
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region updateDepartment

        [Route("api/Account/updateDepartment")]
        [HttpPost]
        public void updateDepartment(string mrdNo, string patientID)
        {
            DataTable dt = new DataTable();
            string strSQL1 = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = " select ch.DepartmentName,ch.TestCode,dp.DepartmentID from childtestlist ch " +
                                    " inner join department dp on dp.DepartmentName=ch.DepartmentName" +
                                    " where TestCode in " +
                                    " (select distinct TestCode FROM  resultlabtest where MrdNo='" + mrdNo + "' and PatientID ='" + patientID + "' )";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if ((dr["DepartmentName"].ToString() != "") && (dr["DepartmentName"] != DBNull.Value))
                            {

                                strSQL1 = "update  resultlabtest set DepartmentName='" + dr["DepartmentName"].ToString() + "', DepartmentID=" + dr["DepartmentID"].ToString() + " " +
                                                 " where MrdNo='" + mrdNo + "' and PatientID ='" + patientID + "' and TestCode='" + dr["TestCode"].ToString() + "' ";
                                MySqlCommand updatecmd = new MySqlCommand(strSQL1, conn);
                                updatecmd.CommandType = CommandType.Text;
                                updatecmd.ExecuteNonQuery();
                            }
                        }
                    }
                    string sqlPriSta = "SELECT ElementName, PriorityStatus,TestCode FROM  testmultiplecomponents where TestCode " +
                                        " in (select distinct TestCode from  resultlabtest where MrdNo='" + mrdNo + "' and PatientID ='" + patientID + "')";
                    MySqlDataAdapter priStData = new MySqlDataAdapter(sqlPriSta, conn);
                    MySqlCommandBuilder priStCmd = new MySqlCommandBuilder(priStData);
                    DataSet priStDs = new DataSet();
                    DataTable priStDt = new DataTable();
                    priStData.Fill(priStDs);
                    priStDt = priStDs.Tables[0];
                    if (priStDt.Rows.Count > 0)
                    {
                        foreach (DataRow Stdr in priStDt.Rows)
                        {
                            if (Stdr != null)
                            {
                                strSQL1 = "update  resultlabtest set PriorityStatus=" + Stdr["PriorityStatus"] + " " +
                                   " where MrdNo='" + mrdNo + "' and PatientID ='" + patientID + "' and TestCode='" + Stdr["TestCode"].ToString() + "' and TestName='" + Stdr["ElementName"].ToString() + "' ";
                                MySqlCommand updatecmd = new MySqlCommand(strSQL1, conn);
                                updatecmd.CommandType = CommandType.Text;
                                updatecmd.ExecuteNonQuery();
                            }
                        }
                    }
                    string sqlPriority = "SELECT rt.ResultLabId,rt.TestCode,vd.TestName,vd.TestPriority,vd.ProfilePriority,vd.SubProfilePriority " +
                                            " FROM  resultlabtest rt " +
                                            " inner join viewlistdetails vd  on rt.RegId = vd.ID where rt.MrdNo='" + mrdNo + "' order by ProfilePriority,SubProfilePriority,TestPriority ";
                    MySqlDataAdapter priData = new MySqlDataAdapter(sqlPriority, conn);
                    MySqlCommandBuilder priCmd = new MySqlCommandBuilder(priData);
                    DataSet priDs = new DataSet();
                    DataTable priDt = new DataTable();
                    priData.Fill(priDs);
                    priDt = priDs.Tables[0];
                    if (priDt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in priDt.Rows)
                        {
                            if ((dr != null))
                            {
                                strSQL1 = "update  resultlabtest set TestPriority=" + dr["TestPriority"].ToString() + ", MainProfilePriority=" + dr["ProfilePriority"].ToString() + " " +
                                            " ,SubProfilePriority=" + dr["SubProfilePriority"].ToString() + " " +
                                            " where MrdNo='" + mrdNo + "' and PatientID ='" + patientID + "' and TestCode='" + dr["TestCode"].ToString() + "' ";

                                MySqlCommand updatecmd = new MySqlCommand(strSQL1, conn);
                                updatecmd.CommandType = CommandType.Text;
                                updatecmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion        

        #region getDetailsForReportPrint
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getDetailsForReportPrint")]
        [HttpGet]
        public List<PrintReport> getDetailsForReportPrint(string mrdNo, string patientID, int status, string report)
        {
            List<PrintReport> printData = new List<PrintReport>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (report == "prelim")
                    {
                        strSQL = "select distinct lo.MrdNo,lo.RegID,lo.PatientName,lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName," +
                    " lo.CreateDate,sc.CollectedDate,rt.ApprovedDate " +
                    " from laborder lo inner join samplecollecter sc on sc.MrdNo = lo.MrdNo " +
                    " inner join resultlabtest rt on rt.MrdNo = lo.MrdNo and rt.PatientID = lo.RegID where lo.RegID = '" + patientID + "' and lo.MrdNo = '" + mrdNo + "' and " +
                    " rt.Status=" + status + " and rt.saveFlag=0 group by lo.RegID,lo.MrdNo,lo.PatientName," +
                    " lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName,lo.CreateDate,sc.CollectedDate,rt.ApprovedDate";
                    }
                    else
                    {
                        if (status == 9999)
                        {
                            strSQL = "select distinct lo.MrdNo,lo.RegID,lo.PatientName,lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName," +
                    " lo.CreateDate,sc.CollectedDate,rt.ApprovedDate " +
                    " from laborder lo inner join samplecollecter sc on sc.MrdNo = lo.MrdNo " +
                    " inner join resultlabtest rt on rt.MrdNo = lo.MrdNo and rt.PatientID = lo.RegID where lo.RegID = '" + patientID + "' and lo.MrdNo = '" + mrdNo + "' and rt.saveFlag=1 group by lo.RegID,lo.MrdNo,lo.PatientName," +
                    " lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName,lo.CreateDate,sc.CollectedDate,rt.ApprovedDate";
                        }
                        else if (status == 8888)
                        {
                            strSQL = "select distinct lo.MrdNo,lo.RegID,lo.PatientName,lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName," +
                    " lo.CreateDate,sc.CollectedDate,rt.ApprovedDate " +
                    " from laborder lo inner join samplecollecter sc on sc.MrdNo = lo.MrdNo " +
                    " left join resultlabtest rt on rt.MrdNo = lo.MrdNo and rt.PatientID = lo.RegID where lo.RegID = '" + patientID + "' and lo.MrdNo = '" + mrdNo + "' group by lo.RegID,lo.MrdNo,lo.PatientName," +
                    " lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName,lo.CreateDate,sc.CollectedDate,rt.ApprovedDate";
                        }
                        else
                        {
                            strSQL = "select distinct lo.MrdNo,lo.RegID,lo.PatientName,lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName," +
                    " lo.CreateDate,sc.CollectedDate,rt.ApprovedDate " +
                    " from laborder lo inner join samplecollecter sc on sc.MrdNo = lo.MrdNo " +
                    " inner join resultlabtest rt on rt.MrdNo = lo.MrdNo and rt.PatientID = lo.RegID where lo.RegID = '" + patientID + "' and lo.MrdNo = '" + mrdNo + "' and " +
                    " rt.Status=" + status + " and rt.saveFlag=1 and rt.confirmFlag=1 group by lo.RegID,lo.MrdNo,lo.PatientName," +
                    " lo.ReferredBy,lo.CollectAt,lo.ProviderName,lo.ProviderHostName,lo.CreateDate,sc.CollectedDate,rt.ApprovedDate";
                        }
                    }
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0) { }
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            PrintReport data = new PrintReport();
                            data.MrdNo = dr["MrdNo"].ToString();
                            data.RegID = (dr["RegID"].ToString());
                            data.PatientName = dr["PatientName"].ToString();
                            data.ReferredBy = dr["ReferredBy"].ToString();
                            data.CollectAt = dr["CollectAt"].ToString();
                            data.ProviderName = dr["ProviderName"].ToString();
                            data.ProviderHostName = dr["ProviderHostName"].ToString();

                            if (dr["ProviderName"].ToString() == "Hospital")
                            {
                                if (dr["CreateDate"] != DBNull.Value)
                                {
                                    DateTime newDate = Convert.ToDateTime(dr["CreateDate"].ToString());
                                    data.CollectedDate = newDate.ToString("g");
                                }
                                else
                                {
                                    data.CollectedDate = null;
                                }
                                data.IsSamCollect = "No";
                            }
                            else
                            {
                                if ((dr["ProviderName"].ToString()).Contains("_Camp"))
                                {
                                    string collectTYpe = "select SampleCollect from groupmaster where GroupName='" + dr["ProviderName"].ToString() + "'";
                                    MySqlDataAdapter typeData = new MySqlDataAdapter(collectTYpe, conn);
                                    MySqlCommandBuilder typeCmd = new MySqlCommandBuilder(typeData);
                                    DataSet typeDS = new DataSet();
                                    DataTable typeDT = new DataTable();
                                    typeData.Fill(typeDS);
                                    typeDT = typeDS.Tables[0];
                                    if ((typeDT.Rows[0]["SampleCollect"]).ToString() == "No")
                                    {
                                        data.IsSamCollect = "No";
                                    }
                                    else { data.IsSamCollect = "Yes"; }
                                }
                                else
                                {

                                }
                                if (dr["CollectedDate"] != DBNull.Value)
                                {
                                    DateTime newDate = Convert.ToDateTime(dr["CollectedDate"].ToString());
                                    data.CollectedDate = newDate.ToString("g");
                                }
                                else
                                {
                                    data.CollectedDate = null;
                                }
                            }

                            if (dr["ApprovedDate"] != DBNull.Value)
                            {
                                DateTime newDate = Convert.ToDateTime(dr["ApprovedDate"].ToString());
                                data.ApprovedDate = newDate.ToString("g");
                            }
                            else
                            {
                                data.ApprovedDate = null;
                            }
                            printData.Add(data);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return printData;
            }
        }
        #endregion

        //#region getappvedReportData
        ///// <summary>       
        ///// <returns></returns>
        //[Route("api/Account/getappvedReportData")]
        //[HttpGet]
        //public List<ResultLabTech> getappvedReportData(string mrdNo)
        //{
        //    List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
        //    DataTable dt = new DataTable();

        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {                   
        //            // string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1 and Status=1";
        //            string strSQL = "SELECT distinct rt.*,ch.AdditionalFixedComments as FixedComments,ch.Methodology as MethodologyName,sc.sampleName" +
        //                            " FROM  resultlabtest rt inner join childtestlist ch on rt.TestCode=ch.TestCode " +
        //                            "inner join samplecollecter sc on sc.MrdNo = rt.MrdNo and sc.TestCode=rt.TestCode" +
        //                            " where rt.MrdNo='" + mrdNo + "' and rt.ProfilePriority not in(2,3) and Status=1 and saveFlag=1 and confirmFlag=1 order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus";
        //            conn.Open();
        //            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
        //            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
        //            DataSet ds = new DataSet();
        //            mydata.Fill(ds);
        //            dt = ds.Tables[0];
        //            foreach (DataRow dr in dt.Rows)
        //            {
        //                if (dr != null)
        //                {
        //                    ResultLabTech resultLabTech = new ResultLabTech();
        //                    resultLabTech.resultlabtestID = Convert.ToInt32(dr["ResultLabId"].ToString());
        //                    resultLabTech.RegId = Convert.ToInt32(dr["RegId"]);
        //                    resultLabTech.MrdNo = dr["MrdNo"].ToString();
        //                    resultLabTech.DepartmentID = Convert.ToInt32(dr["DepartmentID"]);
        //                    resultLabTech.DepartmentName = dr["DepartmentName"].ToString();
        //                    resultLabTech.Result = dr["Result"].ToString();

        //                    resultLabTech.TestCode = dr["TestCode"].ToString();
        //                    if (dr["ProfileName"] != DBNull.Value)
        //                    {
        //                        resultLabTech.ProfileName = dr["ProfileName"].ToString().Split('-')[1];
        //                        // resultLabTech.TestName = dr["ProfileName"].ToString().Split('-')[1] + '/' + dr["TestName"].ToString();
        //                        resultLabTech.TestName = dr["TestName"].ToString();
        //                    }
        //                    else
        //                    {
        //                        resultLabTech.TestName = dr["TestName"].ToString();
        //                    }
        //                    resultLabTech.TestType = dr["ProfilePriority"].ToString();
        //                    resultLabTech.NormalValues = dr["DefaultValues"].ToString();
        //                    resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
        //                    resultLabTech.Units = dr["Units"].ToString();
        //                    resultLabTech.Comment = dr["Comment1"].ToString();
        //                    resultLabTech.Comment2 = dr["Comment2"].ToString();
        //                    resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
        //                    resultLabTech.EndRange = dr["EndRange"].ToString();
        //                    resultLabTech.StartRange = dr["StartRange"].ToString();
        //                    resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
        //                    resultLabTech.Methodology = dr["MethodologyName"].ToString();
        //                    resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
        //                    resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
        //                    resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
        //                    resultLabTech.SampleName = dr["sampleName"].ToString();
        //                    resultLabTech.FreeText = dr["FreeText"].ToString();
        //                    resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
        //                    resultLabTech.Status = (int)dr["Status"];
        //                    resultLabTech.PatientID = Convert.ToInt32(dr["PatientID"]);
        //                    resultLabTech.TestPriority = Convert.ToInt32(dr["TestPriority"]);
        //                    resultLabTech.ProfilePriority = Convert.ToInt32(dr["MainProfilePriority"]);
        //                    resultLabTech.SubProfilePriority = Convert.ToInt32(dr["SubProfilePriority"]);
        //                    resultLabTech.PriorityStatus = Convert.ToInt32(dr["PriorityStatus"]);
        //                    string crictical = "";
        //                    bool normalValue;                          
        //                    if (resultLabTech.NormalValuesFiled.Contains(','))
        //                    {
        //                        normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled.Split(',')[0], "^[a-zA-Z]+$");
        //                    }
        //                    else
        //                    {
        //                        normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "^[a-zA-Z]+$");
        //                    }
        //                    if (resultLabTech.NormalValuesFiled != null && resultLabTech.NormalValuesFiled != "" && resultLabTech.NormalValuesFiled != "undefined-undefined" && !normalValue)
        //                    {
        //                        if (resultLabTech.NormalValuesFiled != "")
        //                        {
        //                            string[] NormalValuesFiled = resultLabTech.NormalValuesFiled.Split('-');
        //                            double low = Convert.ToDouble(NormalValuesFiled[0]);

        //                            if (NormalValuesFiled[1].Contains(':'))
        //                            {
        //                                string[] checkField = NormalValuesFiled[1].Split(':');
        //                                string[] checkResult;
        //                                if (resultLabTech.Result.Contains(':'))
        //                                {
        //                                    checkResult = resultLabTech.Result.Split(':');
        //                                    if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[1]) <= (Convert.ToDouble(checkField[1]))))
        //                                    {
        //                                        crictical = "false";
        //                                    }
        //                                    else
        //                                    {
        //                                        crictical = "true";
        //                                    }
        //                                }
        //                            }
        //                            else
        //                            {
        //                                double high = Convert.ToDouble(NormalValuesFiled[1]);
        //                                double result = 0;
        //                                if (resultLabTech.Result.Contains('-'))
        //                                {
        //                                    crictical = "";
        //                                }
        //                                else if (System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.Result, "^[a-zA-Z]+$"))
        //                                {
        //                                    crictical = "";
        //                                }
        //                                else if (resultLabTech.Result != "")
        //                                {
        //                                    result = Convert.ToDouble(resultLabTech.Result);
        //                                    if (result >= low && result <= high)
        //                                    {
        //                                        crictical = "false";
        //                                    }
        //                                    else
        //                                    {
        //                                        crictical = "true";
        //                                    }
        //                                }
        //                                else { crictical = ""; }
        //                            }

        //                            resultLabTech.CricticalResult = crictical;
        //                        }
        //                        else
        //                        {
        //                            crictical = "false";
        //                            resultLabTech.CricticalResult = crictical;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        resultLabTech.CricticalResult = crictical;
        //                    }
        //                    lstResultLabTech.Add(resultLabTech);
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //        return lstResultLabTech;
        //    }
        //}
        //#endregion 
        //#region getProvReportData
        ///// <summary>       
        ///// <returns></returns>
        //[Route("api/Account/getProvReportData")]
        //[HttpGet]
        //public List<ResultLabTech> getProvReportData(string mrdNo)
        //{
        //    List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
        //    DataTable dt = new DataTable();
        //    using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
        //    {
        //        try
        //        {                   
        //            // string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1 and Status=1";
        //            string strSQL = "SELECT distinct rt.*,ch.AdditionalFixedComments as FixedComments,ch.Methodology as MethodologyName, sc.sampleName" +
        //                            " FROM  resultlabtest rt inner join childtestlist ch on rt.TestCode=ch.TestCode " +
        //                            "inner join samplecollecter sc on sc.MrdNo = rt.MrdNo and sc.TestCode=rt.TestCode" +
        //                            " where rt.MrdNo='" + mrdNo + "' and rt.ProfilePriority not in(2,3) and Status=0 and saveFlag=1 and confirmFlag=1 order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus";
        //            conn.Open();
        //            MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
        //            MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
        //            DataSet ds = new DataSet();
        //            mydata.Fill(ds);
        //            dt = ds.Tables[0];
        //            foreach (DataRow dr in dt.Rows)
        //            {
        //                if (dr != null)
        //                {
        //                    ResultLabTech resultLabTech = new ResultLabTech();
        //                    resultLabTech.resultlabtestID = Convert.ToInt32(dr["ResultLabId"].ToString());
        //                    resultLabTech.RegId = Convert.ToInt32(dr["RegId"]);
        //                    resultLabTech.MrdNo = dr["MrdNo"].ToString();
        //                    resultLabTech.DepartmentID = Convert.ToInt32(dr["DepartmentID"]);
        //                    resultLabTech.DepartmentName = dr["DepartmentName"].ToString();
        //                    resultLabTech.Result = dr["Result"].ToString();
        //                    resultLabTech.TestCode = dr["TestCode"].ToString();
        //                    if (dr["ProfileName"] != DBNull.Value)
        //                    {
        //                        resultLabTech.ProfileName = dr["ProfileName"].ToString().Split('-')[1];
        //                        //resultLabTech.TestName = dr["ProfileName"].ToString().Split('-')[1] + '/' + dr["TestName"].ToString();
        //                        resultLabTech.TestName = dr["TestName"].ToString();
        //                    }
        //                    else
        //                    {
        //                        resultLabTech.TestName = dr["TestName"].ToString();
        //                    }
        //                    resultLabTech.TestType = dr["ProfilePriority"].ToString();
        //                    resultLabTech.NormalValues = dr["DefaultValues"].ToString();
        //                    resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
        //                    resultLabTech.Units = dr["Units"].ToString();
        //                    resultLabTech.Comment = dr["Comment1"].ToString();
        //                    resultLabTech.Comment2 = dr["Comment2"].ToString();
        //                    resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
        //                    resultLabTech.EndRange = dr["EndRange"].ToString();
        //                    resultLabTech.StartRange = dr["StartRange"].ToString();
        //                    resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
        //                    resultLabTech.Methodology = dr["MethodologyName"].ToString();
        //                    resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
        //                    resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
        //                    resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
        //                    resultLabTech.SampleName = dr["sampleName"].ToString();
        //                    resultLabTech.FreeText = dr["FreeText"].ToString();
        //                    resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
        //                    resultLabTech.Status = (int)dr["Status"];
        //                    resultLabTech.PatientID = Convert.ToInt32(dr["PatientID"]);
        //                    resultLabTech.TestPriority = Convert.ToInt32(dr["TestPriority"]);
        //                    resultLabTech.ProfilePriority = Convert.ToInt32(dr["MainProfilePriority"]);
        //                    resultLabTech.SubProfilePriority = Convert.ToInt32(dr["SubProfilePriority"]);
        //                    resultLabTech.PriorityStatus = Convert.ToInt32(dr["PriorityStatus"]);
        //                    bool normalValue;
        //                    string crictical = "false";
        //                    if ((resultLabTech.NormalValuesFiled.Contains(',')) && (resultLabTech.NormalValuesFiled!=""))
        //                    {
        //                        normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled.Split(',')[0], "^[a-zA-Z]+$");
        //                    }
        //                    else
        //                    {
        //                        normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "^[a-zA-Z]+$");
        //                    }
        //                    if (resultLabTech.NormalValuesFiled != null && resultLabTech.NormalValuesFiled != "" && resultLabTech.NormalValuesFiled != "undefined-undefined" && !normalValue)
        //                    {
        //                        if (resultLabTech.NormalValuesFiled != "")
        //                        {
        //                            string[] NormalValuesFiled = resultLabTech.NormalValuesFiled.Split('-');
        //                            double low = Convert.ToDouble(NormalValuesFiled[0]);  
        //                            if (NormalValuesFiled[1].Contains(':'))
        //                            {
        //                                string[] checkField = NormalValuesFiled[1].Split(':');
        //                                string[] checkResult;
        //                                if (resultLabTech.Result.Contains(':'))
        //                                {
        //                                    checkResult = resultLabTech.Result.Split(':');
        //                                    if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[1]) <= (Convert.ToDouble(checkField[1]))))
        //                                    {
        //                                        crictical = "false";
        //                                    }
        //                                    else
        //                                    {
        //                                        crictical = "true";
        //                                    }
        //                                }
        //                            }
        //                            else
        //                            {
        //                                double high = Convert.ToDouble(NormalValuesFiled[1]);
        //                                double result = 0;
        //                                if (resultLabTech.Result.Contains('-'))
        //                                {
        //                                    crictical = "";
        //                                }
        //                                else if (System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.Result, "^[a-zA-Z]+$"))
        //                                {
        //                                    crictical = "";
        //                                }
        //                                else if (resultLabTech.Result != "")
        //                                {
        //                                    result = Convert.ToDouble(resultLabTech.Result);
        //                                    if (result >= low && result <= high)
        //                                    {
        //                                        crictical = "false";
        //                                    }
        //                                    else
        //                                    {
        //                                        crictical = "true";
        //                                    }
        //                                }
        //                                else { crictical = ""; }
        //                            }                                    
        //                            resultLabTech.CricticalResult = crictical;
        //                        }
        //                        else
        //                        {
        //                            crictical = "false";
        //                            resultLabTech.CricticalResult = crictical;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        resultLabTech.CricticalResult = crictical;
        //                    }
        //                    lstResultLabTech.Add(resultLabTech);
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            Console.Write(ex);
        //        }
        //        return lstResultLabTech;
        //    }
        //}
        //#endregion

        #region getappvedOrProvReportData
        /// <summary>       
        /// <returns></returns>
        [Route("api/Account/getappvedOrProvReportData")]
        [HttpGet]

        public List<ResultLabTech> getappvedOrProvReportData(string mrdNo, int flag)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            string mulTestCode = "";
            int mulTestCount = 0;
            int iniTestCount = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (flag == 1)
                    {
                        // string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1 and Status=1";
                        //strSQL = "SELECT distinct rt.*,ch.AdditionalFixedComments as FixedComments,ch.Methodology as MethodologyName, sc.sampleName" +
                        //                " FROM  resultlabtest rt inner join childtestlist ch on rt.TestCode=ch.TestCode " +
                        //                "inner join samplecollecter sc on sc.MrdNo = rt.MrdNo and sc.TestCode=rt.TestCode" +
                        //                " where rt.MrdNo='" + mrdNo + "' and rt.ProfilePriority not in(2,3) and Status=0 and saveFlag=1 and confirmFlag=1 order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus";
                        strSQL = "create temporary table TestInfo as " +
                                   " SELECT distinct rt.*,ch.AdditionalFixedComments as FixedComments,ch.Methodology as MethodologyName,sc.sampleName,convert('',char(50)) as MultiUnits,convert('',char(150)) as RptProfile " +
                                   " ,convert('',char(5)) as OustSrced " +
                                   " FROM  resultlabtest rt inner join childtestlist ch on rt.TestCode = ch.TestCode inner join samplecollecter sc on sc.MrdNo = rt.MrdNo" +
                                   " and sc.TestCode = rt.TestCode where rt.MrdNo='" + mrdNo + "' and rt.ProfilePriority not in(2,3) and Status = 0 and saveFlag = 1 and confirmFlag = 1 " +
                                   " order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus; " +
                                   " update TestInfo AS TI left JOIN testmultiplecomponents AS CL ON CL.TestCode = TI.TestCode and CL.ElementName = TI.TestName and CL.ElementName is not null and TI.ProfilePriority=1 " +
                                   " SET TI.MethodologyName = CL.Methodology,TI.MultiUnits=(case when CL.Units is not null then CL.Units else '' end) Where TI.ProfilePriority = 1;" +
                                   " update TestInfo AS TI inner JOIN samplecollecter AS SC ON SC.TestCode = TI.TestCode and SC.MrdNo = TI.MrdNo SET TI.RptProfile = SC.ProfileName; " +
                                   " update TestInfo AS TI inner JOIN childtestlist chd on TI.TestCode = chd.TestCode set TI.OustSrced=chd.Outsourced; " +
                                   " select* from TestInfo; drop table TestInfo;";
                    }
                    else if (flag == 2)
                    {
                        // string strSQL = "SELECT * FROM  resultlabtest where MrdNo='" + mrdNo + "' and saveFlag=1 and confirmFlag=1 and Status=1";
                        //strSQL = "SELECT distinct rt.*,ch.AdditionalFixedComments as FixedComments,ch.Methodology as MethodologyName,sc.sampleName" +
                        //                " FROM  resultlabtest rt inner join childtestlist ch on rt.TestCode=ch.TestCode " +
                        //                "inner join samplecollecter sc on sc.MrdNo = rt.MrdNo and sc.TestCode=rt.TestCode" +
                        //                " where rt.MrdNo='" + mrdNo + "' and rt.ProfilePriority not in(2,3) and Status=1 and saveFlag=1 and confirmFlag=1 order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus";
                        strSQL = "create temporary table TestInfo as " +
                                    " SELECT distinct rt.*,ch.AdditionalFixedComments as FixedComments,ch.Methodology as MethodologyName,sc.sampleName,convert('',char(50)) as MultiUnits,convert('',char(150)) as RptProfile " +
                                    " ,convert('',char(5)) as OustSrced " +
                                    " FROM  resultlabtest rt inner join childtestlist ch on rt.TestCode = ch.TestCode inner join samplecollecter sc on sc.MrdNo = rt.MrdNo" +
                                    " and sc.TestCode = rt.TestCode where rt.MrdNo='" + mrdNo + "' and rt.ProfilePriority not in(2,3) and Status = 1 and saveFlag = 1 and confirmFlag = 1 " +
                                    " order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus; " +
                                    " update TestInfo AS TI left JOIN testmultiplecomponents AS CL ON CL.TestCode = TI.TestCode and CL.ElementName = TI.TestName and CL.ElementName is not null and TI.ProfilePriority=1" +
                                    " SET TI.MethodologyName = CL.Methodology, TI.MultiUnits=(case when CL.Units is not null then CL.Units else '' end) Where TI.ProfilePriority = 1;" +
                                    " update TestInfo AS TI inner JOIN samplecollecter AS SC ON SC.TestCode = TI.TestCode and SC.MrdNo = TI.MrdNo SET TI.RptProfile = SC.ProfileName; " +
                                    " update TestInfo AS TI inner JOIN childtestlist chd on TI.TestCode = chd.TestCode set TI.OustSrced=chd.Outsourced; " +
                                    " select* from TestInfo; drop table TestInfo;";
                    }
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    string repPregRefRange = "";
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            repPregRefRange = GetPregRefRange(dr["TestCode"].ToString(), mrdNo);

                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.resultlabtestID = Convert.ToInt32(dr["ResultLabId"].ToString());
                            resultLabTech.RegId = Convert.ToInt32(dr["RegId"]);
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();

                            resultLabTech.DepartmentName = dr["DepartmentName"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.DisplayDeptName = "";
                            resultLabTech.DisplayProfileName = "";
                            resultLabTech.DisplayMultiTestName = "";
                            resultLabTech.TestType = dr["ProfilePriority"].ToString();

                            if (dr["DepartmentID"] != DBNull.Value)
                            {
                                resultLabTech.DepartmentID = Convert.ToInt32(dr["DepartmentID"]);
                            }
                            else
                            {
                                resultLabTech.DepartmentID = 0;
                            }
                            if (dr["RptProfile"] != DBNull.Value)
                            {
                                resultLabTech.ProfileName = dr["RptProfile"].ToString();
                                //resultLabTech.TestName = dr["ProfileName"].ToString().Split('-')[1] + '/' + dr["TestName"].ToString();
                                resultLabTech.TestName = dr["TestName"].ToString();
                            }
                            else
                            {
                                resultLabTech.ProfileName = "";
                                resultLabTech.TestName = dr["TestName"].ToString();
                            }
                            if (resultLabTech.TestType == "1")
                            {
                                if (dr["ProfileName"] != DBNull.Value)
                                {
                                    if (dr["ProfileName"].ToString().Contains('-'))
                                    {
                                        resultLabTech.MultiTestName = (dr["ProfileName"].ToString()).Substring(dr["ProfileName"].ToString().IndexOf('-') + 1);
                                    }
                                }
                                else { resultLabTech.MultiTestName = ""; }
                                //resultLabTech.MultiTestName = dr["ProfileName"].ToString().Split('-')[1];
                            }
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            if (dr["Units"] != DBNull.Value)
                            {
                                resultLabTech.Units = dr["Units"].ToString();
                            }
                            else if (dr["MultiUnits"] != DBNull.Value)
                            {
                                if (dr["MultiUnits"].ToString() == "0000000")
                                {
                                    resultLabTech.Units = "";
                                }
                                else
                                {
                                    resultLabTech.Units = dr["MultiUnits"].ToString();
                                }
                            }
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            if (resultLabTech.TestType == "1")
                            {
                                if (mulTestCode != dr["TestCode"].ToString())
                                {
                                    mulTestCount = iniTestCount + 1;
                                    mulTestCode = dr["TestCode"].ToString();
                                }
                                else
                                {
                                    mulTestCount = mulTestCount + 1;
                                }
                                resultLabTech.mulTestCount = mulTestCount;
                                resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
                            }
                            else
                            {
                                resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
                            }
                            //resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
                            resultLabTech.Methodology = dr["MethodologyName"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
                            resultLabTech.SampleName = dr["sampleName"].ToString();
                            resultLabTech.FreeText = dr["FreeText"].ToString();
                            resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                            if (repPregRefRange != "")
                            {
                                resultLabTech.DisplayValueText = repPregRefRange;
                            }
                            else
                            {
                                if ((dr["DisplayValueText"] == DBNull.Value) && ((dr["FreeText"] == DBNull.Value)))
                                {
                                    resultLabTech.DisplayValueText = dr["NormalValuesFiled"].ToString();
                                }
                                else
                                {
                                    resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                                }
                            }
                            resultLabTech.Status = (int)dr["Status"];
                            resultLabTech.PatientID = (dr["PatientID"]).ToString();
                            resultLabTech.TestPriority = Convert.ToInt32(dr["TestPriority"]);
                            resultLabTech.ProfilePriority = Convert.ToInt32(dr["MainProfilePriority"]);
                            resultLabTech.SubProfilePriority = Convert.ToInt32(dr["SubProfilePriority"]);
                            resultLabTech.PriorityStatus = Convert.ToInt32(dr["PriorityStatus"]);
                            resultLabTech.PregRefRange = repPregRefRange;
                            resultLabTech.OustSrced = dr["OustSrced"].ToString();
                            bool normalValue;
                            string crictical = "false";
                            if ((resultLabTech.NormalValuesFiled.Contains(',')) && (resultLabTech.NormalValuesFiled != ""))
                            {
                                normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled.Split(',')[0], "^[a-zA-Z]+$");
                            }
                            else if ((resultLabTech.NormalValuesFiled.Contains(' ')) && (resultLabTech.NormalValuesFiled != ""))
                            {
                                normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled.Split(' ')[0], "^[a-zA-Z]+$");
                            }
                            else
                            {
                                normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "^[a-zA-Z]+$");
                            }
                            if (resultLabTech.NormalValuesFiled != null && resultLabTech.NormalValuesFiled != "" && resultLabTech.NormalValuesFiled != "undefined-undefined" && !normalValue)
                            {
                                if (resultLabTech.NormalValuesFiled != "")
                                {
                                    string[] NormalValuesFiled = resultLabTech.NormalValuesFiled.Split('-');
                                    double low = Convert.ToDouble(NormalValuesFiled[0]);

                                    if (NormalValuesFiled[1].Contains(':'))
                                    {
                                        string[] checkField = NormalValuesFiled[1].Split(':');
                                        string[] checkResult;
                                        if (resultLabTech.Result.Contains(':'))
                                        {
                                            checkResult = resultLabTech.Result.Split(':');
                                            if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[1]) <= (Convert.ToDouble(checkField[1]))))
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                        else if (resultLabTech.Result.Contains("'"))
                                        {
                                            var replaceText = resultLabTech.Result.Replace("'", ",");
                                            checkResult = replaceText.Split(',');
                                            if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[1]) <= (Convert.ToDouble(checkField[1]))))
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        double high = Convert.ToDouble(NormalValuesFiled[1]);
                                        double result = 0;
                                        string[] checkResult;
                                        if (resultLabTech.Result.Contains('-'))
                                        {
                                            crictical = "";
                                        }
                                        else if (System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.Result, "^[a-zA-Z]+$"))
                                        {
                                            crictical = "";
                                        }
                                        else if (resultLabTech.Result.Contains("'"))
                                        {
                                            var replaceText = resultLabTech.Result.Replace("'", ",");
                                            checkResult = replaceText.Split(',');
                                            if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[0]) <= (Convert.ToDouble(high))))
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                        else if (resultLabTech.Result != "")
                                        {
                                            result = Convert.ToDouble(resultLabTech.Result);
                                            if (result >= low && result <= high)
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                        else { crictical = ""; }
                                    }

                                    resultLabTech.CricticalResult = crictical;
                                }
                                else
                                {
                                    crictical = "false";
                                    resultLabTech.CricticalResult = crictical;
                                }
                            }
                            else
                            {
                                resultLabTech.CricticalResult = crictical;
                            }
                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region getCultureReportData
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getCultureReportData")]
        [HttpGet]
        public List<AntiMicrobialsusceptibilityNew> getCultureReportData(string mrdNo, string patientID, string apprStatus, string report, int repFlag)
        {
            List<AntiMicrobialsusceptibilityNew> printData = new List<AntiMicrobialsusceptibilityNew>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = "select cl.MrdNo,cl.TestCode,cl.Specimen,cl.GrainStain,cl.SpecialStain,cl.QualityScore,cl.FastBacilli,cl.OrganizismIsolated, " +
                    //" cl.Result,cl.Comments,cl.NegComment,cl.ColonyCount,cl.CulComment,ant.Agent,ant.zoneInhibition,ant.Interpretation,ant.MicrobialComment" +
                    //" from resultlabtest rt inner join culturetestresult cl on rt.MrdNo=cl.MrdNo and rt.PatientID=cl.PatientID " +
                    //" left join antimicrobialsusceptibility1 ant on cl.MrdNo = ant.MrdNo and cl.CultureTestResultId = ant.CultureId " +
                    //" where rt.MrdNo = '" + mrdNo + "' and rt.PatientID = '" + patientID + "' and rt.Status="+ apprStatus + " ";

                    //string strSQL = " SELECT * FROM culturetestresult cl left join antimicrobialsusceptibility1 ant on cl.MrdNo = ant.MrdNo " +
                    //" and cl.CultureTestResultId = ant.CultureId where cl.MrdNo = '" + mrdNo + "' and cl.PatientID = '" + patientID + "' and cl.TestCode = " +
                    //" (select testCode from resultlabtest where MrdNo = '" + mrdNo + "' and ProfilePriority = 3 and Status = " + apprStatus + " and PatientID = '" + patientID + "') ";
                    string strSQL = "";
                    if (report == "prelim")
                    {
                        strSQL = " SELECT cl.*,ant.Agent,ant.zoneInhibition,ant.Interpretation,ant.MicrobialComment,anm.AgentId,chd.Outsourced,concat(ptr.Age,'_',ptr.Sex) as Sex" +
                     " FROM culturetestresult cl " +
                     " left join antimicrobialsusceptibility1 ant on cl.MrdNo = ant.MrdNo and cl.CultureTestResultId = ant.CultureId " +
                     " inner join patientregistration ptr on cl.PatientID=ptr.RegID " +
                     " left join antimicrobialagentmaster anm on ant.Agent=anm.AtimicrobialAgent and anm.CultureCategory= " +
                     " (select CultureCategory from childtestlist where TestCode=cl.TestCode) left join childtestlist chd on cl.TestCode=chd.TestCode " +
                     " where cl.MrdNo = '" + mrdNo + "' and cl.PatientID = '" + patientID + "' ";
                    }
                    else
                    {
                        if (repFlag == 1)
                        {
                            strSQL = " SELECT cl.*,ant.Agent,ant.zoneInhibition,ant.Interpretation,ant.MicrobialComment,anm.AgentId,chd.Outsourced,concat(ptr.Age,'_',ptr.Sex) as Sex" +
                  " FROM culturetestresult cl " +
                  "  left join antimicrobialsusceptibility1 ant on cl.MrdNo = ant.MrdNo and cl.CultureTestResultId = ant.CultureId " +
                  " inner join patientregistration ptr on cl.PatientID=ptr.RegID " +
                  " left join antimicrobialagentmaster anm on ant.Agent=anm.AtimicrobialAgent and anm.CultureCategory= " +
                  " (select CultureCategory from childtestlist where TestCode=cl.TestCode) left join childtestlist chd on cl.TestCode=chd.TestCode " +
                  " where cl.MrdNo = '" + mrdNo + "' and cl.PatientID = '" + patientID + "' and" +
                  " cl.TestCode = (select testCode from resultlabtest where MrdNo = '" + mrdNo + "' and ProfilePriority = 3 and saveFlag <> 0 and " +
                  " PatientID = '" + patientID + "') ";
                        }
                        else
                        {
                            int chkStatus = Convert.ToInt32(apprStatus);
                            strSQL = " SELECT cl.*,ant.Agent,ant.zoneInhibition,ant.Interpretation,ant.MicrobialComment,anm.AgentId,chd.Outsourced,concat(ptr.Age,'_',ptr.Sex) as Sex" +
                   " FROM culturetestresult cl " +
                   "  left join antimicrobialsusceptibility1 ant on cl.MrdNo = ant.MrdNo and cl.CultureTestResultId = ant.CultureId " +
                   " inner join patientregistration ptr on cl.PatientID=ptr.RegID " +
                   " left join antimicrobialagentmaster anm on ant.Agent=anm.AtimicrobialAgent and anm.CultureCategory= " +
                   " (select CultureCategory from childtestlist where TestCode=cl.TestCode) left join childtestlist chd on cl.TestCode=chd.TestCode " +
                   " where cl.MrdNo = '" + mrdNo + "' and cl.PatientID = '" + patientID + "' and" +
                   " cl.TestCode = (select testCode from resultlabtest where MrdNo = '" + mrdNo + "' and ProfilePriority = 3 and saveFlag <> 0 and confirmFlag <> 0 and " +
                   " Status = " + chkStatus + " and PatientID = '" + patientID + "') ";
                        }

                    }


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                AntiMicrobialsusceptibilityNew data = new AntiMicrobialsusceptibilityNew();
                                data.MrdNo = dr["MrdNo"].ToString();
                                data.TestCode = dr["TestCode"].ToString();

                                if ((dr["Specimen"] == DBNull.Value) || (dr["Specimen"].ToString() == "") || (dr["Specimen"].ToString() == "undefined"))
                                { data.Specimen = "null"; }
                                else { data.Specimen = dr["Specimen"].ToString(); }

                                if ((dr["GrainStain"] == DBNull.Value) || (dr["GrainStain"].ToString() == "") || (dr["GrainStain"].ToString() == "undefined"))
                                { data.GrainStain = "null"; }
                                else { data.GrainStain = dr["GrainStain"].ToString(); }

                                if ((dr["SpecialStain"] == DBNull.Value) || (dr["SpecialStain"].ToString() == "") || (dr["SpecialStain"].ToString() == "undefined"))
                                { data.SpecialStain = "null"; }
                                else { data.SpecialStain = dr["SpecialStain"].ToString(); }


                                if ((dr["QualityScore"] == DBNull.Value) || (dr["QualityScore"].ToString() == "") || (dr["QualityScore"].ToString() == "undefined"))
                                { data.QualityScore = "null"; }
                                else { data.QualityScore = dr["QualityScore"].ToString(); }

                                if ((dr["FastBacilli"] == DBNull.Value) || (dr["FastBacilli"].ToString() == "") || (dr["FastBacilli"].ToString() == "undefined"))
                                { data.FastBacilli = "null"; }
                                else { data.FastBacilli = dr["FastBacilli"].ToString(); }


                                if ((dr["OrganizismIsolated"] == DBNull.Value) || (dr["OrganizismIsolated"].ToString() == "") || (dr["OrganizismIsolated"].ToString() == "undefined"))
                                { data.OrganizismIsolated = "null"; }
                                else { data.OrganizismIsolated = dr["OrganizismIsolated"].ToString(); }

                                if ((dr["ColonyCount"] == DBNull.Value) || (dr["ColonyCount"].ToString() == "") || (dr["ColonyCount"].ToString() == "undefined"))
                                { data.ColonyCount = "null"; }
                                else { data.ColonyCount = dr["ColonyCount"].ToString(); }

                                data.CulComments = dr["CulComment"].ToString();
                                data.Agent = dr["Agent"].ToString();
                                data.zoneInhibition = dr["zoneInhibition"].ToString();
                                data.Interpretation = dr["Interpretation"].ToString();
                                data.MicroBComments = dr["MicrobialComment"].ToString();
                                data.Result = dr["Result"].ToString();
                                data.Comments = dr["Comments"].ToString();
                                data.NegComment = dr["NegComment"].ToString();
                                data.Outsourced = dr["Outsourced"].ToString();
                                data.Sex = dr["Sex"].ToString();
                                printData.Add(data);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return printData;
            }
        }
        #endregion

        #region getParagraphData
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getParagraphData")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getParagraphData(string mrdNo, string patientID, string apprStatus, int repFlag)
        {
            List<BoneMarrowAspirationNew> printData = new List<BoneMarrowAspirationNew>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    //string strSQL = " SELECT bm.*, bio.ByspyNo FROM resultlabtest rt inner join bonemarrowaspiration bm " +
                    //" on bm.MrdNo=rt.MrdNo and bm.TestCode=rt.TestCode inner join biospydetails bio on bio.MrdNo=rt.MrdNo"+
                    //" where bm.MrdNo = '" + mrdNo + "' and bm.PatientID = '" + patientID + "' " +
                    //" and bm.TestCode in (select testCode from resultlabtest where MrdNo = '" + mrdNo + "' and ProfilePriority = 2 and " +
                    //" Status = " + apprStatus + " and PatientID = '" + patientID + "'"+
                    //" ) order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus";
                    string strSQL = "";
                    if (repFlag == 1)
                    {
                        strSQL = " select rt.MrdNo,rt.TestCode,rt.TestName,bm.bonemarrowaspirationid,bm.ElementId,bm.ElementName,bm.TemplateDescription,bio.ByspyNo,chd.Outsourced" +
                    " ,ptr.RegID,concat(ptr.Age,'_',ptr.Sex) as Sex,rt.MainProfilePriority,rt.SubProfilePriority,rt.TestPriority,rt.PriorityStatus" +
                    " from resultlabtest rt inner join bonemarrowaspiration bm on bm.MrdNo=rt.MrdNo and bm.TestCode=rt.TestCode" +
                    " left join biospydetails bio on bio.MrdNo=rt.MrdNo and bio.TestCode=rt.TestCode" +
                    " inner join childtestlist chd on rt.TestCode = chd.TestCode " +
                    " inner join patientregistration ptr on rt.PatientID=ptr.RegID " +
                    " where rt.MrdNo = '" + mrdNo + "' and rt.ProfilePriority = 2 group by bm.ElementId, " +
                    " bm.ElementName,bm.TemplateDescription,bm.bonemarrowaspirationid,bio.ByspyNo,chd.Outsourced,ptr.RegID,rt.MrdNo,rt.TestCode,rt.TestName," +
                    " rt.MainProfilePriority,rt.SubProfilePriority,rt.TestPriority,rt.PriorityStatus,Sex" +
                    " order by rt.MainProfilePriority,rt.SubProfilePriority,rt.TestPriority,rt.PriorityStatus,bm.ElementId,rt.MrdNo,rt.TestCode,rt.TestName," +
                    " bm.bonemarrowaspirationid,bm.ElementName,bm.TemplateDescription,bio.ByspyNo,chd.Outsourced,ptr.RegID,Sex";
                    }
                    else
                    {
                        int checkStatus = Convert.ToInt32(apprStatus);
                        strSQL = " select rt.MrdNo,rt.TestCode,rt.TestName,bm.bonemarrowaspirationid,bm.ElementId,bm.ElementName,bm.TemplateDescription,bio.ByspyNo,chd.Outsourced" +
                    " ,ptr.RegID,concat(ptr.Age,'_',ptr.Sex) as Sex,rt.MainProfilePriority,rt.SubProfilePriority,rt.TestPriority,rt.PriorityStatus" +
                    " from resultlabtest rt inner join bonemarrowaspiration bm on bm.MrdNo=rt.MrdNo and bm.TestCode=rt.TestCode" +
                    " left join biospydetails bio on bio.MrdNo=rt.MrdNo and bio.TestCode=rt.TestCode" +
                    " inner join childtestlist chd on rt.TestCode = chd.TestCode " +
                    " inner join patientregistration ptr on rt.PatientID=ptr.RegID " +
                    " where rt.MrdNo = '" + mrdNo + "' and rt.Status = " + checkStatus + " and rt.ProfilePriority = 2 group by bm.ElementId, " +
                    " bm.ElementName,bm.TemplateDescription,bm.bonemarrowaspirationid,bio.ByspyNo,chd.Outsourced,ptr.RegID,rt.MrdNo,rt.TestCode,rt.TestName," +
                    " rt.MainProfilePriority,rt.SubProfilePriority,rt.TestPriority,rt.PriorityStatus,Sex" +
                    " order by rt.MainProfilePriority,rt.SubProfilePriority,rt.TestPriority,rt.PriorityStatus,bm.ElementId,rt.MrdNo,rt.TestCode,rt.TestName," +
                    " bm.bonemarrowaspirationid,bm.ElementName,bm.TemplateDescription,bio.ByspyNo,chd.Outsourced,ptr.RegID,Sex";
                    }


                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                BoneMarrowAspirationNew data = new BoneMarrowAspirationNew();
                                data.MrdNo = dr["MrdNo"].ToString();
                                data.TestCode = dr["TestCode"].ToString();
                                data.TestName = dr["TestName"].ToString();
                                data.bonemarrowaspirationid = Convert.ToInt32(dr["bonemarrowaspirationid"].ToString());
                                data.ElementId = Convert.ToInt32(dr["ElementId"].ToString());
                                data.ElementName = dr["ElementName"].ToString();
                                data.TemplateDescription = dr["TemplateDescription"].ToString();
                                data.ByspyNo = dr["ByspyNo"].ToString();
                                data.Outsourced = dr["Outsourced"].ToString();
                                data.PatientID = dr["RegID"].ToString();
                                data.Sex = dr["Sex"].ToString();
                                printData.Add(data);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return printData;
            }
        }
        #endregion

        #region getBiospyAbbrev
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getBiospyAbbrev")]
        [HttpGet]
        public int getBiospyAbbrev(string abbrevation)
        {
            DataTable dt = new DataTable();
            var printData = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = " SELECT * from childtestlist where BiospyAbbrevation='" + abbrevation + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        printData = 1;
                    }
                    else { printData = 0; }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return printData;
            }
        }
        #endregion

        #region saveSpecComments
        /// <summary>       
        [Route("api/Account/saveSpecComments")]
        [HttpPost]
        public void saveSpecComments(string regID, string specialComments)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "Update patientregistration set SpecialComments='" + specialComments + "' where RegID='" + regID + "' ";
                    MySqlCommand cmd = new MySqlCommand(strSQL, conn);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getMarkersDetails
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getMarkersDetails")]
        [HttpGet]
        public List<BoneMarrowAspirationNew> getMarkersDetails(string mrdNo, string patientID, int bonemarrowID, int flag, int bonemarID)
        {
            List<BoneMarrowAspirationNew> printData = new List<BoneMarrowAspirationNew>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    if (flag == 1)
                    {
                        strSQL = " select * from immunohistomarkers " +
                   " where MrdNo = '" + mrdNo + "' and PatientID = '" + patientID + "' and BoneMarrowID =" + bonemarrowID + " ";
                    }
                    else if (flag == 2)
                    {
                        strSQL = " select * from immunohistomarkers mrk inner join bonemarrowaspiration bm on mrk.BoneMarrowID = bm.bonemarrowaspirationid and bm.ElementId = " + bonemarID + "  inner join markermaster mm on mrk.MarkerName= mm.MarkerName and mrk.MrdNo='" + mrdNo + "' ";
                    }
                    else if (flag == 3)
                    {
                        strSQL = " select * from immunohistomarkers mrk inner join markermaster mm on mrk.MarkerName= mm.MarkerName " +
                                 " where mrk.MrdNo='" + mrdNo + "' and mrk.PatientID = '" + patientID + "' and mrk.BoneMarrowID =" + bonemarrowID + "";
                    }
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                BoneMarrowAspirationNew data = new BoneMarrowAspirationNew();
                                data.MrdNo = dr["MrdNo"].ToString();
                                data.PatientID = dr["PatientID"].ToString();
                                data.MarkerName = dr["MarkerName"].ToString();
                                data.Clone = dr["Clone"].ToString();
                                data.Results = dr["Results"].ToString();
                                data.Impressions = dr["Impressions"].ToString();
                                data.ImmunoMarkerID = Convert.ToInt32(dr["ImmunoMarkerID"].ToString());
                                if (flag == 1)
                                {
                                    data.MarkerPriority = 0;
                                }
                                else
                                {
                                    data.MarkerPriority = Convert.ToInt32(dr["MarkerPriority"].ToString());
                                }

                                printData.Add(data);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return printData;
            }
        }
        #endregion

        #region uploadSignName
        /// <summary>       
        [Route("api/Account/uploadSignName")]
        [HttpPost]
        public int uploadSignName(string signName, string occupation, string imagePath, int priority, int doctorId)
        {
            int insertResult = 0;

            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string chkstrSQL = " SELECT * from image  where DoctorId=" + doctorId + " ";

                    MySqlDataAdapter mydata = new MySqlDataAdapter(chkstrSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string strSQL = "insert into image(ImageName,PicturePath,CreateDate,Designation,PriorityOrder,DoctorId) " +
                                  " values('" + signName + "','" + imagePath + "','" + DateTime.Now + "','" + occupation + "'," + priority + "," + doctorId + ")";
                        MySqlCommand insertcmd = new MySqlCommand(strSQL, conn);
                        insertcmd.CommandType = CommandType.Text;
                        insertcmd.ExecuteNonQuery();
                        insertResult = insertResult + 1;
                    }
                    else
                    {
                        string strSQL = "update image set ImageName='" + signName + "',PicturePath='" + imagePath + "',CreateDate='" + DateTime.Now + "'," +
                                        " Designation='" + occupation + "',PriorityOrder=" + priority + " where DoctorId=" + doctorId + " ";

                        MySqlCommand insertcmd = new MySqlCommand(strSQL, conn);
                        insertcmd.CommandType = CommandType.Text;
                        insertcmd.ExecuteNonQuery();
                        insertResult = insertResult + 1;
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return insertResult;
            }
        }
        #endregion

        #region getSignDetails
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getSignDetails")]
        [HttpGet]
        public List<Login> getSignDetails()
        {
            List<Login> signDetails = new List<Login>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = " SELECT * from image im inner join doctorpersonalinfo dp on dp.DoctorId = im.DoctorId";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                Login data = new Login();
                                data.UserName = dr["FirstName"].ToString();
                                if (dr["Designation"] != DBNull.Value)
                                {
                                    data.Role = dr["Designation"].ToString();
                                }
                                else
                                {
                                    data.Role = "";
                                }
                                data.SignatureImagePath = dr["PicturePath"].ToString();
                                data.RoleId = Convert.ToInt32(dr["PriorityOrder"]);
                                data.Id = Convert.ToInt32(dr["DoctorId"]);
                                signDetails.Add(data);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return signDetails;
            }
        }
        #endregion

        #region getSignDetailsForInv
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/getSignDetailsForInv")]
        [HttpGet]
        public List<Login> getSignDetailsForInv(string roleId)
        {
            List<Login> signDetails = new List<Login>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = " SELECT * from login where RoleId=" + roleId + "";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                Login data = new Login();
                                data.UserName = dr["UserName"].ToString();
                                if (dr["RoleId"] != DBNull.Value)
                                {
                                    data.Role = dr["RoleId"].ToString();
                                }
                                else
                                {
                                    data.Role = "";
                                }
                                data.SignatureImagePath = dr["SignatureImagePath"].ToString();
                                data.RoleId = 1;
                                data.Id = Convert.ToInt32(dr["Id"]);
                                signDetails.Add(data);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return signDetails;
            }
        }
        #endregion

        #region UploadSignatureImages
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns> 
        [Route("api/Account/UploadSignatureImages")]
        [HttpPost]
        public List<Login> UploadSignatureImages()
        {
            List<Login> lstSignatureImageforLogin = new List<Login>();
            try
            {
                int iUploadedCnt = 0;
                // DEFINE THE PATH WHERE WE WANT TO SAVE THE FILES.
                string physicalGrandparentPath = "";
                string filePath = "";
                //patho System path
                //  physicalGrandparentPath = @"C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/patho/css/images/Signs/";
                //local url           
                //physicalGrandparentPath = @"D:/pathosite/css/images/Signs/";
                physicalGrandparentPath = System.Configuration.ConfigurationManager.AppSettings["uplSignPath"];
                System.Web.HttpFileCollection hfc = System.Web.HttpContext.Current.Request.Files;
                // CHECK THE FILE COUNT.
                for (int iCnt = 1; iCnt <= hfc.Count - 1; iCnt++)
                {
                    System.Web.HttpPostedFile hpf = hfc[iCnt];
                    Login loginSignature = new Login();
                    if (hpf.ContentLength > 0)
                    {
                        filePath = physicalGrandparentPath + Path.GetFileName(hpf.FileName);

                        Image img = Image.FromStream(hpf.InputStream, true, true);
                        var ss = ("Width: " + img.Width + ", Height: " + img.Height);
                        decimal size = Math.Round(((decimal)hpf.ContentLength / (decimal)1024), 2);

                        int newwidthimg = 397;
                        int newHeight = 115;
                        float AspectRatio = (float)img.Size.Width / (float)img.Size.Height;
                        Bitmap bitMAP1 = new Bitmap(newwidthimg, newHeight);
                        Graphics imgGraph = Graphics.FromImage(bitMAP1);
                        var thumbnailImg = new Bitmap(newwidthimg, newHeight);
                        var thumbGraph = Graphics.FromImage(thumbnailImg);
                        thumbGraph.CompositingQuality = CompositingQuality.HighQuality;


                        thumbGraph.SmoothingMode = SmoothingMode.HighQuality;
                        thumbGraph.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        var imageRectangle = new Rectangle(0, 0, newwidthimg, newHeight);
                        thumbGraph.DrawImage(img, imageRectangle);

                        if (!File.Exists(physicalGrandparentPath + Path.GetFileName(hpf.FileName)))
                        {
                            // SAVE THE FILES IN THE FOLDER.                           
                            thumbnailImg.Save(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                            //hpf.SaveAs(physicalGrandparentPath + Path.GetFileName(hpf.FileName));

                            iUploadedCnt = iUploadedCnt = iUploadedCnt + 1;
                            loginSignature.SignatureImagePath = "/Signs/" + Path.GetFileName(hpf.FileName);
                            loginSignature.SignatureImageName = Path.GetFileName(hpf.FileName);
                            lstSignatureImageforLogin.Add(loginSignature);
                        }
                        else
                        {
                            File.Delete(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                            thumbnailImg.Save(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                            //hpf.SaveAs(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                            iUploadedCnt = iUploadedCnt = iUploadedCnt + 1;
                            loginSignature.SignatureImagePath = "/Signs/" + Path.GetFileName(hpf.FileName);
                            loginSignature.SignatureImageName = Path.GetFileName(hpf.FileName);
                            lstSignatureImageforLogin.Add(loginSignature);
                        }
                        bitMAP1.Dispose();
                        img.Dispose();

                        // }
                    }
                }

                // RETURN A MESSAGE (OPTIONAL).
                if (iUploadedCnt > 0)
                {
                    return lstSignatureImageforLogin;
                }
                else
                {
                    return lstSignatureImageforLogin;
                }
            }
            catch (Exception ex)
            {
                Login lstSignatureImageforError = new Login();
                lstSignatureImageforError.errorMsg = ex.Message;
                lstSignatureImageforLogin.Add(lstSignatureImageforError);
                return lstSignatureImageforLogin;
            }
        }
        private ImageCodecInfo GetEncoderInfo(ImageFormat format)
        {
            return ImageCodecInfo.GetImageDecoders().SingleOrDefault(c => c.FormatID == format.Guid);
        }
        #endregion

        #region uploadDoctPersonalInfo
        /// <summary>
        /// Table - doctorpersonalinfo
        /// </summary>
        [Route("api/Account/uploadDoctPersonalInfo")]
        [HttpPost]
        public int uploadDoctPersonalInfo(Doctor doctor)
        {
            int lastInsrtID = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from doctorpersonalinfo where DoctorId='" + doctor.DoctorId + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        string insertSQL = "insert into doctorpersonalinfo (FirstName,LastName,Gender,DOB,Age,UGDegree,UgUniver,PGDegree,PGUniver,College," +
                                           " OtherDegree,RegistNumber,Designation,DesigForReport,UserName) values(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9, " +
                                           " @val10,@val11,@val12,@val13,@val14,@val15);SELECT LAST_INSERT_ID()";

                        MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
                        insertCmd.Parameters.AddWithValue("@val1", doctor.FirstName);
                        insertCmd.Parameters.AddWithValue("@val2", doctor.LastName);
                        insertCmd.Parameters.AddWithValue("@val3", doctor.Gender);
                        insertCmd.Parameters.AddWithValue("@val4", doctor.DOB);
                        insertCmd.Parameters.AddWithValue("@val5", doctor.Age);
                        insertCmd.Parameters.AddWithValue("@val6", doctor.UGDegree);
                        insertCmd.Parameters.AddWithValue("@val7", doctor.UgUniver);
                        insertCmd.Parameters.AddWithValue("@val8", doctor.PGDegree);
                        insertCmd.Parameters.AddWithValue("@val9", doctor.PGUniver);
                        insertCmd.Parameters.AddWithValue("@val10", doctor.College);
                        insertCmd.Parameters.AddWithValue("@val11", doctor.OtherDegree);
                        insertCmd.Parameters.AddWithValue("@val12", doctor.RegistNumber);
                        insertCmd.Parameters.AddWithValue("@val13", doctor.Designation);
                        insertCmd.Parameters.AddWithValue("@val14", doctor.DesigForReport);
                        insertCmd.Parameters.AddWithValue("@val15", doctor.UserName);
                        insertCmd.CommandType = CommandType.Text;
                        //insertCmd.ExecuteNonQuery();
                        lastInsrtID = Convert.ToInt32(insertCmd.ExecuteScalar().ToString());
                    }
                    else
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                lastInsrtID = Convert.ToInt32(dr["DoctorId"].ToString());
                                string updSql = "Update doctorpersonalinfo set FirstName='" + doctor.FirstName + "',LastName='" + doctor.LastName + "',Gender='" + doctor.Gender + "'," +
                                                " DOB='" + doctor.DOB + "',Age='" + doctor.Age + "',UGDegree='" + doctor.UGDegree + "'," +
                                                " UgUniver='" + doctor.UgUniver + "',PGDegree='" + doctor.PGDegree + "',PGUniver='" + doctor.PGUniver + "',College='" + doctor.College + "'," +
                                                " OtherDegree='" + doctor.OtherDegree + "',RegistNumber='" + doctor.RegistNumber + "'," +
                                                " Designation='" + doctor.Designation + "',DesigForReport='" + doctor.DesigForReport + "',UserName='" + doctor.UserName + "' where DoctorId='" + doctor.DoctorId + "'";
                                MySqlCommand updCmd = new MySqlCommand(updSql, conn);
                                updCmd.CommandType = CommandType.Text;
                                updCmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
                return lastInsrtID;
            }
        }
        #endregion

        #region deleteUploadedInfo
        /// <summary>
        /// Table - doctorpersonalinfo
        /// </summary>
        [Route("api/Account/deleteUploadedInfo")]
        [HttpPost]
        public void deleteUploadedInfo(string insertedId)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "delete from doctorpersonalinfo where DoctorId='" + insertedId + "'";
                    conn.Open();
                    MySqlCommand insertCmd = new MySqlCommand(strSQL, conn);
                    insertCmd.CommandType = CommandType.Text;
                    insertCmd.ExecuteNonQuery();
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region insertPrintCount
        /// <summary>       
        /// </summary>
        [Route("api/Account/insertPrintCount")]
        [HttpPost]
        public void insertPrintCount(string mrdNo, string patientID)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from printsummary where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        //Getting the current UTC Time
                        DateTime UTCTime = System.DateTime.UtcNow;
                        //Adding the time difference 5.5 hours to the utc time
                        DateTime IndianTime = UTCTime.AddHours(5.5);
                        string insertSQL = "insert into printsummary (MrdNo,PatientID,LastPrintDate,PrintCount) values(@val1,@val2,@val3,@val4)";

                        MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
                        insertCmd.Parameters.AddWithValue("@val1", mrdNo);
                        insertCmd.Parameters.AddWithValue("@val2", patientID);
                        insertCmd.Parameters.AddWithValue("@val3", IndianTime);
                        insertCmd.Parameters.AddWithValue("@val4", 1);
                        insertCmd.CommandType = CommandType.Text;
                        insertCmd.ExecuteNonQuery();
                    }
                    else
                    {
                        //string maxstrSQL = "select max(PrintCount) as printCount from printsummary where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "' order by ID desc";
                        //conn.Open();
                        //MySqlDataAdapter maxdata = new MySqlDataAdapter(maxstrSQL, conn);
                        //MySqlCommandBuilder maxCmd = new MySqlCommandBuilder(maxdata);
                        //DataSet maxDs = new DataSet();
                        //DataTable maxDt = new DataTable();
                        //maxdata.Fill(maxDs);
                        //maxDt = maxDs.Tables[0];
                        //if (maxDt.Rows.Count > 0)
                        //{
                        //    if (((int)maxDt.Rows[0]["printCount"]) > 0)
                        //    {

                        //    }
                        //}
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                //Getting the current UTC Time
                                DateTime UTCTime = System.DateTime.UtcNow;
                                //Adding the time difference 5.5 hours to the utc time
                                DateTime IndianTime = UTCTime.AddHours(5.5);
                                string updSql = "Update printsummary set PrintCount=(" + dr["PrintCount"] + "+1),LastPrintDate='" + IndianTime + "' where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "'";
                                MySqlCommand updCmd = new MySqlCommand(updSql, conn);
                                updCmd.CommandType = CommandType.Text;
                                updCmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion
        #region insertEmailCount
        /// <summary>       
        /// </summary>
        [Route("api/Account/insertEmailCount")]
        [HttpPost]
        public void insertEmailCount(string mrdNo, string patientID)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from printsummary where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        //Getting the current UTC Time
                        DateTime UTCTime = System.DateTime.UtcNow;
                        //Adding the time difference 5.5 hours to the utc time
                        DateTime IndianTime = UTCTime.AddHours(5.5);
                        string insertSQL = "insert into printsummary (LastEmailDate,EmailCount) values(@val3,@val4) where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "'";

                        MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
                        //insertCmd.Parameters.AddWithValue("@val1", mrdNo);
                       // insertCmd.Parameters.AddWithValue("@val2", patientID);
                        insertCmd.Parameters.AddWithValue("@val3", IndianTime);
                        insertCmd.Parameters.AddWithValue("@val4", 1);
                        insertCmd.CommandType = CommandType.Text;
                        insertCmd.ExecuteNonQuery();
                    }
                    else
                    {
                        //string maxstrSQL = "select max(PrintCount) as printCount from printsummary where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "' order by ID desc";
                        //conn.Open();
                       // MySqlDataAdapter maxdata = new MySqlDataAdapter(maxstrSQL, conn);
                       // MySqlCommandBuilder maxCmd = new MySqlCommandBuilder(maxdata);
                       // DataSet maxDs = new DataSet();
                       // DataTable maxDt = new DataTable();
                       // maxdata.Fill(maxDs);
                       // maxDt = maxDs.Tables[0];
                       // if (maxDt.Rows.Count > 0)
                        //{
                           // if (((int)maxDt.Rows[0]["printCount"]) > 0)
                           // {

                            //}
                        //}
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                //Getting the current UTC Time
                                DateTime UTCTime = System.DateTime.UtcNow;
                                //Adding the time difference 5.5 hours to the utc time
                                DateTime IndianTime = UTCTime.AddHours(5.5);
                                string updSql = "Update printsummary set EmailCount=(" + dr["EmailCount"] + "+1),LastEmailDate='" + IndianTime+ "' where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "'";
                                MySqlCommand updCmd = new MySqlCommand(updSql, conn);
                                updCmd.CommandType = CommandType.Text;
                                updCmd.ExecuteNonQuery();
                            }
                        }
                   }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion
        #region exportDivContents
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        [Route("api/Account/exportDivContents")]
        [HttpPost]
        public void exportDivContents(object sender, EventArgs e)
        {



        }

        #endregion

        //added to preview sample report in the lab View
        #region getLabReportForPreview
        /// <summary>       
        /// <returns></returns>
        [Route("api/Account/getLabReportForPreview")]
        [HttpGet]
        public List<ResultLabTech> getLabReportForPreview(string mrdNo)
        {
            List<ResultLabTech> lstResultLabTech = new List<ResultLabTech>();
            DataTable dt = new DataTable();
            string mulTestCode = "";
            int mulTestCount = 0;
            int iniTestCount = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "";
                    strSQL = "create temporary table TestInfo as " +
                                " SELECT distinct rt.*,ch.AdditionalFixedComments as FixedComments,ch.Methodology as MethodologyName,sc.sampleName,convert('',char(50)) as MultiUnits,convert('',char(150)) as RptProfile " +
                                " ,convert('',char(5)) as OustSrced " +
                                " FROM  resultlabtest rt inner join childtestlist ch on rt.TestCode = ch.TestCode inner join samplecollecter sc on sc.MrdNo = rt.MrdNo" +
                                " and sc.TestCode = rt.TestCode where rt.MrdNo='" + mrdNo + "' and rt.ProfilePriority not in(2,3) and saveFlag = 1 " +
                                " order by MainProfilePriority,SubProfilePriority,TestPriority,PriorityStatus; " +
                                " update TestInfo AS TI left JOIN testmultiplecomponents AS CL ON CL.TestCode = TI.TestCode and CL.ElementName = TI.TestName and CL.ElementName is not null and TI.ProfilePriority=1 " +
                                " SET TI.MethodologyName = CL.Methodology,TI.MultiUnits=(case when CL.Units is not null then CL.Units else '' end) Where TI.ProfilePriority = 1;" +
                                " update TestInfo AS TI inner JOIN samplecollecter AS SC ON SC.TestCode = TI.TestCode and SC.MrdNo = TI.MrdNo SET TI.RptProfile = SC.ProfileName; " +
                                " update TestInfo AS TI inner JOIN childtestlist chd on TI.TestCode = chd.TestCode set TI.OustSrced=chd.Outsourced; " +
                                " select* from TestInfo; drop table TestInfo;";

                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    string repPregRefRange = "";
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            repPregRefRange = GetPregRefRange(dr["TestCode"].ToString(), mrdNo);

                            ResultLabTech resultLabTech = new ResultLabTech();
                            resultLabTech.resultlabtestID = Convert.ToInt32(dr["ResultLabId"].ToString());
                            resultLabTech.RegId = Convert.ToInt32(dr["RegId"]);
                            resultLabTech.MrdNo = dr["MrdNo"].ToString();

                            resultLabTech.DepartmentName = dr["DepartmentName"].ToString();
                            resultLabTech.Result = dr["Result"].ToString();
                            resultLabTech.DisplayDeptName = "";
                            resultLabTech.DisplayProfileName = "";
                            resultLabTech.DisplayMultiTestName = "";
                            resultLabTech.TestType = dr["ProfilePriority"].ToString();

                            if (dr["DepartmentID"] != DBNull.Value)
                            {
                                resultLabTech.DepartmentID = Convert.ToInt32(dr["DepartmentID"]);
                            }
                            else
                            {
                                resultLabTech.DepartmentID = 0;
                            }
                            if (dr["RptProfile"] != DBNull.Value)
                            {
                                resultLabTech.ProfileName = dr["RptProfile"].ToString();
                                //resultLabTech.TestName = dr["ProfileName"].ToString().Split('-')[1] + '/' + dr["TestName"].ToString();
                                resultLabTech.TestName = dr["TestName"].ToString();
                            }
                            else
                            {
                                resultLabTech.ProfileName = "";
                                resultLabTech.TestName = dr["TestName"].ToString();
                            }
                            if (resultLabTech.TestType == "1")
                            {
                                if (dr["ProfileName"] != DBNull.Value)
                                {
                                    if (dr["ProfileName"].ToString().Contains('-'))
                                    {
                                        resultLabTech.MultiTestName = (dr["ProfileName"].ToString()).Substring(dr["ProfileName"].ToString().IndexOf('-') + 1);
                                    }
                                }
                                else { resultLabTech.MultiTestName = ""; }
                                //resultLabTech.MultiTestName = dr["ProfileName"].ToString().Split('-')[1];
                            }
                            resultLabTech.NormalValues = dr["DefaultValues"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            if (dr["Units"] != DBNull.Value)
                            {
                                resultLabTech.Units = dr["Units"].ToString();
                            }
                            else if (dr["MultiUnits"] != DBNull.Value)
                            {
                                if (dr["MultiUnits"].ToString() == "0000000")
                                {
                                    resultLabTech.Units = "";
                                }
                                else
                                {
                                    resultLabTech.Units = dr["MultiUnits"].ToString();
                                }
                            }
                            resultLabTech.Comment = dr["Comment1"].ToString();
                            resultLabTech.Comment2 = dr["Comment2"].ToString();
                            resultLabTech.SpecialComments = dr["SpecialComments"].ToString();
                            resultLabTech.EndRange = dr["EndRange"].ToString();
                            resultLabTech.StartRange = dr["StartRange"].ToString();
                            resultLabTech.TestCode = dr["TestCode"].ToString();
                            if (resultLabTech.TestType == "1")
                            {
                                if (mulTestCode != dr["TestCode"].ToString())
                                {
                                    mulTestCount = iniTestCount + 1;
                                    mulTestCode = dr["TestCode"].ToString();
                                }
                                else
                                {
                                    mulTestCount = mulTestCount + 1;
                                }
                                resultLabTech.mulTestCount = mulTestCount;
                                resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
                            }
                            else
                            {
                                resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
                            }
                            //resultLabTech.AdditionalFixedComments = dr["FixedComments"].ToString();
                            resultLabTech.Methodology = dr["MethodologyName"].ToString();
                            resultLabTech.CriticalValue = dr["CriticalValue"].ToString();
                            resultLabTech.SampleContainer = dr["SampleContainer"].ToString();
                            resultLabTech.SampleName = dr["sampleName"].ToString();
                            resultLabTech.FreeText = dr["FreeText"].ToString();
                            resultLabTech.NormalValuesFiled = dr["NormalValuesFiled"].ToString();
                            if (repPregRefRange != "")
                            {
                                resultLabTech.DisplayValueText = repPregRefRange;
                            }
                            else
                            {
                                if ((dr["DisplayValueText"] == DBNull.Value) && ((dr["FreeText"] == DBNull.Value)))
                                {
                                    resultLabTech.DisplayValueText = dr["NormalValuesFiled"].ToString();
                                }
                                else
                                {
                                    resultLabTech.DisplayValueText = dr["DisplayValueText"].ToString();
                                }
                            }
                            resultLabTech.Status = (int)dr["Status"];
                            resultLabTech.PatientID = (dr["PatientID"]).ToString();
                            resultLabTech.TestPriority = Convert.ToInt32(dr["TestPriority"]);
                            resultLabTech.ProfilePriority = Convert.ToInt32(dr["MainProfilePriority"]);
                            resultLabTech.SubProfilePriority = Convert.ToInt32(dr["SubProfilePriority"]);
                            resultLabTech.PriorityStatus = Convert.ToInt32(dr["PriorityStatus"]);
                            resultLabTech.PregRefRange = repPregRefRange;
                            resultLabTech.OustSrced = dr["OustSrced"].ToString();
                            bool normalValue;
                            string crictical = "false";
                            if ((resultLabTech.NormalValuesFiled.Contains(',')) && (resultLabTech.NormalValuesFiled != ""))
                            {
                                normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled.Split(',')[0], "^[a-zA-Z]+$");
                            }
                            else if ((resultLabTech.NormalValuesFiled.Contains(' ')) && (resultLabTech.NormalValuesFiled != ""))
                            {
                                normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled.Split(' ')[0], "^[a-zA-Z]+$");
                            }
                            else
                            {
                                normalValue = System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.NormalValuesFiled, "^[a-zA-Z]+$");
                            }
                            if (resultLabTech.NormalValuesFiled != null && resultLabTech.NormalValuesFiled != "" && resultLabTech.NormalValuesFiled != "undefined-undefined" && !normalValue)
                            {
                                if (resultLabTech.NormalValuesFiled != "")
                                {
                                    string[] NormalValuesFiled = resultLabTech.NormalValuesFiled.Split('-');
                                    double low = Convert.ToDouble(NormalValuesFiled[0]);

                                    if (NormalValuesFiled[1].Contains(':'))
                                    {
                                        string[] checkField = NormalValuesFiled[1].Split(':');
                                        string[] checkResult;
                                        if (resultLabTech.Result.Contains(':'))
                                        {
                                            checkResult = resultLabTech.Result.Split(':');
                                            if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[1]) <= (Convert.ToDouble(checkField[1]))))
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                        else if (resultLabTech.Result.Contains("'"))
                                        {
                                            var replaceText = resultLabTech.Result.Replace("'", ",");
                                            checkResult = replaceText.Split(',');
                                            if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[1]) <= (Convert.ToDouble(checkField[1]))))
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        double high = Convert.ToDouble(NormalValuesFiled[1]);
                                        double result = 0;
                                        string[] checkResult;
                                        if (resultLabTech.Result.Contains('-'))
                                        {
                                            crictical = "";
                                        }
                                        else if (System.Text.RegularExpressions.Regex.IsMatch(resultLabTech.Result, "^[a-zA-Z]+$"))
                                        {
                                            crictical = "";
                                        }
                                        else if (resultLabTech.Result.Contains("'"))
                                        {
                                            var replaceText = resultLabTech.Result.Replace("'", ",");
                                            checkResult = replaceText.Split(',');
                                            if ((Convert.ToDouble(checkResult[0]) >= low) && (Convert.ToDouble(checkResult[0]) <= (Convert.ToDouble(high))))
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                        else if (resultLabTech.Result != "")
                                        {
                                            result = Convert.ToDouble(resultLabTech.Result);
                                            if (result >= low && result <= high)
                                            {
                                                crictical = "false";
                                            }
                                            else
                                            {
                                                crictical = "true";
                                            }
                                        }
                                        else { crictical = ""; }
                                    }

                                    resultLabTech.CricticalResult = crictical;
                                }
                                else
                                {
                                    crictical = "false";
                                    resultLabTech.CricticalResult = crictical;
                                }
                            }
                            else
                            {
                                resultLabTech.CricticalResult = crictical;
                            }
                            lstResultLabTech.Add(resultLabTech);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstResultLabTech;
            }
        }
        #endregion

        #region checkInvNumber
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/checkInvNumber")]
        [HttpPost]
        public string checkInvNumber(string invoiceType, string invoiceFrom, string invoiceTo, string clientCode, int rptFlag, string genInvNo, int deleteFlag)
        {
            List<InvoiceView> invDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                conn.Open();
                string invNumber = "";
                try
                {
                    if (invoiceFrom != null && invoiceTo != null)
                    {
                        DateTime fromDate = DateTime.Parse(invoiceFrom);
                        //    DateTime origDT = Convert.ToDateTime("2020-04-30");
                        var minPos = invoiceTo.LastIndexOf('-');
                        var exDate = Convert.ToInt32(invoiceTo.Substring(minPos + 1));
                        DateTime lastDate = new DateTime();
                        if (exDate > 15)
                        {
                            lastDate = new DateTime(fromDate.Year, fromDate.Month, 1).AddMonths(1).AddDays(-1);
                        }
                        else
                        {
                            lastDate = DateTime.Parse(invoiceTo);
                        }
                        DateTime toDate = lastDate;
                        // DateTime toDate = DateTime.Parse(invoiceTo);
                        
                        if (genInvNo == "mont")
                        {
                            invoiceFrom = fromDate.ToString("yyyy-MM-dd");
                            invoiceTo = toDate.ToString("yyyy-MM-dd");
                        }
                        else
                        {
                            invoiceFrom = fromDate.ToString("yyyy-MM-dd");
                            invoiceTo = toDate.ToString("yyyy-MM-dd");
                        }
                    }
                    if (deleteFlag == 0)
                    {
                        #region tocheckinvoice
                        string chkRecord = "";
                        if (genInvNo == "mont")
                        {
                            chkRecord = "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                                         " and INVDateFrom = '" + invoiceFrom + "' " +
                                         " union " +
                                         "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                                         " and INVDateTo='" + invoiceTo + "' ";
                        }
                        else
                        {
                            chkRecord = "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                                         " and INVDateFrom = '" + invoiceFrom + "' and INVDateTo='" + invoiceTo + "' " +
                                         " union " +
                                         "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                                         " and INVDateTo='" + invoiceTo + "' " +
                                         " union " +
                                         "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                                         " and INVDateFrom='" + invoiceFrom + "' ";

                            //chkRecord = "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                            //              " and INVDateFrom = '" + invoiceFrom + "' and INVDateTo='" + invoiceTo + "' ";
                        }
                        MySqlDataAdapter chkDta = new MySqlDataAdapter(chkRecord, conn);
                        MySqlCommandBuilder chkcmd = new MySqlCommandBuilder(chkDta);
                        DataSet chkDs = new DataSet();
                        DataTable chkDt = new DataTable();
                        chkDta.Fill(chkDs);
                        chkDt = chkDs.Tables[0];
                        if (chkDt.Rows.Count == 0)
                        {
                            invNumber = "failure";
                        }
                        else
                        {
                            invNumber = "success";
                        }
                        #endregion tocheckinvoice
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invNumber;
            }
        }
        #endregion

        #region generateInvoice
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/generateInvoice")]
        [HttpPost]
        public string generateInvoice(string invoiceType, string invoiceFrom, string invoiceTo, string clientCode, int rptFlag, string genInvNo, int deleteFlag)
        {
            List<InvoiceView> invDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {

                conn.Open();
                var invNumber = "";
                string strSQL = "";
                var invoiceNo = "";
                try
                {
                    if (invoiceFrom != null && invoiceTo != null)
                    {
                        DateTime fromDate = DateTime.Parse(invoiceFrom);
                        //DateTime toDate = DateTime.Parse(invoiceTo);
                        var minPos = invoiceTo.LastIndexOf('-');
                        var exDate = Convert.ToInt32(invoiceTo.Substring(minPos + 1));
                        DateTime lastDate = new DateTime();
                        if (exDate > 15)
                        {
                            lastDate = new DateTime(fromDate.Year, fromDate.Month, 1).AddMonths(1).AddDays(-1);
                        }
                        else
                        {
                            lastDate = DateTime.Parse(invoiceTo);
                        }
                        DateTime toDate = lastDate;
                        invoiceFrom = fromDate.ToString("yyyy-MM-dd");
                        invoiceTo = toDate.ToString("yyyy-MM-dd");

                    }
                    if (deleteFlag == 0)
                    {
                        if (rptFlag == 888)
                        {
                            #region getInvoiceno
                            string chkRecord = "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                                             " and INVDateFrom = '" + invoiceFrom + "' and INVDateTo='" + invoiceTo + "' ";
                            MySqlDataAdapter chkDta = new MySqlDataAdapter(chkRecord, conn);
                            MySqlCommandBuilder chkcmd = new MySqlCommandBuilder(chkDta);
                            DataSet chkDs = new DataSet();
                            DataTable chkDt = new DataTable();
                            chkDta.Fill(chkDs);
                            chkDt = chkDs.Tables[0];
                            if (chkDt.Rows.Count == 0)
                            {
                                invNumber = "";
                            }
                            else
                            {
                                invNumber = chkDt.Rows[0]["INVNumber"].ToString();
                            }
                            #endregion getInvoiceno
                        }
                        else
                        {
                            #region togenerateinvoice
                            strSQL = "select INVNumber from daterangeinvoice order by InvID desc limit 1";
                            MySqlDataAdapter sadp = new MySqlDataAdapter(strSQL, conn);
                            MySqlCommandBuilder scmd = new MySqlCommandBuilder(sadp);
                            DataSet sda = new DataSet();
                            DataTable sdt = new DataTable();
                            sadp.Fill(sda);
                            sdt = sda.Tables[0];
                            if (sdt.Rows.Count > 0)
                            {
                                invoiceNo = sdt.Rows[0]["INVNumber"].ToString();
                            }
                            else { invoiceNo = ""; }

                            string chkRecord = "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and RptStatus=1 " +
                                               " and INVDateFrom = '" + invoiceFrom + "' and INVDateTo='" + invoiceTo + "' ";
                            MySqlDataAdapter chkDta = new MySqlDataAdapter(chkRecord, conn);
                            MySqlCommandBuilder chkcmd = new MySqlCommandBuilder(chkDta);
                            DataSet chkDs = new DataSet();
                            DataTable chkDt = new DataTable();
                            chkDta.Fill(chkDs);
                            chkDt = chkDs.Tables[0];
                            if (chkDt.Rows.Count == 0)
                            {
                                var year = DateTime.Now.Year;
                                var month = DateTime.Now.Month.ToString();
                                string invYear = year.ToString();
                                string invMonth = month.ToString();

                                if (invoiceNo == "")
                                {
                                    invNumber = invYear + "/" + invMonth + "/INV-" + 1;
                                }
                                else
                                {
                                    var autoNo = Convert.ToInt32(invoiceNo.Split('-')[1].ToString()) + 1;
                                    invNumber = invYear + "/" + invMonth + "/INV-" + autoNo;
                                }
                                string insQuery = "insert into daterangeinvoice (INVNumber,INVDateFrom,INVDateTo,ClientCode,INVType,CreatedDate,ModifiedDate,RptStatus)" +
                                                  " values (@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8) ";
                                MySqlCommand insertCmd = new MySqlCommand(insQuery, conn);
                                insertCmd.Parameters.AddWithValue("@val1", invNumber);
                                insertCmd.Parameters.AddWithValue("@val2", invoiceFrom);
                                insertCmd.Parameters.AddWithValue("@val3", invoiceTo);
                                insertCmd.Parameters.AddWithValue("@val4", clientCode);
                                insertCmd.Parameters.AddWithValue("@val5", invoiceType);
                                insertCmd.Parameters.AddWithValue("@val6", DateTime.Now.ToString("MM/dd/yyyy hh:mm tt"));
                                insertCmd.Parameters.AddWithValue("@val7", "");
                                insertCmd.Parameters.AddWithValue("@val8", 1);
                                insertCmd.CommandType = CommandType.Text;
                                insertCmd.ExecuteNonQuery();
                            }
                            else
                            {
                                invNumber = chkDt.Rows[0]["INVNumber"].ToString();
                            }
                            #endregion togenerateinvoice
                        }
                    }
                    else if (deleteFlag == 1)
                    {
                        #region deleteinvoice
                        string delRecord = "SELECT * from daterangeinvoice where ClientCode = '" + clientCode + "' and INVNumber ='" + genInvNo + "' ";
                        MySqlDataAdapter delDta = new MySqlDataAdapter(delRecord, conn);
                        MySqlCommandBuilder delcmd = new MySqlCommandBuilder(delDta);
                        DataSet delDs = new DataSet();
                        DataTable delDt = new DataTable();
                        delDta.Fill(delDs);
                        delDt = delDs.Tables[0];
                        if (delDt.Rows.Count > 0)
                        {
                            string updSQL = "delete from daterangeinvoice where InvID='" + delDt.Rows[0]["InvID"].ToString() + "' ";
                            MySqlCommand updcmd = new MySqlCommand(updSQL, conn);
                            updcmd.CommandType = CommandType.Text;
                            updcmd.ExecuteNonQuery();
                        }

                        #endregion deleteinvoice
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invNumber;
            }
        }
        #endregion

        #region loadInvoiceDetails
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/loadInvoiceDetails")]
        [HttpGet]
        public List<InvoiceView> loadInvoiceDetails(string invoiceType, string invoiceFrom, string invoiceTo, string clientCode, int rptFlag, string genInvNo, int deleteFlag)
        {
            List<InvoiceView> invDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    string consSQL = " SELECT inv.*,lor.ProviderID,lor.ReferredBy,lor.CollectAt,lor.HomeCollectChargeAmount from invoice inv " +
                                            " inner join labOrder  lor on inv.RegID=lor.RegID and inv.MrdNo=lor.MrdNo ";

                    if (invoiceFrom != null && invoiceTo != null)
                    {
                        var minPos = invoiceTo.LastIndexOf('-');
                        var exDate = Convert.ToInt32(invoiceTo.Substring(minPos+ 1));
                        DateTime fromDate = DateTime.Parse(invoiceFrom);
                        DateTime lastDate = new DateTime();
                        if (exDate > 15)
                        {
                            lastDate = new DateTime(fromDate.Year, fromDate.Month, 1).AddMonths(1).AddDays(-1);                            
                        }
                        else
                        {
                            lastDate = DateTime.Parse(invoiceTo);
                        }
                        //DateTime toDate = DateTime.Parse(invoiceTo);
                        DateTime toDate = lastDate;
                        invoiceFrom = fromDate.ToString("yyyy-MM-dd");
                        invoiceTo = toDate.ToString("yyyy-MM-dd");

                        if (invoiceType == "All Invoice")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                           " where inv.InvoiceDate " +
                                           " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                                   " where inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";

                            }
                        }
                        else if (invoiceType == "Group")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                            " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else
                            {
                                if (genInvNo == "mont")
                                {
                                    strSQL = consSQL +
                                               " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                               " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                            }
                        }
                        else
                        {
                            if (rptFlag == 1)//for ind invoice
                            {
                                strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else if (rptFlag == 2)//for range invoice
                            {
                                if (genInvNo == "mont")
                                {
                                    strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                               " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (invoiceType == "All Invoice")
                        {
                            strSQL = consSQL;
                        }
                        else if (invoiceType == "Group")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                            }
                        }
                        else
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action='" + invoiceType + "' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                            " where inv.Action='" + invoiceType + "' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                            }
                        }
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        if (rptFlag == 1)
                        {
                            #region forIndividualReport
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    InvoiceView data = new InvoiceView();
                                    data.Id = Convert.ToInt32(dr["Id"].ToString());
                                    data.RegID = dr["RegID"].ToString();
                                    data.InvoiceNo = dr["InvoiceNo"].ToString();
                                    data.MrdNo = dr["MrdNo"].ToString();
                                    data.PatientName = dr["PatientName"].ToString();
                                    data.Amount = dr["Amount"].ToString();
                                    data.Discount = dr["Discount"].ToString();
                                    if ((dr["PaidAmount"] == DBNull.Value) || (dr["PaidAmount"] == null))
                                    {
                                        data.NetAmount = (dr["Amount"].ToString());
                                    }
                                    else
                                    {
                                        var calAmount="";
                                        if (dr["Amount"]!=DBNull.Value)
                                        {
                                            calAmount = Convert.ToInt32(dr["Amount"]).ToString();
                                           
                                        }
                                        else
                                        {
                                           calAmount = "0";
                                          
                                        }
                                        data.NetAmount = (Convert.ToInt32(calAmount) - Convert.ToInt32(dr["PaidAmount"].ToString())).ToString();
                                    }

                                    data.PaidAmount = dr["PaidAmount"].ToString();
                                    data.InvoiceDate = dr["InvoiceDate"].ToString();
                                    DateTime chgDate = Convert.ToDateTime(dr["InvoiceDate"].ToString());
                                    data.CreatedDate=chgDate.ToString("dd-MM-yyyy");
                                    data.Action = dr["Action"].ToString();
                                    data.PaymentType = dr["PaymentType"].ToString();
                                    data.Status = dr["Status"].ToString();
                                    data.ProviderHostName = dr["ProviderHostName"].ToString();
                                    if (dr["ProviderID"] != DBNull.Value)
                                    {
                                        data.ProviderID = dr["ProviderID"].ToString();
                                    }
                                    else
                                    {
                                        data.ProviderID = "";
                                    }
                                    data.ReferredBy = dr["ReferredBy"].ToString();
                                    data.CollectionCharge = Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                    invDetails.Add(data);
                                }
                            }
                            #endregion forIndividualReport
                        }
                        else if (rptFlag == 2)
                        {
                            #region fordaterangeReport
                            var inchkDate = "";
                            var invchkMrdno = "";
                            var sampCount = 0;
                            double allDisc = 0;
                            double calRslt = 0;
                            double sumGrossAmount = 0;
                            int rowCount = 0;
                            int totRowCount = 0;
                            foreach (DataRow dr in dt.Rows)
                            {

                                if (dr != null)
                                {
                                    string sampleSQL = "create temporary table  TestInfo As" +
                                    " SELECT *,'0000000' GrossTotal,'0000000' NetTotal,'0000' TotalSample FROM commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'; " +
                                    " update TestInfo AS TI set TI.GrossTotal=( " +
                                    " SELECT sum(Amount) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'); " +
                                    " update TestInfo AS TI set TI.NetTotal=( " +
                                    " SELECT sum(NetAmount) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'); " +
                                    " update TestInfo AS TI set TI.TotalSample=( " +
                                    " SELECT Count(*) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "');" +
                                    " select * from TestInfo; " +
                                    " Drop table TestInfo;";
                                    MySqlDataAdapter samData = new MySqlDataAdapter(sampleSQL, conn);
                                    MySqlCommandBuilder samCmd = new MySqlCommandBuilder(samData);
                                    DataSet samDs = new DataSet();
                                    DataTable samDt = new DataTable();
                                    samData.Fill(samDs);
                                    samDt = samDs.Tables[0];
                                    if (samDt.Rows.Count > 0)
                                    {
                                        foreach (DataRow samDr in samDt.Rows)
                                        {
                                            InvoiceView sampleList = new InvoiceView();
                                            sampleList.RegID = dr["RegID"].ToString();
                                            sampleList.InvoiceNo = dr["InvoiceNo"].ToString();
                                            sampleList.MrdNo = dr["MrdNo"].ToString();
                                            sampleList.PatientName = dr["PatientName"].ToString();

                                            sampleList.Code = samDr["Code"].ToString();
                                            sampleList.Description = samDr["Description"].ToString();
                                            sampleList.GrossTotal = Convert.ToInt32(samDr["GrossTotal"].ToString());
                                            sampleList.Amount = samDr["Amount"].ToString();


                                            sampleList.NetAmount = samDr["NetAmount"].ToString();
                                            sampleList.NetTotal = Convert.ToDouble(samDr["NetTotal"].ToString());

                                            sampleList.PaidAmount = dr["PaidAmount"].ToString();
                                            sampleList.InvoiceDate = dr["InvoiceDate"].ToString();
                                            DateTime chgDate = Convert.ToDateTime(dr["InvoiceDate"].ToString());
                                            sampleList.CreatedDate = chgDate.ToString("dd-MM-yyyy");
                                            sampleList.Action = dr["Action"].ToString();
                                            sampleList.PaymentType = dr["PaymentType"].ToString();
                                            sampleList.Status = dr["Status"].ToString();
                                            sampleList.ProviderHostName = dr["ProviderHostName"].ToString();
                                            if (dr["ProviderID"] != DBNull.Value)
                                            {
                                                sampleList.ProviderID = dr["ProviderID"].ToString();
                                            }
                                            else
                                            {
                                                sampleList.ProviderID = "";
                                            }
                                            sampleList.ReferredBy = dr["ReferredBy"].ToString();
                                            sampleList.CollectionCharge = Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());

                                            if ((inchkDate != dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                                            {
                                                sampCount = 1;
                                                inchkDate = dr["InvoiceDate"].ToString();
                                                invchkMrdno = dr["MrdNo"].ToString();
                                                if (Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString()) > 0)
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString()) +
                                                        Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                                }
                                                else
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString());
                                                }
                                                rowCount = rowCount + 1;
                                                allDisc = 0;
                                            }
                                            else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                                            {
                                                sampCount = 1;
                                                inchkDate = dr["InvoiceDate"].ToString();
                                                invchkMrdno = dr["MrdNo"].ToString();
                                                allDisc = 0;
                                                if (Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString()) > 0)
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString()) +
                                                        Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                                }
                                                else
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString());
                                                }
                                                rowCount = rowCount + 1;
                                            }
                                            else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno == dr["MrdNo"].ToString()))
                                            {
                                                sampCount = sampCount + 1;
                                                inchkDate = dr["InvoiceDate"].ToString();
                                                invchkMrdno = dr["MrdNo"].ToString();
                                                sumGrossAmount = sumGrossAmount + 0;
                                                rowCount = rowCount + 1;
                                            }
                                            sampleList.SampleCount = sampCount;
                                            if (samDr["Discount"] == DBNull.Value)
                                            {
                                                allDisc = allDisc + calRslt;
                                            }
                                            else
                                            {
                                                if (Convert.ToDouble(samDr["Discount"]) > 0)
                                                {
                                                    calRslt = (Convert.ToDouble(samDr["Amount"]) * Convert.ToDouble(samDr["Discount"])) / 100;
                                                    allDisc = allDisc + calRslt;
                                                }
                                                else
                                                {
                                                    calRslt = Convert.ToDouble(samDr["Discount"]);
                                                    allDisc = allDisc + calRslt;
                                                }
                                            }
                                            totRowCount = totRowCount + rowCount;
                                            sampleList.Discount = calRslt.ToString();
                                            sampleList.GrossDisCount = allDisc;
                                            sampleList.TotSampleCount = Convert.ToInt32(samDr["TotalSample"].ToString());
                                            sampleList.TotalGrossAmount = sumGrossAmount;
                                            sampleList.totsampForRange = rowCount;
                                            sampleList.chksampForRange = rowCount;
                                            invDetails.Add(sampleList);
                                        }
                                    }
                                    //string updInvStatus = "update invoice set InvoiceRptStatus=1 where Id='" + dr["Id"] + "' ";
                                    //MySqlCommand updcmd = new MySqlCommand(updInvStatus, conn);
                                    //updcmd.CommandType = CommandType.Text;
                                    //updcmd.ExecuteNonQuery();
                                }
                            }
                            #endregion fordaterangeReport
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invDetails;
            }
        }
        #endregion

        #region loadInvoiceDetailsNew
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/loadInvoiceDetailsNew")]
        [HttpGet]
        public List<InvoiceView> loadInvoiceDetailsNew(string invoiceType, string invoiceFrom, string invoiceTo, string clientCode, int rptFlag, string genInvNo, int deleteFlag)
        {
            List<InvoiceView> invDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    string consSQL = " SELECT inv.*,lor.ProviderID,lor.ReferredBy,lor.CollectAt,lor.HomeCollectChargeAmount from invoice inv " +
                                            " inner join labOrder  lor on inv.RegID=lor.RegID and inv.MrdNo=lor.MrdNo ";

                    if (invoiceFrom != null && invoiceTo != null)
                    {
                        DateTime fromDate = DateTime.Parse(invoiceFrom);
                        //DateTime toDate = DateTime.Parse(invoiceTo);
                        //DateTime lastDate = new DateTime(fromDate.Year, fromDate.Month, 1).AddMonths(1).AddDays(-1);
                        var minPos = invoiceTo.LastIndexOf('-');
                        var exDate = Convert.ToInt32(invoiceTo.Substring(minPos + 1));                        
                        DateTime lastDate = new DateTime();
                        if (exDate > 15)
                        {
                            lastDate = new DateTime(fromDate.Year, fromDate.Month, 1).AddMonths(1).AddDays(-1);
                        }
                        else
                        {
                            lastDate = DateTime.Parse(invoiceTo);
                        }
                        DateTime toDate = lastDate;
                        
                        invoiceFrom = fromDate.ToString("yyyy-MM-dd");
                        invoiceTo = toDate.ToString("yyyy-MM-dd");

                        if (invoiceType == "All Invoice")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                           " where inv.InvoiceDate " +
                                           " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                                   " where inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                            }
                        }
                        else if (invoiceType == "Group")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                            " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else
                            {
                                if (genInvNo == "mont")
                                {
                                    strSQL = consSQL +
                                               " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "'";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                               " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                            }
                        }
                        else
                        {
                            if (rptFlag == 1)//for ind invoice
                            {
                                strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else if (rptFlag == 2)//for range invoice
                            {
                                if (genInvNo == "mont")
                                {
                                    strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "'";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                               " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (invoiceType == "All Invoice")
                        {
                            strSQL = consSQL;
                        }
                        else if (invoiceType == "Group")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                            }
                        }
                        else
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action='" + invoiceType + "' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                            " where inv.Action='" + invoiceType + "' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                            }
                        }
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        if (rptFlag == 1)
                        {
                            #region forIndividualReport
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (dr != null)
                                {
                                    InvoiceView data = new InvoiceView();
                                    data.Id = Convert.ToInt32(dr["Id"].ToString());
                                    data.RegID = dr["RegID"].ToString();
                                    data.InvoiceNo = dr["InvoiceNo"].ToString();
                                    data.MrdNo = dr["MrdNo"].ToString();
                                    data.PatientName = dr["PatientName"].ToString();
                                    data.Amount = dr["Amount"].ToString();
                                    data.Discount = dr["Discount"].ToString();
                                    if ((dr["PaidAmount"] == DBNull.Value) || (dr["PaidAmount"] == null))
                                    {
                                        data.NetAmount = (dr["Amount"].ToString());
                                    }
                                    else
                                    {
                                        data.NetAmount = (Convert.ToInt32(dr["Amount"]) - Convert.ToInt32(dr["PaidAmount"].ToString())).ToString();
                                    }

                                    data.PaidAmount = dr["PaidAmount"].ToString();
                                    data.InvoiceDate = dr["InvoiceDate"].ToString();
                                    data.Action = dr["Action"].ToString();
                                    data.PaymentType = dr["PaymentType"].ToString();
                                    data.Status = dr["Status"].ToString();
                                    data.ProviderHostName = dr["ProviderHostName"].ToString();
                                    if (dr["ProviderID"] != DBNull.Value)
                                    {
                                        data.ProviderID = dr["ProviderID"].ToString();
                                    }
                                    else
                                    {
                                        data.ProviderID = "";
                                    }
                                    data.ReferredBy = dr["ReferredBy"].ToString();
                                    data.CollectionCharge = Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                    invDetails.Add(data);
                                }
                            }
                            #endregion forIndividualReport
                        }
                        else if (rptFlag == 2)
                        {
                            #region fordaterangeReport
                            var inchkDate = "";
                            var invchkMrdno = "";
                            var sampCount = 0;
                            double allDisc = 0;
                            double calRslt = 0;
                            double sumGrossAmount = 0;
                            int rowCount = 0;
                            int totRowCount = 0;
                            foreach (DataRow dr in dt.Rows)
                            {

                                if (dr != null)
                                {
                                    string sampleSQL = "create temporary table  TestInfo As" +
                                    " SELECT *,'0000000' GrossTotal,'0000000' NetTotal,'0000' TotalSample FROM commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'; " +
                                    " update TestInfo AS TI set TI.GrossTotal=( " +
                                    " SELECT sum(Amount) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'); " +
                                    " update TestInfo AS TI set TI.NetTotal=( " +
                                    " SELECT sum(NetAmount) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'); " +
                                    " update TestInfo AS TI set TI.TotalSample=( " +
                                    " SELECT Count(*) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "');" +
                                    " select * from TestInfo; " +
                                    " Drop table TestInfo;";
                                    MySqlDataAdapter samData = new MySqlDataAdapter(sampleSQL, conn);
                                    MySqlCommandBuilder samCmd = new MySqlCommandBuilder(samData);
                                    DataSet samDs = new DataSet();
                                    DataTable samDt = new DataTable();
                                    samData.Fill(samDs);
                                    samDt = samDs.Tables[0];
                                    if (samDt.Rows.Count > 0)
                                    {
                                        foreach (DataRow samDr in samDt.Rows)
                                        {
                                            InvoiceView sampleList = new InvoiceView();
                                            sampleList.RegID = dr["RegID"].ToString();
                                            sampleList.InvoiceNo = dr["InvoiceNo"].ToString();
                                            sampleList.MrdNo = dr["MrdNo"].ToString();
                                            sampleList.PatientName = dr["PatientName"].ToString();

                                            sampleList.Code = samDr["Code"].ToString();
                                            sampleList.Description = samDr["Description"].ToString();
                                            sampleList.GrossTotal = Convert.ToInt32(samDr["GrossTotal"].ToString());
                                            sampleList.Amount = samDr["Amount"].ToString();


                                            sampleList.NetAmount = samDr["NetAmount"].ToString();
                                            sampleList.NetTotal = Convert.ToDouble(samDr["NetTotal"].ToString());

                                            sampleList.PaidAmount = dr["PaidAmount"].ToString();
                                            sampleList.InvoiceDate = dr["InvoiceDate"].ToString();
                                            sampleList.Action = dr["Action"].ToString();
                                            sampleList.PaymentType = dr["PaymentType"].ToString();
                                            sampleList.Status = dr["Status"].ToString();
                                            sampleList.ProviderHostName = dr["ProviderHostName"].ToString();
                                            if (dr["ProviderID"] != DBNull.Value)
                                            {
                                                sampleList.ProviderID = dr["ProviderID"].ToString();
                                            }
                                            else
                                            {
                                                sampleList.ProviderID = "";
                                            }
                                            sampleList.ReferredBy = dr["ReferredBy"].ToString();
                                            sampleList.CollectionCharge = Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());

                                            if ((inchkDate != dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                                            {
                                                sampCount = 1;
                                                inchkDate = dr["InvoiceDate"].ToString();
                                                invchkMrdno = dr["MrdNo"].ToString();
                                                if (Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString()) > 0)
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString()) +
                                                        Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                                }
                                                else
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString());
                                                }
                                                rowCount = rowCount + 1;
                                                allDisc = 0;
                                            }
                                            else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                                            {
                                                sampCount = 1;
                                                inchkDate = dr["InvoiceDate"].ToString();
                                                invchkMrdno = dr["MrdNo"].ToString();
                                                allDisc = 0;
                                                if (Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString()) > 0)
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString()) +
                                                        Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                                }
                                                else
                                                {
                                                    sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString());
                                                }
                                                rowCount = rowCount + 1;
                                            }
                                            else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno == dr["MrdNo"].ToString()))
                                            {
                                                sampCount = sampCount + 1;
                                                inchkDate = dr["InvoiceDate"].ToString();
                                                invchkMrdno = dr["MrdNo"].ToString();
                                                sumGrossAmount = sumGrossAmount + 0;
                                                rowCount = rowCount + 1;
                                            }
                                            sampleList.SampleCount = sampCount;
                                            if (Convert.ToInt32(samDr["Discount"]) > 0)
                                            {
                                                calRslt = (Convert.ToDouble(samDr["Amount"]) * Convert.ToDouble(samDr["Discount"])) / 100;
                                                allDisc = allDisc + calRslt;
                                            }
                                            else
                                            {
                                                calRslt = Convert.ToInt32(samDr["Discount"]);
                                                allDisc = allDisc + calRslt;
                                            }
                                            totRowCount = totRowCount + rowCount;
                                            sampleList.Discount = calRslt.ToString();
                                            sampleList.GrossDisCount = allDisc;
                                            sampleList.TotSampleCount = Convert.ToInt32(samDr["TotalSample"].ToString());
                                            sampleList.TotalGrossAmount = sumGrossAmount;
                                            sampleList.totsampForRange = rowCount;
                                            sampleList.chksampForRange = rowCount;
                                            invDetails.Add(sampleList);
                                        }
                                    }
                                    var status = 0;
                                    if (genInvNo == "first")
                                    {
                                        status = 1;
                                    }
                                    else if (genInvNo == "end")
                                    {
                                        status = 2;
                                    }
                                    else if (genInvNo == "mont")
                                    {
                                        status = 3;
                                    }
                                    string updInvStatus = "update invoice set InvoiceRptStatus=" + status + " where Id='" + dr["Id"] + "' ";
                                    MySqlCommand updcmd = new MySqlCommand(updInvStatus, conn);
                                    updcmd.CommandType = CommandType.Text;
                                    updcmd.ExecuteNonQuery();
                                }
                            }
                            #endregion fordaterangeReport
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invDetails;
            }
        }
        #endregion

        #region searchInvoiceCount
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/searchInvoiceCount")]
        [HttpGet]
        public int searchInvoiceCount(string invoiceType, string invoiceFrom, string invoiceTo, string clientCode, int rptFlag, string genInvNo, int deleteFlag)
        {
            List<InvoiceView> invDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            int listCount = 0;
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    var status = 0;
                    if (genInvNo == "first")
                    {
                        status = 1;
                    }
                    else if (genInvNo == "end")
                    {
                        status = 2;
                    }
                    else if (genInvNo == "mont")
                    {
                        status = 3;
                    }
                    conn.Open();
                    string strSQL = "";
                    string consSQL = " SELECT inv.*,lor.ProviderID,lor.ReferredBy,lor.CollectAt,lor.HomeCollectChargeAmount from invoice inv " +
                                            " inner join labOrder  lor on inv.RegID=lor.RegID and inv.MrdNo=lor.MrdNo ";

                    if (invoiceFrom != null && invoiceTo != null)
                    {
                        DateTime fromDate = DateTime.Parse(invoiceFrom);
                        //DateTime toDate = DateTime.Parse(invoiceTo);                        
                        var minPos = invoiceTo.LastIndexOf('-');
                        var exDate = Convert.ToInt32(invoiceTo.Substring(minPos + 1));
                        DateTime lastDate = new DateTime();
                        if (exDate > 15)
                        {
                            lastDate = new DateTime(fromDate.Year, fromDate.Month, 1).AddMonths(1).AddDays(-1);
                        }
                        else
                        {
                            lastDate = DateTime.Parse(invoiceTo);
                        }
                        DateTime toDate = lastDate;                        
                        invoiceFrom = fromDate.ToString("yyyy-MM-dd");
                        invoiceTo = toDate.ToString("yyyy-MM-dd");

                        if (invoiceType == "All Invoice")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                           " where inv.InvoiceDate " +
                                           " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                                   " where inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=" + status + " ";


                            }
                        }
                        else if (invoiceType == "Group")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                            " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else
                            {
                                if (genInvNo == "mont")
                                {
                                    strSQL = consSQL +
                                               " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=" + status + " ";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                               " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=" + status + "  ";
                                }
                            }
                        }
                        else
                        {
                            if (rptFlag == 1)//for ind invoice
                            {
                                strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                            }
                            else if (rptFlag == 2)//for range invoice
                            {
                                if (genInvNo == "mont")
                                {
                                    strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=" + status + " ";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                               " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                               " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=" + status + " ";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (invoiceType == "All Invoice")
                        {
                            strSQL = consSQL;
                        }
                        else if (invoiceType == "Group")
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                            " where inv.Action like 'GRP%' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                            }
                        }
                        else
                        {
                            if (rptFlag == 1)
                            {
                                strSQL = consSQL +
                                            " where inv.Action='" + invoiceType + "' ";
                            }
                            else
                            {
                                strSQL = consSQL +
                                            " where inv.Action='" + invoiceType + "' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                            }
                        }
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        listCount = dt.Rows.Count;
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return listCount;
            }
        }
        #endregion

        #region updatePendingInvoice
        /// <summary>       
        /// </summary>
        [Route("api/Account/updatePendingInvoice")]
        [HttpPost]
        public void updatePendingInvoice(string mrdNo, string patientID, string invoiceNo, string payAmount, string payType, string clientCode, string collAt, string refBy, string editId)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from paymentoverview where MrdNo='" + mrdNo + "' and PatientID='" + patientID + "' and InvoiceNo='" + invoiceNo + "' order by PaymentID desc limit 1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        //string insertSQL = "insert into printsummary (MrdNo,PatientID,LastPrintDate,PrintCount) values(@val1,@val2,@val3,@val4)";

                        //MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
                        //insertCmd.Parameters.AddWithValue("@val1", mrdNo);
                        //insertCmd.Parameters.AddWithValue("@val2", patientID);
                        //insertCmd.Parameters.AddWithValue("@val3", DateTime.Now.ToString("MM/dd/yyyy hh:mm tt"));
                        //insertCmd.Parameters.AddWithValue("@val4", 1);
                        //insertCmd.CommandType = CommandType.Text;
                        //insertCmd.ExecuteNonQuery();
                    }
                    else
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                var paidAmount = Convert.ToInt32(dr["PaidAmount"]) + Convert.ToInt32(payAmount);
                                var balAmount = Convert.ToInt32(dr["TotalAmount"]) - paidAmount;
                                var status = "";
                                var newdate = "";
                                DateTime today = DateTime.Today;
                                newdate = today.ToString("yyyy-MM-dd");
                                if ((Convert.ToInt32(payAmount) == 0) && Convert.ToInt32(dr["PaidAmount"]) == 0)
                                { status = "Pending"; }
                                else if (Convert.ToInt32(dr["TotalAmount"]) > paidAmount)
                                { status = "Parti.Paid"; }
                                else if (Convert.ToInt32(dr["TotalAmount"]) < paidAmount)
                                { status = "ToBeReturn"; }
                                else
                                { status = "Paid"; }

                                string insertSQL =
                                    "insert into paymentoverview " + " (PatientID,InvoiceNo,MrdNo,TotalAmount,PaidAmount,BalanceAmount,PaymentStatus,PaymentType,PaymentDate)" +
                                    " values(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9)";

                                MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
                                insertCmd.Parameters.AddWithValue("@val1", patientID);
                                insertCmd.Parameters.AddWithValue("@val2", invoiceNo);
                                insertCmd.Parameters.AddWithValue("@val3", mrdNo);
                                insertCmd.Parameters.AddWithValue("@val4", dr["TotalAmount"].ToString());
                                insertCmd.Parameters.AddWithValue("@val5", paidAmount);
                                insertCmd.Parameters.AddWithValue("@val6", balAmount);
                                insertCmd.Parameters.AddWithValue("@val7", status);
                                insertCmd.Parameters.AddWithValue("@val8", payType);
                                insertCmd.Parameters.AddWithValue("@val9", newdate);
                                insertCmd.CommandType = CommandType.Text;
                                insertCmd.ExecuteNonQuery();

                                string updSQL = "UPDATE  Invoice SET Status='" + status + "',NetAmount='" + balAmount + "',PaidAmount='" + paidAmount + "', InvoiceDate='" + newdate + "', PaymentType='" + payType + "', ProviderHostName='" + collAt + "' " +
                                                " where InvoiceNo='" + invoiceNo + "' and " +
                                                " MrdNo='" + mrdNo + "' and RegID='" + patientID + "' ";
                                MySqlCommand updcmd = new MySqlCommand(updSQL, conn);
                                updcmd.CommandType = CommandType.Text;
                                updcmd.ExecuteNonQuery();

                                string uplabSQL = "UPDATE  labOrder SET ReferredBy='" + refBy + "',ProviderID='" + clientCode + "' " +
                                             " where MrdNo='" + mrdNo + "' and RegID='" + patientID + "' ";
                                MySqlCommand updlabcmd = new MySqlCommand(uplabSQL, conn);
                                updlabcmd.CommandType = CommandType.Text;
                                updlabcmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region updateRangeInvoice
        /// <summary>       
        /// </summary>
        [Route("api/Account/updateRangeInvoice")]
        [HttpPost]
        public void updateRangeInvoice(string clientCode, string invoiceNo, string totIncome, string payAmount, string payType)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "select * from paymentforrangeinvoice where ClientCode='" + clientCode + "' and InvoiceNo='" + invoiceNo + "' order by PaymentID desc Limit 1";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count == 0)
                    {
                        var status = "";
                        string insertSQL = "insert into paymentforrangeinvoice (ClientCode,InvoiceNo,TotalIncome,PaidAmount,TotalBalance,PaymentType,PaymentDate,PaymentStatus) values(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";
                        MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
                        if ((Convert.ToInt32(payAmount) == 0))
                        { status = "Pending"; }
                        else if (Convert.ToInt32(totIncome) > Convert.ToInt32(payAmount))
                        { status = "Parti.Paid"; }
                        else if (Convert.ToInt32(totIncome) < Convert.ToInt32(payAmount))
                        { status = "ToBeReturn"; }
                        else
                        { status = "Paid"; }
                        insertCmd.Parameters.AddWithValue("@val1", clientCode);
                        insertCmd.Parameters.AddWithValue("@val2", invoiceNo);
                        insertCmd.Parameters.AddWithValue("@val3", totIncome);
                        insertCmd.Parameters.AddWithValue("@val4", payAmount);
                        insertCmd.Parameters.AddWithValue("@val5", Convert.ToInt32(totIncome) - Convert.ToInt32(payAmount));
                        insertCmd.Parameters.AddWithValue("@val6", payType);
                        insertCmd.Parameters.AddWithValue("@val7", DateTime.Now.ToString("yyyy-MM-dd"));
                        insertCmd.Parameters.AddWithValue("@val8", status);
                        insertCmd.CommandType = CommandType.Text;
                        insertCmd.ExecuteNonQuery();
                    }
                    else
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                var paidAmount = Convert.ToInt32(payAmount);
                                var balAmount = Convert.ToInt32(dr["TotalBalance"]) - paidAmount;
                                var status = "";
                                var newdate = "";
                                DateTime today = DateTime.Today;
                                newdate = today.ToString("yyyy-MM-dd");
                                if ((Convert.ToInt32(payAmount) == 0) && Convert.ToInt32(dr["PaidAmount"]) == 0)
                                { status = "Pending"; }
                                else if (Convert.ToInt32(dr["TotalIncome"]) > paidAmount)
                                { status = "Parti.Paid"; }
                                else if (Convert.ToInt32(dr["TotalIncome"]) < paidAmount)
                                { status = "ToBeReturn"; }
                                else
                                { status = "Paid"; }

                                string insertSQL =
                                    "insert into paymentforrangeinvoice(ClientCode,InvoiceNo,TotalIncome,PaidAmount,TotalBalance,PaymentType,PaymentDate,PaymentStatus) values(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8)";

                                MySqlCommand insertCmd = new MySqlCommand(insertSQL, conn);
                                insertCmd.Parameters.AddWithValue("@val1", clientCode);
                                insertCmd.Parameters.AddWithValue("@val2", invoiceNo);
                                insertCmd.Parameters.AddWithValue("@val3", totIncome);
                                insertCmd.Parameters.AddWithValue("@val4", payAmount);
                                insertCmd.Parameters.AddWithValue("@val5", balAmount);
                                insertCmd.Parameters.AddWithValue("@val6", payType);
                                insertCmd.Parameters.AddWithValue("@val7", newdate);
                                insertCmd.Parameters.AddWithValue("@val8", status);
                                insertCmd.CommandType = CommandType.Text;
                                insertCmd.ExecuteNonQuery();
                                //string updSQL = "UPDATE  Invoice SET Status='" + status + "',NetAmount='" + balAmount + "',PaidAmount='" + paidAmount + "', InvoiceDate='" + newdate + "', PaymentType='" + payType + "' " +
                                //                " where InvoiceNo='" + invoiceNo + "' and " +
                                //                " MrdNo='" + mrdNo + "' and RegID='" + patientID + "' ";
                                //MySqlCommand updcmd = new MySqlCommand(updSQL, conn);
                                //updcmd.CommandType = CommandType.Text;
                                //updcmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion


        #region searchInvoiceForDisp
        /// <summary>
        /// <returns></returns>
        [Route("api/Account/searchInvoiceForDisp")]
        [HttpGet]
        public List<InvoiceView> searchInvoiceForDisp(string invValue, int searchFlag, string code)
        {
            List<InvoiceView> invDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            var status = "";
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string consSQL = " ";
                    if ((invValue != "") && (invValue != null))
                    {
                        consSQL = " SELECT * from daterangeinvoice where INVNumber like '" + invValue + "%' ";
                    }
                    else
                    {
                        consSQL = " SELECT * from daterangeinvoice where ClientCode = '" + code + "' ";
                    }
                    MySqlDataAdapter mydata = new MySqlDataAdapter(consSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if (dr != null)
                            {
                                string staSQL = "SELECT * FROM paymentforrangeinvoice where InvoiceNo='" + dr["INVNumber"].ToString() + "' order by PaymentID desc limit 1;";
                                MySqlDataAdapter staData = new MySqlDataAdapter(staSQL, conn);
                                MySqlCommandBuilder staCmd = new MySqlCommandBuilder(staData);
                                DataSet sDs = new DataSet();
                                DataTable sDt = new DataTable();
                                staData.Fill(sDs);
                                sDt = sDs.Tables[0];
                                if (sDt.Rows.Count > 0)
                                {
                                    status = sDt.Rows[0]["PaymentStatus"].ToString();
                                }
                                else
                                {
                                    status = dr["InvoiceStatus"].ToString();
                                }
                                InvoiceView sampleList = new InvoiceView();
                                sampleList.INVNumber = dr["INVNumber"].ToString();
                                sampleList.INVDateFrom = dr["INVDateFrom"].ToString();
                                sampleList.INVDateTo = dr["INVDateTo"].ToString();
                                sampleList.ClientCode = dr["ClientCode"].ToString();
                                sampleList.INVType = dr["INVType"].ToString();
                                sampleList.CreatedDate = dr["CreatedDate"].ToString();
                                sampleList.InvoiceStatus = status;
                                invDetails.Add(sampleList);
                            }
                        }

                        //    var inchkDate = "";
                        //    var invchkMrdno = "";
                        //    var sampCount = 0;
                        //    foreach (DataRow dr in dt.Rows)
                        //    {
                        //        if (dr != null)
                        //        {
                        //            string sampleSQL = "create temporary table  TestInfo As" +
                        //            " SELECT *,'0000000' TotalAmount,'0000' TotalSample FROM commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'; " +
                        //            " update TestInfo AS TI set TI.TotalAmount=( " +
                        //            " SELECT sum(NetAmount) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'); " +
                        //            " update TestInfo AS TI set TI.TotalSample=( " +
                        //            " SELECT Count(*) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "');" +
                        //            " select * from TestInfo; " +
                        //            " Drop table TestInfo;";
                        //            MySqlDataAdapter samData = new MySqlDataAdapter(sampleSQL, conn);
                        //            MySqlCommandBuilder samCmd = new MySqlCommandBuilder(samData);
                        //            DataSet samDs = new DataSet();
                        //            DataTable samDt = new DataTable();
                        //            samData.Fill(samDs);
                        //            samDt = samDs.Tables[0];
                        //            if (samDt.Rows.Count > 0)
                        //            {
                        //                foreach (DataRow samDr in samDt.Rows)
                        //                {
                        //                    InvoiceView sampleList = new InvoiceView();
                        //                    sampleList.RegID = dr["RegID"].ToString();
                        //                    sampleList.InvoiceNo = dr["InvoiceNo"].ToString();
                        //                    sampleList.MrdNo = dr["MrdNo"].ToString();
                        //                    sampleList.PatientName = dr["PatientName"].ToString();

                        //                    sampleList.Code = samDr["Code"].ToString();
                        //                    sampleList.Description = samDr["Description"].ToString();
                        //                    sampleList.Amount = dr["Amount"].ToString();
                        //                    sampleList.Discount = samDr["Discount"].ToString();
                        //                    sampleList.NetAmount = samDr["NetAmount"].ToString();
                        //                    sampleList.TotalAmount = samDr["TotalAmount"].ToString();

                        //                    sampleList.PaidAmount = dr["PaidAmount"].ToString();
                        //                    sampleList.InvoiceDate = dr["InvoiceDate"].ToString();
                        //                    sampleList.Action = dr["Action"].ToString();
                        //                    sampleList.PaymentType = dr["PaymentType"].ToString();
                        //                    sampleList.Status = dr["Status"].ToString();
                        //                    sampleList.ProviderHostName = dr["ProviderHostName"].ToString();
                        //                    if (dr["ProviderID"] != DBNull.Value)
                        //                    {
                        //                        sampleList.ProviderID = dr["ProviderID"].ToString();
                        //                    }
                        //                    else
                        //                    {
                        //                        sampleList.ProviderID = "";
                        //                    }
                        //                    sampleList.ReferredBy = dr["ReferredBy"].ToString();
                        //                    sampleList.CollectionCharge = dr["HomeCollectChargeAmount"].ToString();
                        //                    if ((inchkDate != dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                        //                    {
                        //                        sampCount = 1;
                        //                        inchkDate = dr["InvoiceDate"].ToString();
                        //                        invchkMrdno = dr["MrdNo"].ToString();
                        //                    }
                        //                    else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                        //                    {
                        //                        sampCount = 1;
                        //                        inchkDate = dr["InvoiceDate"].ToString();
                        //                        invchkMrdno = dr["MrdNo"].ToString();
                        //                    }
                        //                    else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno == dr["MrdNo"].ToString()))
                        //                    {
                        //                        sampCount = sampCount + 1;
                        //                        inchkDate = dr["InvoiceDate"].ToString();
                        //                        invchkMrdno = dr["MrdNo"].ToString();
                        //                    }
                        //                    sampleList.SampleCount = sampCount;
                        //                    sampleList.TotSampleCount = Convert.ToInt32(samDr["TotalSample"].ToString());
                        //                    invDetails.Add(sampleList);
                        //                }
                        //            }
                        //        }                            
                        //}
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invDetails;
            }
        }
        #endregion

        #region getDetailsForRangeEdit
        [Route("api/Account/getDetailsForRangeEdit")]
        [HttpGet]
        public List<InvoiceView> getDetailsForRangeEdit(string invoceNo, string invoiceType, string invoiceFrom, string invoiceTo, string clientCode,
            int rptFlag, string genInvNo, int deleteFlag)
        {
            List<InvoiceView> invDetails = new List<InvoiceView>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    conn.Open();
                    string strSQL = "";
                    string consSQL = " SELECT inv.*,lor.ProviderID,lor.ReferredBy,lor.CollectAt,lor.HomeCollectChargeAmount from invoice inv " +
                                            " inner join labOrder  lor on inv.RegID=lor.RegID and inv.MrdNo=lor.MrdNo ";

                    string chkSQL = " select * from paymentforrangeinvoice where ClientCode='" + clientCode + "' and InvoiceNo='" + invoceNo + "'";
                    MySqlDataAdapter chkadap = new MySqlDataAdapter(chkSQL, conn);
                    MySqlCommandBuilder chkCmd = new MySqlCommandBuilder(chkadap);
                    DataSet chkDS = new DataSet();
                    DataTable chkDt = new DataTable();
                    chkadap.Fill(chkDS);
                    chkDt = chkDS.Tables[0];
                    if (chkDt.Rows.Count == 0)
                    {
                        #region forgettingFreshAmountforRangeInvoice
                        if (invoiceFrom != null && invoiceTo != null)
                        {
                            DateTime fromDate = DateTime.Parse(invoiceFrom);
                            //DateTime toDate = DateTime.Parse(invoiceTo);
                            
                            var minPos = invoiceTo.LastIndexOf('-');
                            var exDate = Convert.ToInt32(invoiceTo.Substring(minPos + 1));
                            DateTime lastDate = new DateTime();
                            if (exDate > 15)
                            {
                                lastDate = new DateTime(fromDate.Year, fromDate.Month, 1).AddMonths(1).AddDays(-1);
                            }
                            else
                            {
                                lastDate = DateTime.Parse(invoiceTo);
                            }
                            DateTime toDate = lastDate;
                            
                            invoiceFrom = fromDate.ToString("yyyy-MM-dd");
                            invoiceTo = toDate.ToString("yyyy-MM-dd");

                            if (invoiceType == "All Invoice")
                            {
                                if (rptFlag == 1)
                                {
                                    strSQL = consSQL +
                                               " where inv.InvoiceDate " +
                                               " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                                }
                                else
                                {
                                    if (genInvNo == "mont")
                                    {
                                        strSQL = consSQL +
                                                   " where inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=0 ";
                                    }
                                    else
                                    {
                                        strSQL = consSQL +
                                                   " where inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                    }
                                }
                            }
                            else if (invoiceType == "Group")
                            {
                                if (rptFlag == 1)
                                {
                                    strSQL = consSQL +
                                                " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                                " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                                }
                                else
                                {
                                    if (genInvNo == "mont")
                                    {
                                        strSQL = consSQL +
                                                   " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=0 ";
                                    }
                                    else
                                    {
                                        strSQL = consSQL +
                                                   " where inv.Action like 'GRP%' and inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                    }
                                }
                            }
                            else
                            {
                                if (rptFlag == 1)
                                {
                                    strSQL = consSQL +
                                                    " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                    " between '" + invoiceFrom + "' and '" + invoiceTo + "' ";
                                }
                                else
                                {
                                    if (genInvNo == "mont")
                                    {
                                        strSQL = consSQL +
                                                    " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                    " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                    " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' and InvoiceRptStatus=0 ";
                                    }
                                    else
                                    {
                                        strSQL = consSQL +
                                                   " where inv.Action='" + invoiceType + "' and inv.InvoiceDate " +
                                                   " between '" + invoiceFrom + "' and '" + invoiceTo + "' " +
                                                   " and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (invoiceType == "All Invoice")
                            {
                                strSQL = consSQL;
                            }
                            else if (invoiceType == "Group")
                            {
                                if (rptFlag == 1)
                                {
                                    strSQL = consSQL +
                                                " where inv.Action like 'GRP%' ";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                                " where inv.Action like 'GRP%' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                            }
                            else
                            {
                                if (rptFlag == 1)
                                {
                                    strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' ";
                                }
                                else
                                {
                                    strSQL = consSQL +
                                                " where inv.Action='" + invoiceType + "' and inv.PaymentType='Credit' and lor.ProviderID='" + clientCode + "' ";
                                }
                            }
                        }
                        MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                        MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                        DataSet ds = new DataSet();
                        mydata.Fill(ds);
                        dt = ds.Tables[0];
                        if (dt.Rows.Count > 0)
                        {

                            if (rptFlag == 2)
                            {
                                #region fordaterangeReport
                                var inchkDate = "";
                                var invchkMrdno = "";
                                var sampCount = 0;
                                double allDisc = 0;
                                double calRslt = 0;
                                double sumGrossAmount = 0;
                                double sumNetAmount = 0;
                                string grossPayType = "";
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr != null)
                                    {
                                        string sampleSQL = "create temporary table  TestInfo As" +
                                        " SELECT *,'0000000' GrossTotal,'0000000' NetTotal,'0000' TotalSample FROM commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'; " +
                                        " update TestInfo AS TI set TI.GrossTotal=( " +
                                        " SELECT sum(Amount) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'); " +
                                        " update TestInfo AS TI set TI.NetTotal=( " +
                                        " SELECT sum(NetAmount) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "'); " +
                                        " update TestInfo AS TI set TI.TotalSample=( " +
                                        " SELECT Count(*) fROM   commonprofiletestdetails where MrdNo = '" + dr["MrdNo"].ToString() + "');" +
                                        " select * from TestInfo; " +
                                        " Drop table TestInfo;";
                                        MySqlDataAdapter samData = new MySqlDataAdapter(sampleSQL, conn);
                                        MySqlCommandBuilder samCmd = new MySqlCommandBuilder(samData);
                                        DataSet samDs = new DataSet();
                                        DataTable samDt = new DataTable();
                                        samData.Fill(samDs);
                                        samDt = samDs.Tables[0];
                                        if (samDt.Rows.Count > 0)
                                        {
                                            foreach (DataRow samDr in samDt.Rows)
                                            {
                                                InvoiceView sampleList = new InvoiceView();
                                                sampleList.RegID = dr["RegID"].ToString();
                                                sampleList.InvoiceNo = dr["InvoiceNo"].ToString();
                                                sampleList.MrdNo = dr["MrdNo"].ToString();
                                                sampleList.PatientName = dr["PatientName"].ToString();

                                                sampleList.Code = samDr["Code"].ToString();
                                                sampleList.Description = samDr["Description"].ToString();
                                                sampleList.GrossTotal = Convert.ToInt32(samDr["GrossTotal"].ToString());
                                                sampleList.Amount = samDr["Amount"].ToString();


                                                sampleList.NetAmount = samDr["NetAmount"].ToString();
                                                sampleList.NetTotal = Convert.ToDouble(samDr["NetTotal"].ToString());

                                                sampleList.PaidAmount = dr["PaidAmount"].ToString();
                                                sampleList.InvoiceDate = dr["InvoiceDate"].ToString();
                                                sampleList.Action = dr["Action"].ToString();
                                                sampleList.PaymentType = dr["PaymentType"].ToString();
                                                grossPayType = dr["PaymentType"].ToString();
                                                sampleList.Status = dr["Status"].ToString();
                                                sampleList.ProviderHostName = dr["ProviderHostName"].ToString();
                                                if (dr["ProviderID"] != DBNull.Value)
                                                {
                                                    sampleList.ProviderID = dr["ProviderID"].ToString();
                                                }
                                                else
                                                {
                                                    sampleList.ProviderID = "";
                                                }
                                                sampleList.ReferredBy = dr["ReferredBy"].ToString();
                                                sampleList.CollectionCharge = Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());

                                                if ((inchkDate != dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                                                {
                                                    sampCount = 1;
                                                    inchkDate = dr["InvoiceDate"].ToString();
                                                    invchkMrdno = dr["MrdNo"].ToString();
                                                    if (Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString()) > 0)
                                                    {
                                                        sumGrossAmount = Convert.ToInt32(samDr["GrossTotal"].ToString()) +
                                                            Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                                    }
                                                    else
                                                    {
                                                        sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString());
                                                    }
                                                    sumNetAmount = Convert.ToDouble(samDr["NetTotal"].ToString());
                                                }
                                                else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno != dr["MrdNo"].ToString()))
                                                {
                                                    sampCount = 1;
                                                    inchkDate = dr["InvoiceDate"].ToString();
                                                    invchkMrdno = dr["MrdNo"].ToString();
                                                    allDisc = 0;
                                                    if (Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString()) > 0)
                                                    {
                                                        sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString()) +
                                                            Convert.ToInt32(dr["HomeCollectChargeAmount"].ToString());
                                                    }
                                                    else
                                                    {
                                                        sumGrossAmount = sumGrossAmount + Convert.ToInt32(samDr["GrossTotal"].ToString());
                                                    }
                                                    sumNetAmount = sumNetAmount + Convert.ToDouble(samDr["NetTotal"].ToString());
                                                }
                                                else if ((inchkDate == dr["InvoiceDate"].ToString()) && (invchkMrdno == dr["MrdNo"].ToString()))
                                                {
                                                    sampCount = sampCount + 1;
                                                    inchkDate = dr["InvoiceDate"].ToString();
                                                    invchkMrdno = dr["MrdNo"].ToString();
                                                    sumGrossAmount = sumGrossAmount + 0;
                                                }
                                                sampleList.SampleCount = sampCount;
                                                if (samDr["Discount"] == DBNull.Value)
                                                {
                                                    //  calRslt = Convert.ToInt32(samDr["Discount"]);
                                                    allDisc = allDisc + calRslt;
                                                }
                                                else
                                                {
                                                    if (Convert.ToDouble(samDr["Discount"]) > 0)
                                                    {
                                                        calRslt = (Convert.ToDouble(samDr["Amount"]) * Convert.ToDouble(samDr["Discount"])) / 100;
                                                        allDisc = allDisc + calRslt;
                                                    }
                                                    else
                                                    {
                                                        calRslt = Convert.ToInt32(samDr["Discount"]);
                                                        allDisc = allDisc + calRslt;
                                                    }
                                                }
                                                sampleList.Discount = calRslt.ToString();
                                                sampleList.GrossDisCount = allDisc;
                                                sampleList.TotSampleCount = Convert.ToInt32(samDr["TotalSample"].ToString());
                                            }
                                        }
                                    }
                                }
                                InvoiceView forGross = new InvoiceView();
                                forGross.ClientCode = clientCode;
                                forGross.TotalGrossAmount = sumGrossAmount;
                                forGross.TotalNetAmnt = sumGrossAmount;
                                forGross.GrossPayType = grossPayType;
                                invDetails.Add(forGross);
                                #endregion fordaterangeReport
                            }
                        }
                        #endregion forgettingFreshAmountforRangeInvoice
                    }
                    else
                    {
                        string sampleSQL =
                        " create temporary table  TestInfo As" +
                        " SELECT distinct *,'0000000' TotPaidAmount FROM paymentforrangeinvoice where InvoiceNo ='" + invoceNo + "' and ClientCode ='" + clientCode + "' order by PaymentID desc Limit 1; " +
                        " update TestInfo AS TI set TI.TotPaidAmount=(SELECT sum(PaidAmount) fROM paymentforrangeinvoice where InvoiceNo ='" + invoceNo + "');" +
                        " select * from TestInfo;  Drop table TestInfo; ";

                        MySqlDataAdapter samData = new MySqlDataAdapter(sampleSQL, conn);
                        MySqlCommandBuilder samCmd = new MySqlCommandBuilder(samData);
                        DataSet samDs = new DataSet();
                        DataTable samDt = new DataTable();
                        samData.Fill(samDs);
                        samDt = samDs.Tables[0];
                        if (samDt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in samDt.Rows)
                            {
                                if (dr != null)
                                {
                                    InvoiceView forGross = new InvoiceView();
                                    forGross.ClientCode = clientCode;
                                    forGross.InvoiceNo = invoceNo;
                                    forGross.TotalGrossAmount = Convert.ToDouble(dr["TotalIncome"].ToString());
                                    forGross.PaidAmount = dr["TotPaidAmount"].ToString();
                                    forGross.TotalNetAmnt = Convert.ToDouble(dr["TotalBalance"].ToString());
                                    forGross.GrossPayType = dr["PaymentType"].ToString();
                                    forGross.InvoiceStatus = dr["PaymentStatus"].ToString();
                                    invDetails.Add(forGross);
                                }
                            }
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return invDetails;
            }
        }
        #endregion getDetailsForRangeEdit

        [Route("api/Account/attachDownloadedFiles")]
        [HttpGet]
        public HttpResponseMessage attachDownloadedFiles(string searchName)
        {
            HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.BadRequest);

            string physicalGrandparentPath;
            //physicalGrandparentPath = @"C:/Users/Kalif/Downloads/";
            physicalGrandparentPath = @"" + System.Configuration.ConfigurationManager.AppSettings["emailDownPath"] + "";
            string phy = "C:/Users/Kalif/Downloads/";
            var folderPath = physicalGrandparentPath + "\\";
            //string[] fileArray = Directory.GetFiles(folderPath, "*.*", SearchOption.AllDirectories);
            string[] files = Directory.GetFiles(folderPath, "" + searchName + "*.pdf"); //Getting Text files

            DirectoryInfo dinfo2 = new DirectoryInfo(physicalGrandparentPath);
            FileInfo[] Files2 = dinfo2.GetFiles("" + searchName + "*.pdf");
            int filesCount = files.GetLength(0);
            if (filesCount <= 0)
            {

            }
            else
            {
                for (int iCnt = 0; iCnt <= Files2.Length - 1; iCnt++)
                {
                    FileStream fileStream = new FileStream(Files2[iCnt].FullName, FileMode.Open, FileAccess.Read);

                    byte[] buffer;
                    int length = (int)fileStream.Length;  // get file length
                    buffer = new byte[length];            // create buffer
                    int count;                            // actual number of bytes read
                    int sum = 0;                          // total number of bytes read

                    // read until Read method returns 0 (end of the stream has been reached)
                    while ((count = fileStream.Read(buffer, sum, length - sum)) > 0)
                        sum += count;
                    //content length for use in header
                    var contentLength = buffer.Length;
                    var statuscode = HttpStatusCode.OK;
                    response = Request.CreateResponse(statuscode);
                    response.Content = new StreamContent(new MemoryStream(buffer));
                    response.Content.Headers.ContentLength = contentLength;
                    response.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment");
                    response.Content.Headers.ContentDisposition.FileName = Files2[iCnt].FullName;
                    response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");
                    //commneted to check below code

                    //var stream = new MemoryStream();
                    //var result = new HttpResponseMessage(HttpStatusCode.OK)
                    //{
                    //    Content = new ByteArrayContent(stream.ToArray())
                    //};
                    //result.Content.Headers.ContentDisposition =
                    //    new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment")
                    //    {
                    //        FileName = Files2[iCnt].Name
                    //    };
                    //result.Content.Headers.ContentType =
                    //    new MediaTypeHeaderValue("application/pdf");
                    //result.Headers.Add("X-Filename", Files2[iCnt].FullName);
                    //response = result;
                }

                //var documents = reader.GetDocument(docid);

                //    //successful
                //    var statuscode = HttpStatusCode.OK;
                //    response = Request.CreateResponse(statuscode);
                //    response.Content = new StreamContent(new MemoryStream(buffer));
                //    response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");
                //   // response.Content.Headers.ContentLength = contentLength;
                //    ContentDispositionHeaderValue contentDisposition = null;
                //    if (ContentDispositionHeaderValue.TryParse("inline; filename=" + document.Name + ".pdf", out contentDisposition))
                //    {
                //        response.Content.Headers.ContentDisposition = contentDisposition;
                //    }


                //if (String.IsNullOrEmpty(id))
                //    return Request.CreateResponse(HttpStatusCode.BadRequest);

                //string fileName;
                //string localFilePath;
                //int fileSize;

                //localFilePath = getFileFromID(id, out fileName, out fileSize);

                //var statuscode = HttpStatusCode.OK;
                //response = Request.CreateResponse(statuscode);
                //response.Content = new StreamContent(new FileStream(localFilePath, FileMode.Open, FileAccess.Read));
                //response.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment");
                //response.Content.Headers.ContentDisposition.FileName = fileName;
                //response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");



            }
            return response;
        }

        #region insertrngCancelComment
        /// <summary>       
        [Route("api/Account/insertrngCancelComment")]
        [HttpPost]
        public void insertrngCancelComment(string clientCode, string invoiceNo, string comment)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string today = DateTime.Now.ToString("yyyy-MM-dd");
                    conn.Open();
                    string strSQL = " SELECT * from daterangeinvoice where INVNumber='" + invoiceNo + "' and ClientCode='" + clientCode + "'";
                    MySqlDataAdapter sda = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                    DataSet Ds = new DataSet();
                    DataTable Dt = new DataTable();
                    sda.Fill(Ds);
                    Dt = Ds.Tables[0];
                    if (Dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in Dt.Rows)
                        {
                            if (dr != null)
                            {
                                string invSQL = " Update daterangeinvoice set InvoiceStatus='Cancelled', Comment='" + comment + "', Date='" + today + "' where INVNumber='" + invoiceNo + "' and ClientCode='" + clientCode + "' and InvID='" + dr["InvID"] + "'";
                                MySqlCommand invSQLCmd = new MySqlCommand(invSQL, conn);
                                invSQLCmd.CommandType = CommandType.Text;
                                invSQLCmd.ExecuteNonQuery();

                                string updSQL = " Update paymentforrangeinvoice set PaymentStatus='Cancelled', PaymentDate='" + today + "' where InvoiceNo='" + invoiceNo + "' and ClientCode='" + clientCode + "' ";
                                MySqlCommand updSQLCmd = new MySqlCommand(updSQL, conn);
                                updSQLCmd.CommandType = CommandType.Text;
                                updSQLCmd.ExecuteNonQuery();
                            }
                        }
                    }


                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion

        #region getdisplayTestByTestCode
        [Route("api/Account/getdisplayTestByTestCode")]
        [HttpGet]
        public List<DisplayTest> getdisplayTestByTestCode(string testCode)
        {
            List<DisplayTest> lstdisplay = new List<DisplayTest>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * FROM displaytest where TestCode='" + testCode + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            if ((dr != null))
                            {
                                DisplayTest titleDetails = new DisplayTest();

                                if (dr["DisplayTestID"] != DBNull.Value)
                                {
                                    titleDetails.DisplayTestID = Convert.ToInt32(dr["DisplayTestID"].ToString());
                                }
                                else
                                {
                                    titleDetails.DisplayTestID = 0;
                                }

                                if (dr["TestCode"] != DBNull.Value)
                                {
                                    titleDetails.TestCode = dr["TestCode"].ToString();
                                }
                                else
                                {
                                    titleDetails.TestCode = "";
                                }
                                if (dr["TestName"] != DBNull.Value)
                                {
                                    titleDetails.TestName = dr["TestName"].ToString();
                                }
                                else
                                {
                                    titleDetails.TestName = "";
                                }
                                if (dr["DisplayName"] != DBNull.Value)
                                {
                                    titleDetails.DisplayName = dr["DisplayName"].ToString();
                                }
                                else
                                {
                                    titleDetails.DisplayName = "";
                                }
                                if (dr["Amount"] != DBNull.Value)
                                {
                                    titleDetails.Amount = Convert.ToDouble(dr["Amount"].ToString());
                                }
                                else
                                {
                                    titleDetails.Amount = 0.0;
                                }
                                if (dr["ExpiryDate"] != DBNull.Value)
                                {
                                    titleDetails.ExpiryDate = dr["ExpiryDate"].ToString();
                                }
                                else
                                {
                                    titleDetails.ExpiryDate = "";
                                }
                                lstdisplay.Add(titleDetails);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstdisplay;
            }
        }
        #endregion


        #region updateAgeForPatient
        /// <summary>       
        [Route("api/Account/updateAgeForPatient")]
        [HttpPost]
        public void updateAgeForPatient(string regId, string age)
        {
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string today = DateTime.Now.ToString("yyyy-MM-dd");
                    conn.Open();
                    string strSQL = " SELECT * from patientregistration where RegID='" + regId + "' ";
                    MySqlDataAdapter sda = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder scmd = new MySqlCommandBuilder(sda);
                    DataSet Ds = new DataSet();
                    DataTable Dt = new DataTable();
                    sda.Fill(Ds);
                    Dt = Ds.Tables[0];
                    if (Dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in Dt.Rows)
                        {
                            if (dr != null)
                            {
                                string invSQL = " Update patientregistration set Age='" + age + "' where RegID='" + regId + "' ";
                                MySqlCommand invSQLCmd = new MySqlCommand(invSQL, conn);
                                invSQLCmd.CommandType = CommandType.Text;
                                invSQLCmd.ExecuteNonQuery();
                            }
                        }
                    }

                }
                catch (Exception Ex)
                {
                    string logdetails = Ex.InnerException.ToString();
                }
            }
        }
        #endregion
        #region getAllPersonDetails

        /// <summary>
        /// TABLE-DOCTOR
        /// </summary>
        /// To get all records from LabOrder table.
        ///  /// <param name=" "></param>
        /// <returns name="getAllOrderDetails"></returns>
        ///
        [Route("api/Account/getAllPersonDetails")]
        [HttpGet]

        public List<Doctor> getAllPersonDetails(string doctorname, string chkFirstName)
        {
            List<Doctor> lstDoctorDetails = new List<Doctor>();
            DataTable dt = new DataTable();
            using (MySqlConnection conn = new MySqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MasterMani"].ConnectionString))
            {
                try
                {
                    string strSQL = "SELECT * from doctorpersonalinfo where UserName  LIKE'%" + doctorname + "' and FirstName like '%" + chkFirstName + "'";
                    conn.Open();
                    MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, conn);
                    MySqlCommandBuilder cmd = new MySqlCommandBuilder(mydata);
                    DataSet ds = new DataSet();
                    mydata.Fill(ds);
                    dt = ds.Tables[0];
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (dr != null)
                        {
                            Doctor doctordetails = new Doctor();
                            doctordetails.DoctorId = (int)dr["DoctorId"];
                            doctordetails.FirstName = dr["FirstName"].ToString();
                            doctordetails.LastName = dr["LastName"].ToString();
                            doctordetails.UserName = dr["UserName"].ToString();
                            lstDoctorDetails.Add(doctordetails);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex);
                }
                return lstDoctorDetails;
            }
        }

        #endregion

        [Route("api/Account/chkUploadFiles")]
        [HttpPost]
        public HttpResponseMessage chkUploadFiles()
        {
            //Create the Directory.
            string physicalGrandparentPath = System.Configuration.ConfigurationManager.AppSettings["uplSignPath"];
            //if (!Directory.Exists(path))
            //{
            //    Directory.CreateDirectory(path);
            //}
            int iUploadedCnt = 0;
            string filePath = "";
            //Save the Files.
            System.Web.HttpFileCollection hfc = System.Web.HttpContext.Current.Request.Files;
            // CHECK THE FILE COUNT.f
            for (int iCnt = 0; iCnt <= hfc.Count - 1; iCnt++)
            {
                System.Web.HttpPostedFile hpf = hfc[iCnt];
                Login loginSignature = new Login();
                if (hpf.ContentLength > 0)
                {
                    filePath = physicalGrandparentPath + Path.GetFileName(hpf.FileName);

                    Image img = Image.FromStream(hpf.InputStream, true, true);
                    var ss = ("Width: " + img.Width + ", Height: " + img.Height);
                    decimal size = Math.Round(((decimal)hpf.ContentLength / (decimal)1024), 2);

                    int newwidthimg = 397;
                    int newHeight = 115;
                    float AspectRatio = (float)img.Size.Width / (float)img.Size.Height;
                    Bitmap bitMAP1 = new Bitmap(newwidthimg, newHeight);
                    Graphics imgGraph = Graphics.FromImage(bitMAP1);
                    var thumbnailImg = new Bitmap(newwidthimg, newHeight);
                    var thumbGraph = Graphics.FromImage(thumbnailImg);
                    thumbGraph.CompositingQuality = CompositingQuality.HighQuality;


                    thumbGraph.SmoothingMode = SmoothingMode.HighQuality;
                    thumbGraph.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    var imageRectangle = new Rectangle(0, 0, newwidthimg, newHeight);
                    thumbGraph.DrawImage(img, imageRectangle);

                    if (!File.Exists(physicalGrandparentPath + Path.GetFileName(hpf.FileName)))
                    {
                        // SAVE THE FILES IN THE FOLDER.                           
                        thumbnailImg.Save(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                        //hpf.SaveAs(physicalGrandparentPath + Path.GetFileName(hpf.FileName));

                        iUploadedCnt = iUploadedCnt = iUploadedCnt + 1;
                        loginSignature.SignatureImagePath = "/Signs/" + Path.GetFileName(hpf.FileName);
                        loginSignature.SignatureImageName = Path.GetFileName(hpf.FileName);

                    }
                    else
                    {
                        File.Delete(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                        thumbnailImg.Save(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                        //hpf.SaveAs(physicalGrandparentPath + Path.GetFileName(hpf.FileName));
                        iUploadedCnt = iUploadedCnt = iUploadedCnt + 1;
                        loginSignature.SignatureImagePath = "/Signs/" + Path.GetFileName(hpf.FileName);
                        loginSignature.SignatureImageName = Path.GetFileName(hpf.FileName);

                    }
                    bitMAP1.Dispose();
                    img.Dispose();
                    // }
                }
            }

            //Send OK Response to Client.
            return Request.CreateResponse(HttpStatusCode.OK);
        }
    }
}

